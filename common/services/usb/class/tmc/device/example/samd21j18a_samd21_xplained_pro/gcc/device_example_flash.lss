
device_example_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003294  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000e0  20000000  00003294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000009f8  200000e0  00003374  000200e0  2**2
                  ALLOC
  3 .stack        00002000  20000ad8  00003d6c  000200e0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
  5 .comment      0000007f  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
  6 .debug_info   00024d28  00000000  00000000  00020187  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d5f  00000000  00000000  00044eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000006e8  00000000  00000000  00048c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macro  0001c3ad  00000000  00000000  000492f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000e368  00000000  00000000  000656a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00090924  00000000  00000000  00073a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004feb  00000000  00000000  0010432f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007c0  00000000  00000000  0010931a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001144  00000000  00000000  00109adc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 2a 00 20 b5 2d 00 00 b1 2d 00 00 b1 2d 00 00     .*. .-...-...-..
	...
      2c:	b1 2d 00 00 00 00 00 00 00 00 00 00 b1 2d 00 00     .-...........-..
      3c:	b1 2d 00 00 b1 2d 00 00 b1 2d 00 00 b1 2d 00 00     .-...-...-...-..
      4c:	b1 2d 00 00 a9 0c 00 00 b1 2d 00 00 b1 2d 00 00     .-.......-...-..
      5c:	f1 25 00 00 b1 2d 00 00 b1 2d 00 00 b1 2d 00 00     .%...-...-...-..
      6c:	b1 2d 00 00 b1 2d 00 00 b1 2d 00 00 b1 2d 00 00     .-...-...-...-..
      7c:	b1 2d 00 00 b1 2d 00 00 b1 2d 00 00 b1 2d 00 00     .-...-...-...-..
      8c:	b1 2d 00 00 b1 2d 00 00 b1 2d 00 00 b1 2d 00 00     .-...-...-...-..
      9c:	b1 2d 00 00 b1 2d 00 00 b1 2d 00 00 b1 2d 00 00     .-...-...-...-..
      ac:	b1 2d 00 00 00 00 00 00                             .-......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000e0 	.word	0x200000e0
      d4:	00000000 	.word	0x00000000
      d8:	00003294 	.word	0x00003294

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000e4 	.word	0x200000e4
     108:	00003294 	.word	0x00003294
     10c:	00003294 	.word	0x00003294
     110:	00000000 	.word	0x00000000

00000114 <main_vendor_iso_in_received>:
#endif

#if UDI_VENDOR_EPS_SIZE_ISO_FS
void main_vendor_iso_in_received(udd_ep_status_t status,
		iram_size_t nb_transfered, udd_ep_id_t ep)
{
     114:	b510      	push	{r4, lr}
	UNUSED(status);
	UNUSED(nb_transfered);
	UNUSED(ep);
	ui_loop_back_state(false);
     116:	2000      	movs	r0, #0
     118:	f000 f978 	bl	40c <ui_loop_back_state>
}
     11c:	bd10      	pop	{r4, pc}
	...

00000120 <main_vendor_int_in_received>:
{
     120:	b510      	push	{r4, lr}
	if (UDD_EP_TRANSFER_OK != status) {
     122:	2800      	cmp	r0, #0
     124:	d000      	beq.n	128 <main_vendor_int_in_received+0x8>
}
     126:	bd10      	pop	{r4, pc}
	ui_loop_back_state(false);
     128:	f000 f970 	bl	40c <ui_loop_back_state>
	udi_vendor_interrupt_out_run(
     12c:	4a03      	ldr	r2, [pc, #12]	; (13c <main_vendor_int_in_received+0x1c>)
     12e:	2180      	movs	r1, #128	; 0x80
     130:	00c9      	lsls	r1, r1, #3
     132:	4803      	ldr	r0, [pc, #12]	; (140 <main_vendor_int_in_received+0x20>)
     134:	f000 f9e7 	bl	506 <udi_vendor_interrupt_out_run>
     138:	e7f5      	b.n	126 <main_vendor_int_in_received+0x6>
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	00000145 	.word	0x00000145
     140:	20000100 	.word	0x20000100

00000144 <main_vendor_int_out_received>:
{
     144:	b510      	push	{r4, lr}
     146:	000c      	movs	r4, r1
	if (UDD_EP_TRANSFER_OK != status) {
     148:	2800      	cmp	r0, #0
     14a:	d000      	beq.n	14e <main_vendor_int_out_received+0xa>
}
     14c:	bd10      	pop	{r4, pc}
	ui_loop_back_state(true);
     14e:	3001      	adds	r0, #1
     150:	f000 f95c 	bl	40c <ui_loop_back_state>
	udi_vendor_interrupt_in_run(
     154:	4a02      	ldr	r2, [pc, #8]	; (160 <main_vendor_int_out_received+0x1c>)
     156:	0021      	movs	r1, r4
     158:	4802      	ldr	r0, [pc, #8]	; (164 <main_vendor_int_out_received+0x20>)
     15a:	f000 f9c9 	bl	4f0 <udi_vendor_interrupt_in_run>
     15e:	e7f5      	b.n	14c <main_vendor_int_out_received+0x8>
     160:	00000121 	.word	0x00000121
     164:	20000100 	.word	0x20000100

00000168 <main_vendor_bulk_in_received>:
{
     168:	b510      	push	{r4, lr}
	if (UDD_EP_TRANSFER_OK != status) {
     16a:	2800      	cmp	r0, #0
     16c:	d000      	beq.n	170 <main_vendor_bulk_in_received+0x8>
}
     16e:	bd10      	pop	{r4, pc}
	ui_loop_back_state(false);
     170:	f000 f94c 	bl	40c <ui_loop_back_state>
	udi_vendor_bulk_out_run(
     174:	4a03      	ldr	r2, [pc, #12]	; (184 <main_vendor_bulk_in_received+0x1c>)
     176:	2180      	movs	r1, #128	; 0x80
     178:	00c9      	lsls	r1, r1, #3
     17a:	4803      	ldr	r0, [pc, #12]	; (188 <main_vendor_bulk_in_received+0x20>)
     17c:	f000 f9d9 	bl	532 <udi_vendor_bulk_out_run>
     180:	e7f5      	b.n	16e <main_vendor_bulk_in_received+0x6>
     182:	46c0      	nop			; (mov r8, r8)
     184:	0000018d 	.word	0x0000018d
     188:	20000100 	.word	0x20000100

0000018c <main_vendor_bulk_out_received>:
{
     18c:	b510      	push	{r4, lr}
     18e:	000c      	movs	r4, r1
	if (UDD_EP_TRANSFER_OK != status) {
     190:	2800      	cmp	r0, #0
     192:	d000      	beq.n	196 <main_vendor_bulk_out_received+0xa>
}
     194:	bd10      	pop	{r4, pc}
	ui_loop_back_state(true);
     196:	3001      	adds	r0, #1
     198:	f000 f938 	bl	40c <ui_loop_back_state>
	udi_vendor_bulk_in_run(
     19c:	4a02      	ldr	r2, [pc, #8]	; (1a8 <main_vendor_bulk_out_received+0x1c>)
     19e:	0021      	movs	r1, r4
     1a0:	4802      	ldr	r0, [pc, #8]	; (1ac <main_vendor_bulk_out_received+0x20>)
     1a2:	f000 f9bb 	bl	51c <udi_vendor_bulk_in_run>
     1a6:	e7f5      	b.n	194 <main_vendor_bulk_out_received+0x8>
     1a8:	00000169 	.word	0x00000169
     1ac:	20000100 	.word	0x20000100

000001b0 <main_vendor_iso_out_received>:

void main_vendor_iso_out_received(udd_ep_status_t status,
		iram_size_t nb_transfered, udd_ep_id_t ep)
{
     1b0:	b510      	push	{r4, lr}
     1b2:	000c      	movs	r4, r1
	uint8_t *buf_ptr;
	UNUSED(ep);

	if (UDD_EP_TRANSFER_OK != status) {
     1b4:	2800      	cmp	r0, #0
     1b6:	d114      	bne.n	1e2 <main_vendor_iso_out_received+0x32>
		return; // Transfer aborted, then stop loopback
	}

	if (nb_transfered) {
     1b8:	2900      	cmp	r1, #0
     1ba:	d113      	bne.n	1e4 <main_vendor_iso_out_received+0x34>
				nb_transfered,
				main_vendor_iso_in_received);
	}

	// Switch of buffer
	main_buf_iso_sel = main_buf_iso_sel? 0:1;
     1bc:	4b10      	ldr	r3, [pc, #64]	; (200 <main_vendor_iso_out_received+0x50>)
     1be:	7818      	ldrb	r0, [r3, #0]
     1c0:	4242      	negs	r2, r0
     1c2:	4150      	adcs	r0, r2
     1c4:	b2c0      	uxtb	r0, r0
     1c6:	7018      	strb	r0, [r3, #0]
	// When using buffer size larger than endpoint size,
	// the requested transfer is stopped when the buffer is = full*.
	// *on USBC and XMEGA USB driver, the buffer is full
	// when "number of data transfered" > "buffer size" - "endpoint size".
	buf_ptr = &main_buf_loopback[ main_buf_iso_sel
			*(sizeof(main_buf_loopback)/2) ];
     1c8:	0240      	lsls	r0, r0, #9
	buf_ptr = &main_buf_loopback[ main_buf_iso_sel
     1ca:	4c0e      	ldr	r4, [pc, #56]	; (204 <main_vendor_iso_out_received+0x54>)
     1cc:	1824      	adds	r4, r4, r0

	// Send on IN endpoint the data received on endpoint OUT
	udi_vendor_iso_out_run(
			buf_ptr,
			udd_is_high_speed()?
     1ce:	f001 fba3 	bl	1918 <udd_is_high_speed>
	udi_vendor_iso_out_run(
     1d2:	2140      	movs	r1, #64	; 0x40
     1d4:	2800      	cmp	r0, #0
     1d6:	d100      	bne.n	1da <main_vendor_iso_out_received+0x2a>
     1d8:	31c0      	adds	r1, #192	; 0xc0
     1da:	4a0b      	ldr	r2, [pc, #44]	; (208 <main_vendor_iso_out_received+0x58>)
     1dc:	0020      	movs	r0, r4
     1de:	f000 f9be 	bl	55e <udi_vendor_iso_out_run>
				UDI_VENDOR_EPS_SIZE_ISO_HS:UDI_VENDOR_EPS_SIZE_ISO_FS,
			main_vendor_iso_out_received);
}
     1e2:	bd10      	pop	{r4, pc}
		ui_loop_back_state(true);
     1e4:	3001      	adds	r0, #1
     1e6:	f000 f911 	bl	40c <ui_loop_back_state>
				*(sizeof(main_buf_loopback)/2) ];
     1ea:	4b05      	ldr	r3, [pc, #20]	; (200 <main_vendor_iso_out_received+0x50>)
     1ec:	781b      	ldrb	r3, [r3, #0]
     1ee:	025b      	lsls	r3, r3, #9
		buf_ptr = &main_buf_loopback[ main_buf_iso_sel
     1f0:	4804      	ldr	r0, [pc, #16]	; (204 <main_vendor_iso_out_received+0x54>)
     1f2:	18c0      	adds	r0, r0, r3
		udi_vendor_iso_in_run(
     1f4:	4a05      	ldr	r2, [pc, #20]	; (20c <main_vendor_iso_out_received+0x5c>)
     1f6:	0021      	movs	r1, r4
     1f8:	f000 f9a6 	bl	548 <udi_vendor_iso_in_run>
     1fc:	e7de      	b.n	1bc <main_vendor_iso_out_received+0xc>
     1fe:	46c0      	nop			; (mov r8, r8)
     200:	200000fd 	.word	0x200000fd
     204:	20000100 	.word	0x20000100
     208:	000001b1 	.word	0x000001b1
     20c:	00000115 	.word	0x00000115

00000210 <main>:
{
     210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     212:	46de      	mov	lr, fp
     214:	4657      	mov	r7, sl
     216:	464e      	mov	r6, r9
     218:	4645      	mov	r5, r8
     21a:	b5e0      	push	{r5, r6, r7, lr}
	cpu_irq_enable();
     21c:	2101      	movs	r1, #1
     21e:	4b33      	ldr	r3, [pc, #204]	; (2ec <main+0xdc>)
     220:	7019      	strb	r1, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     222:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     226:	b662      	cpsie	i
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
     228:	4b31      	ldr	r3, [pc, #196]	; (2f0 <main+0xe0>)
     22a:	2200      	movs	r2, #0
     22c:	701a      	strb	r2, [r3, #0]
     22e:	705a      	strb	r2, [r3, #1]
     230:	709a      	strb	r2, [r3, #2]
     232:	70da      	strb	r2, [r3, #3]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
     234:	7119      	strb	r1, [r3, #4]
	system_init();
     236:	f001 f852 	bl	12de <system_init>
	ui_init();
     23a:	f000 f8cf 	bl	3dc <ui_init>
	udc_start();
     23e:	f000 fa59 	bl	6f4 <udc_start>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
     242:	4f2a      	ldr	r7, [pc, #168]	; (2ec <main+0xdc>)
     244:	2400      	movs	r4, #0
     246:	1c26      	adds	r6, r4, #0
	while (!(*lock_ptr)) {
     248:	4d29      	ldr	r5, [pc, #164]	; (2f0 <main+0xe0>)

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
		cpu_irq_enable();
     24a:	46b8      	mov	r8, r7
     24c:	2301      	movs	r3, #1
     24e:	469c      	mov	ip, r3

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
     250:	46bb      	mov	fp, r7
{

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
     252:	4b28      	ldr	r3, [pc, #160]	; (2f4 <main+0xe4>)
     254:	469a      	mov	sl, r3

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
     256:	230f      	movs	r3, #15
     258:	4699      	mov	r9, r3
     25a:	e00e      	b.n	27a <main+0x6a>
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
     25c:	0019      	movs	r1, r3
		lock_ptr++;
     25e:	3201      	adds	r2, #1
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
     260:	1c4b      	adds	r3, r1, #1
     262:	b2db      	uxtb	r3, r3
	while (!(*lock_ptr)) {
     264:	7810      	ldrb	r0, [r2, #0]
     266:	2800      	cmp	r0, #0
     268:	d0f8      	beq.n	25c <main+0x4c>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
     26a:	2b00      	cmp	r3, #0
     26c:	d10f      	bne.n	28e <main+0x7e>
		cpu_irq_enable();
     26e:	4643      	mov	r3, r8
     270:	4662      	mov	r2, ip
     272:	701a      	strb	r2, [r3, #0]
     274:	f3bf 8f5f 	dmb	sy
     278:	b662      	cpsie	i
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     27a:	b672      	cpsid	i
     27c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     280:	703e      	strb	r6, [r7, #0]
	while (!(*lock_ptr)) {
     282:	782b      	ldrb	r3, [r5, #0]
     284:	2b00      	cmp	r3, #0
     286:	d1f2      	bne.n	26e <main+0x5e>
     288:	0021      	movs	r1, r4
     28a:	4a19      	ldr	r2, [pc, #100]	; (2f0 <main+0xe0>)
     28c:	e7e7      	b.n	25e <main+0x4e>
     28e:	b672      	cpsid	i
     290:	f3bf 8f5f 	dmb	sy
     294:	465b      	mov	r3, fp
     296:	701c      	strb	r4, [r3, #0]
	uint32_t rev = DSU->DID.reg;
     298:	4653      	mov	r3, sl
     29a:	699b      	ldr	r3, [r3, #24]
     29c:	0a1b      	lsrs	r3, r3, #8
	rev = rev >> DSU_DID_REVISION_Pos;
     29e:	464a      	mov	r2, r9
     2a0:	4013      	ands	r3, r2
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
     2a2:	2b02      	cmp	r3, #2
     2a4:	d805      	bhi.n	2b2 <main+0xa2>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
     2a6:	4a14      	ldr	r2, [pc, #80]	; (2f8 <main+0xe8>)
     2a8:	6850      	ldr	r0, [r2, #4]
     2aa:	23c0      	movs	r3, #192	; 0xc0
     2ac:	009b      	lsls	r3, r3, #2
     2ae:	4303      	orrs	r3, r0
     2b0:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
     2b2:	2902      	cmp	r1, #2
     2b4:	d90b      	bls.n	2ce <main+0xbe>
     2b6:	2903      	cmp	r1, #3
     2b8:	d011      	beq.n	2de <main+0xce>

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
	cpu_irq_enable();
     2ba:	4b0c      	ldr	r3, [pc, #48]	; (2ec <main+0xdc>)
     2bc:	4662      	mov	r2, ip
     2be:	701a      	strb	r2, [r3, #0]
     2c0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     2c4:	b662      	cpsie	i
  __ASM volatile ("dsb");
     2c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
     2ca:	bf30      	wfi
     2cc:	e7d5      	b.n	27a <main+0x6a>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
     2ce:	4a0b      	ldr	r2, [pc, #44]	; (2fc <main+0xec>)
     2d0:	6913      	ldr	r3, [r2, #16]
     2d2:	2004      	movs	r0, #4
     2d4:	4383      	bics	r3, r0
     2d6:	6113      	str	r3, [r2, #16]
			PM->SLEEP.reg = sleep_mode;
     2d8:	4b09      	ldr	r3, [pc, #36]	; (300 <main+0xf0>)
     2da:	7059      	strb	r1, [r3, #1]
     2dc:	e7ed      	b.n	2ba <main+0xaa>
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
     2de:	4a07      	ldr	r2, [pc, #28]	; (2fc <main+0xec>)
     2e0:	6913      	ldr	r3, [r2, #16]
     2e2:	2104      	movs	r1, #4
     2e4:	430b      	orrs	r3, r1
     2e6:	6113      	str	r3, [r2, #16]
     2e8:	e7e7      	b.n	2ba <main+0xaa>
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	200000dd 	.word	0x200000dd
     2f0:	20000650 	.word	0x20000650
     2f4:	41002000 	.word	0x41002000
     2f8:	41004000 	.word	0x41004000
     2fc:	e000ed00 	.word	0xe000ed00
     300:	40000400 	.word	0x40000400

00000304 <main_suspend_action>:
{
     304:	b510      	push	{r4, lr}
	ui_powerdown();
     306:	f000 f871 	bl	3ec <ui_powerdown>
}
     30a:	bd10      	pop	{r4, pc}

0000030c <main_resume_action>:
{
     30c:	b510      	push	{r4, lr}
	ui_wakeup();
     30e:	f000 f875 	bl	3fc <ui_wakeup>
}
     312:	bd10      	pop	{r4, pc}

00000314 <main_sof_action>:
{
     314:	b510      	push	{r4, lr}
	if (!main_b_vendor_enable)
     316:	4b05      	ldr	r3, [pc, #20]	; (32c <main_sof_action+0x18>)
     318:	781b      	ldrb	r3, [r3, #0]
     31a:	2b00      	cmp	r3, #0
     31c:	d100      	bne.n	320 <main_sof_action+0xc>
}
     31e:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
     320:	f001 fafc 	bl	191c <udd_get_frame_number>
     324:	f000 f878 	bl	418 <ui_process>
     328:	e7f9      	b.n	31e <main_sof_action+0xa>
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	200000fc 	.word	0x200000fc

00000330 <main_vendor_enable>:
{
     330:	b510      	push	{r4, lr}
	main_b_vendor_enable = true;
     332:	2201      	movs	r2, #1
     334:	4b0a      	ldr	r3, [pc, #40]	; (360 <main_vendor_enable+0x30>)
     336:	701a      	strb	r2, [r3, #0]
	main_vendor_int_in_received(UDD_EP_TRANSFER_OK, 0, 0);
     338:	2200      	movs	r2, #0
     33a:	2100      	movs	r1, #0
     33c:	2000      	movs	r0, #0
     33e:	f7ff feef 	bl	120 <main_vendor_int_in_received>
	main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
     342:	2200      	movs	r2, #0
     344:	2100      	movs	r1, #0
     346:	2000      	movs	r0, #0
     348:	f7ff ff0e 	bl	168 <main_vendor_bulk_in_received>
	main_buf_iso_sel=0;
     34c:	2200      	movs	r2, #0
     34e:	4b05      	ldr	r3, [pc, #20]	; (364 <main_vendor_enable+0x34>)
     350:	701a      	strb	r2, [r3, #0]
	main_vendor_iso_out_received(UDD_EP_TRANSFER_OK, 0, 0);
     352:	2100      	movs	r1, #0
     354:	2000      	movs	r0, #0
     356:	f7ff ff2b 	bl	1b0 <main_vendor_iso_out_received>
}
     35a:	2001      	movs	r0, #1
     35c:	bd10      	pop	{r4, pc}
     35e:	46c0      	nop			; (mov r8, r8)
     360:	200000fc 	.word	0x200000fc
     364:	200000fd 	.word	0x200000fd

00000368 <main_vendor_disable>:
	main_b_vendor_enable = false;
     368:	2200      	movs	r2, #0
     36a:	4b01      	ldr	r3, [pc, #4]	; (370 <main_vendor_disable+0x8>)
     36c:	701a      	strb	r2, [r3, #0]
}
     36e:	4770      	bx	lr
     370:	200000fc 	.word	0x200000fc

00000374 <main_setup_out_received>:
{
     374:	b510      	push	{r4, lr}
	ui_loop_back_state(true);
     376:	2001      	movs	r0, #1
     378:	f000 f848 	bl	40c <ui_loop_back_state>
	udd_g_ctrlreq.payload = main_buf_loopback;
     37c:	4a07      	ldr	r2, [pc, #28]	; (39c <main_setup_out_received+0x28>)
     37e:	4b08      	ldr	r3, [pc, #32]	; (3a0 <main_setup_out_received+0x2c>)
     380:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = min(
     382:	88d3      	ldrh	r3, [r2, #6]
     384:	1c19      	adds	r1, r3, #0
     386:	2080      	movs	r0, #128	; 0x80
     388:	00c0      	lsls	r0, r0, #3
     38a:	b29b      	uxth	r3, r3
     38c:	4283      	cmp	r3, r0
     38e:	d901      	bls.n	394 <main_setup_out_received+0x20>
     390:	4b04      	ldr	r3, [pc, #16]	; (3a4 <main_setup_out_received+0x30>)
     392:	8819      	ldrh	r1, [r3, #0]
     394:	8191      	strh	r1, [r2, #12]
}
     396:	2001      	movs	r0, #1
     398:	bd10      	pop	{r4, pc}
     39a:	46c0      	nop			; (mov r8, r8)
     39c:	20000980 	.word	0x20000980
     3a0:	20000100 	.word	0x20000100
     3a4:	00003226 	.word	0x00003226

000003a8 <main_setup_in_received>:
{
     3a8:	b510      	push	{r4, lr}
	ui_loop_back_state(false);
     3aa:	2000      	movs	r0, #0
     3ac:	f000 f82e 	bl	40c <ui_loop_back_state>
	udd_g_ctrlreq.payload = main_buf_loopback;
     3b0:	4a07      	ldr	r2, [pc, #28]	; (3d0 <main_setup_in_received+0x28>)
     3b2:	4b08      	ldr	r3, [pc, #32]	; (3d4 <main_setup_in_received+0x2c>)
     3b4:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size =
     3b6:	88d3      	ldrh	r3, [r2, #6]
     3b8:	1c19      	adds	r1, r3, #0
     3ba:	2080      	movs	r0, #128	; 0x80
     3bc:	00c0      	lsls	r0, r0, #3
     3be:	b29b      	uxth	r3, r3
     3c0:	4283      	cmp	r3, r0
     3c2:	d901      	bls.n	3c8 <main_setup_in_received+0x20>
     3c4:	4b04      	ldr	r3, [pc, #16]	; (3d8 <main_setup_in_received+0x30>)
     3c6:	8819      	ldrh	r1, [r3, #0]
     3c8:	8191      	strh	r1, [r2, #12]
}
     3ca:	2001      	movs	r0, #1
     3cc:	bd10      	pop	{r4, pc}
     3ce:	46c0      	nop			; (mov r8, r8)
     3d0:	20000980 	.word	0x20000980
     3d4:	20000100 	.word	0x20000100
     3d8:	00003226 	.word	0x00003226

000003dc <ui_init>:

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     3dc:	2280      	movs	r2, #128	; 0x80
     3de:	05d2      	lsls	r2, r2, #23
     3e0:	4b01      	ldr	r3, [pc, #4]	; (3e8 <ui_init+0xc>)
     3e2:	615a      	str	r2, [r3, #20]

void ui_init(void)
{
	// Initialize LEDs
	LED_On(LED_0_PIN);
}
     3e4:	4770      	bx	lr
     3e6:	46c0      	nop			; (mov r8, r8)
     3e8:	41004480 	.word	0x41004480

000003ec <ui_powerdown>:
		port_base->OUTSET.reg = pin_mask;
     3ec:	2280      	movs	r2, #128	; 0x80
     3ee:	05d2      	lsls	r2, r2, #23
     3f0:	4b01      	ldr	r3, [pc, #4]	; (3f8 <ui_powerdown+0xc>)
     3f2:	619a      	str	r2, [r3, #24]

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
     3f4:	4770      	bx	lr
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	41004480 	.word	0x41004480

000003fc <ui_wakeup>:
		port_base->OUTCLR.reg = pin_mask;
     3fc:	2280      	movs	r2, #128	; 0x80
     3fe:	05d2      	lsls	r2, r2, #23
     400:	4b01      	ldr	r3, [pc, #4]	; (408 <ui_wakeup+0xc>)
     402:	615a      	str	r2, [r3, #20]

void ui_wakeup(void)
{
	LED_On(LED_0_PIN);
}
     404:	4770      	bx	lr
     406:	46c0      	nop			; (mov r8, r8)
     408:	41004480 	.word	0x41004480

0000040c <ui_loop_back_state>:

void ui_loop_back_state(bool b_started)
{
	ui_b_loopback = b_started;
     40c:	4b01      	ldr	r3, [pc, #4]	; (414 <ui_loop_back_state+0x8>)
     40e:	7018      	strb	r0, [r3, #0]
}
     410:	4770      	bx	lr
     412:	46c0      	nop			; (mov r8, r8)
     414:	20000000 	.word	0x20000000

00000418 <ui_process>:

void ui_process(uint16_t framenumber)
{
     418:	b510      	push	{r4, lr}
	if (ui_b_loopback) {
     41a:	4b0f      	ldr	r3, [pc, #60]	; (458 <ui_process+0x40>)
     41c:	781b      	ldrb	r3, [r3, #0]
     41e:	2b00      	cmp	r3, #0
     420:	d10b      	bne.n	43a <ui_process+0x22>
		LED_On(LED_0_PIN);
		return;
	}

	if ((framenumber % 1000) == 0) {
     422:	21fa      	movs	r1, #250	; 0xfa
     424:	0089      	lsls	r1, r1, #2
     426:	f002 fdb9 	bl	2f9c <__aeabi_uidivmod>
     42a:	b289      	uxth	r1, r1
     42c:	2900      	cmp	r1, #0
     42e:	d109      	bne.n	444 <ui_process+0x2c>
     430:	2280      	movs	r2, #128	; 0x80
     432:	05d2      	lsls	r2, r2, #23
     434:	4b09      	ldr	r3, [pc, #36]	; (45c <ui_process+0x44>)
     436:	615a      	str	r2, [r3, #20]
     438:	e003      	b.n	442 <ui_process+0x2a>
     43a:	2280      	movs	r2, #128	; 0x80
     43c:	05d2      	lsls	r2, r2, #23
     43e:	4b07      	ldr	r3, [pc, #28]	; (45c <ui_process+0x44>)
     440:	615a      	str	r2, [r3, #20]
		LED_On(LED_0_PIN);
	}
	if ((framenumber % 1000) == 500) {
		LED_Off(LED_0_PIN);
	}
}
     442:	bd10      	pop	{r4, pc}
	if ((framenumber % 1000) == 500) {
     444:	23fa      	movs	r3, #250	; 0xfa
     446:	005b      	lsls	r3, r3, #1
     448:	4299      	cmp	r1, r3
     44a:	d1fa      	bne.n	442 <ui_process+0x2a>
		port_base->OUTSET.reg = pin_mask;
     44c:	2280      	movs	r2, #128	; 0x80
     44e:	05d2      	lsls	r2, r2, #23
     450:	4b02      	ldr	r3, [pc, #8]	; (45c <ui_process+0x44>)
     452:	619a      	str	r2, [r3, #24]
     454:	e7f5      	b.n	442 <ui_process+0x2a>
     456:	46c0      	nop			; (mov r8, r8)
     458:	20000000 	.word	0x20000000
     45c:	41004480 	.word	0x41004480

00000460 <udi_vendor_getsetting>:
	return false; // Not supported request
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
     460:	4b01      	ldr	r3, [pc, #4]	; (468 <udi_vendor_getsetting+0x8>)
     462:	7818      	ldrb	r0, [r3, #0]
}
     464:	4770      	bx	lr
     466:	46c0      	nop			; (mov r8, r8)
     468:	20000500 	.word	0x20000500

0000046c <udi_vendor_enable>:
{
     46c:	b510      	push	{r4, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
     46e:	f000 f93b 	bl	6e8 <udc_get_interface_desc>
     472:	78c3      	ldrb	r3, [r0, #3]
     474:	4a04      	ldr	r2, [pc, #16]	; (488 <udi_vendor_enable+0x1c>)
     476:	7013      	strb	r3, [r2, #0]
	return true;
     478:	2001      	movs	r0, #1
	if (1 == udi_vendor_alternate_setting) {
     47a:	2b01      	cmp	r3, #1
     47c:	d000      	beq.n	480 <udi_vendor_enable+0x14>
}
     47e:	bd10      	pop	{r4, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
     480:	f7ff ff56 	bl	330 <main_vendor_enable>
     484:	e7fb      	b.n	47e <udi_vendor_enable+0x12>
     486:	46c0      	nop			; (mov r8, r8)
     488:	20000500 	.word	0x20000500

0000048c <udi_vendor_disable>:
{
     48c:	b510      	push	{r4, lr}
	if (1 == udi_vendor_alternate_setting) {
     48e:	4b04      	ldr	r3, [pc, #16]	; (4a0 <udi_vendor_disable+0x14>)
     490:	781b      	ldrb	r3, [r3, #0]
     492:	2b01      	cmp	r3, #1
     494:	d000      	beq.n	498 <udi_vendor_disable+0xc>
}
     496:	bd10      	pop	{r4, pc}
		UDI_VENDOR_DISABLE_EXT();
     498:	f7ff ff66 	bl	368 <main_vendor_disable>
}
     49c:	e7fb      	b.n	496 <udi_vendor_disable+0xa>
     49e:	46c0      	nop			; (mov r8, r8)
     4a0:	20000500 	.word	0x20000500

000004a4 <udi_vendor_setup>:
{
     4a4:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
     4a6:	4b11      	ldr	r3, [pc, #68]	; (4ec <udi_vendor_setup+0x48>)
     4a8:	781a      	ldrb	r2, [r3, #0]
     4aa:	b253      	sxtb	r3, r2
     4ac:	2b00      	cmp	r3, #0
     4ae:	db05      	blt.n	4bc <udi_vendor_setup+0x18>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
     4b0:	2360      	movs	r3, #96	; 0x60
     4b2:	4013      	ands	r3, r2
	return false; // Not supported request
     4b4:	2000      	movs	r0, #0
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
     4b6:	2b40      	cmp	r3, #64	; 0x40
     4b8:	d00c      	beq.n	4d4 <udi_vendor_setup+0x30>
}
     4ba:	bd10      	pop	{r4, pc}
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
     4bc:	2360      	movs	r3, #96	; 0x60
     4be:	4013      	ands	r3, r2
	return false; // Not supported request
     4c0:	2000      	movs	r0, #0
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
     4c2:	2b40      	cmp	r3, #64	; 0x40
     4c4:	d1f9      	bne.n	4ba <udi_vendor_setup+0x16>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
     4c6:	4b09      	ldr	r3, [pc, #36]	; (4ec <udi_vendor_setup+0x48>)
     4c8:	785b      	ldrb	r3, [r3, #1]
     4ca:	2b00      	cmp	r3, #0
     4cc:	d1f5      	bne.n	4ba <udi_vendor_setup+0x16>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
     4ce:	f7ff ff6b 	bl	3a8 <main_setup_in_received>
     4d2:	e7f2      	b.n	4ba <udi_vendor_setup+0x16>
				&& (udd_g_ctrlreq.req.bRequest == 0)
     4d4:	4b05      	ldr	r3, [pc, #20]	; (4ec <udi_vendor_setup+0x48>)
     4d6:	785b      	ldrb	r3, [r3, #1]
     4d8:	2b00      	cmp	r3, #0
     4da:	d1ee      	bne.n	4ba <udi_vendor_setup+0x16>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
     4dc:	4b03      	ldr	r3, [pc, #12]	; (4ec <udi_vendor_setup+0x48>)
     4de:	88db      	ldrh	r3, [r3, #6]
     4e0:	2b00      	cmp	r3, #0
     4e2:	d0ea      	beq.n	4ba <udi_vendor_setup+0x16>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
     4e4:	f7ff ff46 	bl	374 <main_setup_out_received>
     4e8:	e7e7      	b.n	4ba <udi_vendor_setup+0x16>
     4ea:	46c0      	nop			; (mov r8, r8)
     4ec:	20000980 	.word	0x20000980

000004f0 <udi_vendor_interrupt_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_interrupt_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
     4f0:	b500      	push	{lr}
     4f2:	b083      	sub	sp, #12
     4f4:	000b      	movs	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_INTERRUPT_IN,
     4f6:	9200      	str	r2, [sp, #0]
     4f8:	0002      	movs	r2, r0
     4fa:	2100      	movs	r1, #0
     4fc:	2081      	movs	r0, #129	; 0x81
     4fe:	f001 fb63 	bl	1bc8 <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
     502:	b003      	add	sp, #12
     504:	bd00      	pop	{pc}

00000506 <udi_vendor_interrupt_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_interrupt_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
     506:	b500      	push	{lr}
     508:	b083      	sub	sp, #12
     50a:	000b      	movs	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_INTERRUPT_OUT,
     50c:	9200      	str	r2, [sp, #0]
     50e:	0002      	movs	r2, r0
     510:	2100      	movs	r1, #0
     512:	2002      	movs	r0, #2
     514:	f001 fb58 	bl	1bc8 <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
     518:	b003      	add	sp, #12
     51a:	bd00      	pop	{pc}

0000051c <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
     51c:	b500      	push	{lr}
     51e:	b083      	sub	sp, #12
     520:	000b      	movs	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
     522:	9200      	str	r2, [sp, #0]
     524:	0002      	movs	r2, r0
     526:	2100      	movs	r1, #0
     528:	2083      	movs	r0, #131	; 0x83
     52a:	f001 fb4d 	bl	1bc8 <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
     52e:	b003      	add	sp, #12
     530:	bd00      	pop	{pc}

00000532 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
     532:	b500      	push	{lr}
     534:	b083      	sub	sp, #12
     536:	000b      	movs	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
     538:	9200      	str	r2, [sp, #0]
     53a:	0002      	movs	r2, r0
     53c:	2100      	movs	r1, #0
     53e:	2004      	movs	r0, #4
     540:	f001 fb42 	bl	1bc8 <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
     544:	b003      	add	sp, #12
     546:	bd00      	pop	{pc}

00000548 <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
     548:	b500      	push	{lr}
     54a:	b083      	sub	sp, #12
     54c:	000b      	movs	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
     54e:	9200      	str	r2, [sp, #0]
     550:	0002      	movs	r2, r0
     552:	2100      	movs	r1, #0
     554:	2085      	movs	r0, #133	; 0x85
     556:	f001 fb37 	bl	1bc8 <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
     55a:	b003      	add	sp, #12
     55c:	bd00      	pop	{pc}

0000055e <udi_vendor_iso_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
     55e:	b500      	push	{lr}
     560:	b083      	sub	sp, #12
     562:	000b      	movs	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_ISO_OUT,
     564:	9200      	str	r2, [sp, #0]
     566:	0002      	movs	r2, r0
     568:	2100      	movs	r1, #0
     56a:	2006      	movs	r0, #6
     56c:	f001 fb2c 	bl	1bc8 <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
     570:	b003      	add	sp, #12
     572:	bd00      	pop	{pc}

00000574 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     574:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
     576:	4b11      	ldr	r3, [pc, #68]	; (5bc <udc_next_desc_in_iface+0x48>)
     578:	681b      	ldr	r3, [r3, #0]
     57a:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     57c:	7894      	ldrb	r4, [r2, #2]
     57e:	78d3      	ldrb	r3, [r2, #3]
     580:	021b      	lsls	r3, r3, #8
     582:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     584:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
     586:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     588:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     58a:	4290      	cmp	r0, r2
     58c:	d210      	bcs.n	5b0 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     58e:	7843      	ldrb	r3, [r0, #1]
     590:	2b04      	cmp	r3, #4
     592:	d00f      	beq.n	5b4 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     594:	428b      	cmp	r3, r1
     596:	d00a      	beq.n	5ae <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
     598:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     59a:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
     59c:	4290      	cmp	r0, r2
     59e:	d205      	bcs.n	5ac <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     5a0:	7843      	ldrb	r3, [r0, #1]
     5a2:	2b04      	cmp	r3, #4
     5a4:	d008      	beq.n	5b8 <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
     5a6:	428b      	cmp	r3, r1
     5a8:	d1f6      	bne.n	598 <udc_next_desc_in_iface+0x24>
     5aa:	e000      	b.n	5ae <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
     5ac:	2000      	movs	r0, #0
}
     5ae:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
     5b0:	2000      	movs	r0, #0
     5b2:	e7fc      	b.n	5ae <udc_next_desc_in_iface+0x3a>
     5b4:	2000      	movs	r0, #0
     5b6:	e7fa      	b.n	5ae <udc_next_desc_in_iface+0x3a>
     5b8:	2000      	movs	r0, #0
     5ba:	e7f8      	b.n	5ae <udc_next_desc_in_iface+0x3a>
     5bc:	20000510 	.word	0x20000510

000005c0 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
     5c0:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     5c2:	4b03      	ldr	r3, [pc, #12]	; (5d0 <udc_valid_address+0x10>)
     5c4:	885b      	ldrh	r3, [r3, #2]
     5c6:	207f      	movs	r0, #127	; 0x7f
     5c8:	4018      	ands	r0, r3
     5ca:	f001 fbdd 	bl	1d88 <udd_set_address>
}
     5ce:	bd10      	pop	{r4, pc}
     5d0:	20000980 	.word	0x20000980

000005d4 <udc_update_iface_desc>:
{
     5d4:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
     5d6:	4b19      	ldr	r3, [pc, #100]	; (63c <udc_update_iface_desc+0x68>)
     5d8:	781b      	ldrb	r3, [r3, #0]
		return false;
     5da:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
     5dc:	2b00      	cmp	r3, #0
     5de:	d029      	beq.n	634 <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     5e0:	4b17      	ldr	r3, [pc, #92]	; (640 <udc_update_iface_desc+0x6c>)
     5e2:	681b      	ldr	r3, [r3, #0]
     5e4:	681b      	ldr	r3, [r3, #0]
     5e6:	791c      	ldrb	r4, [r3, #4]
     5e8:	4284      	cmp	r4, r0
     5ea:	d923      	bls.n	634 <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     5ec:	4a15      	ldr	r2, [pc, #84]	; (644 <udc_update_iface_desc+0x70>)
     5ee:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     5f0:	789a      	ldrb	r2, [r3, #2]
     5f2:	78dc      	ldrb	r4, [r3, #3]
     5f4:	0224      	lsls	r4, r4, #8
     5f6:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     5f8:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
     5fa:	42a3      	cmp	r3, r4
     5fc:	d21c      	bcs.n	638 <udc_update_iface_desc+0x64>
     5fe:	2500      	movs	r5, #0
     600:	2601      	movs	r6, #1
     602:	e007      	b.n	614 <udc_update_iface_desc+0x40>
     604:	4a0f      	ldr	r2, [pc, #60]	; (644 <udc_update_iface_desc+0x70>)
     606:	6013      	str	r3, [r2, #0]
     608:	e00f      	b.n	62a <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
     60a:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     60c:	189b      	adds	r3, r3, r2
     60e:	0035      	movs	r5, r6
	while (ptr_end_desc >
     610:	42a3      	cmp	r3, r4
     612:	d20c      	bcs.n	62e <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     614:	785a      	ldrb	r2, [r3, #1]
     616:	2a04      	cmp	r2, #4
     618:	d1f7      	bne.n	60a <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     61a:	789a      	ldrb	r2, [r3, #2]
     61c:	4282      	cmp	r2, r0
     61e:	d1f4      	bne.n	60a <udc_update_iface_desc+0x36>
     620:	78da      	ldrb	r2, [r3, #3]
     622:	428a      	cmp	r2, r1
     624:	d1f1      	bne.n	60a <udc_update_iface_desc+0x36>
     626:	2d00      	cmp	r5, #0
     628:	d1ec      	bne.n	604 <udc_update_iface_desc+0x30>
				return true; // Interface found
     62a:	2201      	movs	r2, #1
     62c:	e002      	b.n	634 <udc_update_iface_desc+0x60>
     62e:	4a05      	ldr	r2, [pc, #20]	; (644 <udc_update_iface_desc+0x70>)
     630:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
     632:	2200      	movs	r2, #0
}
     634:	0010      	movs	r0, r2
     636:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
     638:	2200      	movs	r2, #0
     63a:	e7fb      	b.n	634 <udc_update_iface_desc+0x60>
     63c:	2000050c 	.word	0x2000050c
     640:	20000510 	.word	0x20000510
     644:	20000514 	.word	0x20000514

00000648 <udc_iface_disable>:
{
     648:	b570      	push	{r4, r5, r6, lr}
     64a:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
     64c:	2100      	movs	r1, #0
     64e:	f7ff ffc1 	bl	5d4 <udc_update_iface_desc>
     652:	1e05      	subs	r5, r0, #0
     654:	d101      	bne.n	65a <udc_iface_disable+0x12>
}
     656:	0028      	movs	r0, r5
     658:	bd70      	pop	{r4, r5, r6, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     65a:	4b0e      	ldr	r3, [pc, #56]	; (694 <udc_iface_disable+0x4c>)
     65c:	681b      	ldr	r3, [r3, #0]
     65e:	685b      	ldr	r3, [r3, #4]
     660:	00a2      	lsls	r2, r4, #2
     662:	58d6      	ldr	r6, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     664:	68f3      	ldr	r3, [r6, #12]
     666:	4798      	blx	r3
     668:	0001      	movs	r1, r0
     66a:	0020      	movs	r0, r4
     66c:	f7ff ffb2 	bl	5d4 <udc_update_iface_desc>
     670:	1e05      	subs	r5, r0, #0
     672:	d0f0      	beq.n	656 <udc_iface_disable+0xe>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     674:	4b08      	ldr	r3, [pc, #32]	; (698 <udc_iface_disable+0x50>)
     676:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     678:	2105      	movs	r1, #5
     67a:	0020      	movs	r0, r4
     67c:	f7ff ff7a 	bl	574 <udc_next_desc_in_iface>
     680:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
     682:	d003      	beq.n	68c <udc_iface_disable+0x44>
			udd_ep_free(ep_desc->bEndpointAddress);
     684:	7880      	ldrb	r0, [r0, #2]
     686:	f001 f951 	bl	192c <udd_ep_free>
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     68a:	e7f5      	b.n	678 <udc_iface_disable+0x30>
	udi_api->disable();
     68c:	6873      	ldr	r3, [r6, #4]
     68e:	4798      	blx	r3
	return true;
     690:	e7e1      	b.n	656 <udc_iface_disable+0xe>
     692:	46c0      	nop			; (mov r8, r8)
     694:	20000510 	.word	0x20000510
     698:	20000514 	.word	0x20000514

0000069c <udc_iface_enable>:
{
     69c:	b570      	push	{r4, r5, r6, lr}
     69e:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     6a0:	f7ff ff98 	bl	5d4 <udc_update_iface_desc>
     6a4:	2800      	cmp	r0, #0
     6a6:	d019      	beq.n	6dc <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     6a8:	4b0d      	ldr	r3, [pc, #52]	; (6e0 <udc_iface_enable+0x44>)
     6aa:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     6ac:	2105      	movs	r1, #5
     6ae:	0020      	movs	r0, r4
     6b0:	f7ff ff60 	bl	574 <udc_next_desc_in_iface>
     6b4:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
     6b6:	d00a      	beq.n	6ce <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     6b8:	7903      	ldrb	r3, [r0, #4]
     6ba:	7942      	ldrb	r2, [r0, #5]
     6bc:	0212      	lsls	r2, r2, #8
     6be:	431a      	orrs	r2, r3
     6c0:	78c1      	ldrb	r1, [r0, #3]
     6c2:	7880      	ldrb	r0, [r0, #2]
     6c4:	f001 f954 	bl	1970 <udd_ep_alloc>
     6c8:	2800      	cmp	r0, #0
     6ca:	d1ef      	bne.n	6ac <udc_iface_enable+0x10>
     6cc:	e006      	b.n	6dc <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     6ce:	4b05      	ldr	r3, [pc, #20]	; (6e4 <udc_iface_enable+0x48>)
     6d0:	681b      	ldr	r3, [r3, #0]
     6d2:	685b      	ldr	r3, [r3, #4]
     6d4:	00ad      	lsls	r5, r5, #2
     6d6:	58eb      	ldr	r3, [r5, r3]
     6d8:	681b      	ldr	r3, [r3, #0]
     6da:	4798      	blx	r3
}
     6dc:	bd70      	pop	{r4, r5, r6, pc}
     6de:	46c0      	nop			; (mov r8, r8)
     6e0:	20000514 	.word	0x20000514
     6e4:	20000510 	.word	0x20000510

000006e8 <udc_get_interface_desc>:
	return udc_ptr_iface;
     6e8:	4b01      	ldr	r3, [pc, #4]	; (6f0 <udc_get_interface_desc+0x8>)
     6ea:	6818      	ldr	r0, [r3, #0]
}
     6ec:	4770      	bx	lr
     6ee:	46c0      	nop			; (mov r8, r8)
     6f0:	20000514 	.word	0x20000514

000006f4 <udc_start>:
{
     6f4:	b510      	push	{r4, lr}
	udd_enable();
     6f6:	f001 fbc5 	bl	1e84 <udd_enable>
}
     6fa:	bd10      	pop	{r4, pc}

000006fc <udc_reset>:
{
     6fc:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     6fe:	4b0e      	ldr	r3, [pc, #56]	; (738 <udc_reset+0x3c>)
     700:	781b      	ldrb	r3, [r3, #0]
     702:	2b00      	cmp	r3, #0
     704:	d011      	beq.n	72a <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     706:	4b0d      	ldr	r3, [pc, #52]	; (73c <udc_reset+0x40>)
     708:	681b      	ldr	r3, [r3, #0]
     70a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     70c:	791b      	ldrb	r3, [r3, #4]
     70e:	2b00      	cmp	r3, #0
     710:	d00b      	beq.n	72a <udc_reset+0x2e>
     712:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     714:	4d09      	ldr	r5, [pc, #36]	; (73c <udc_reset+0x40>)
			udc_iface_disable(iface_num);
     716:	0020      	movs	r0, r4
     718:	f7ff ff96 	bl	648 <udc_iface_disable>
				iface_num++) {
     71c:	3401      	adds	r4, #1
     71e:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     720:	682b      	ldr	r3, [r5, #0]
     722:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     724:	791b      	ldrb	r3, [r3, #4]
     726:	42a3      	cmp	r3, r4
     728:	d8f5      	bhi.n	716 <udc_reset+0x1a>
	udc_num_configuration = 0;
     72a:	2200      	movs	r2, #0
     72c:	4b02      	ldr	r3, [pc, #8]	; (738 <udc_reset+0x3c>)
     72e:	701a      	strb	r2, [r3, #0]
	udc_device_status =
     730:	3201      	adds	r2, #1
     732:	4b03      	ldr	r3, [pc, #12]	; (740 <udc_reset+0x44>)
     734:	801a      	strh	r2, [r3, #0]
}
     736:	bd70      	pop	{r4, r5, r6, pc}
     738:	2000050c 	.word	0x2000050c
     73c:	20000510 	.word	0x20000510
     740:	20000502 	.word	0x20000502

00000744 <udc_sof_notify>:
{
     744:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     746:	4b0e      	ldr	r3, [pc, #56]	; (780 <udc_sof_notify+0x3c>)
     748:	781b      	ldrb	r3, [r3, #0]
     74a:	2b00      	cmp	r3, #0
     74c:	d017      	beq.n	77e <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     74e:	4b0d      	ldr	r3, [pc, #52]	; (784 <udc_sof_notify+0x40>)
     750:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     752:	681a      	ldr	r2, [r3, #0]
     754:	7912      	ldrb	r2, [r2, #4]
     756:	2a00      	cmp	r2, #0
     758:	d011      	beq.n	77e <udc_sof_notify+0x3a>
     75a:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     75c:	4d09      	ldr	r5, [pc, #36]	; (784 <udc_sof_notify+0x40>)
     75e:	e006      	b.n	76e <udc_sof_notify+0x2a>
				iface_num++) {
     760:	3401      	adds	r4, #1
     762:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     764:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
     766:	681a      	ldr	r2, [r3, #0]
     768:	7912      	ldrb	r2, [r2, #4]
     76a:	42a2      	cmp	r2, r4
     76c:	d907      	bls.n	77e <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     76e:	685b      	ldr	r3, [r3, #4]
     770:	00a2      	lsls	r2, r4, #2
     772:	58d3      	ldr	r3, [r2, r3]
     774:	691b      	ldr	r3, [r3, #16]
     776:	2b00      	cmp	r3, #0
     778:	d0f2      	beq.n	760 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     77a:	4798      	blx	r3
     77c:	e7f0      	b.n	760 <udc_sof_notify+0x1c>
}
     77e:	bd70      	pop	{r4, r5, r6, pc}
     780:	2000050c 	.word	0x2000050c
     784:	20000510 	.word	0x20000510

00000788 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     788:	b570      	push	{r4, r5, r6, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     78a:	4baa      	ldr	r3, [pc, #680]	; (a34 <udc_process_setup+0x2ac>)
     78c:	2200      	movs	r2, #0
     78e:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
     790:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
     792:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
     794:	781b      	ldrb	r3, [r3, #0]
     796:	b25a      	sxtb	r2, r3
     798:	2a00      	cmp	r2, #0
     79a:	db13      	blt.n	7c4 <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     79c:	2260      	movs	r2, #96	; 0x60
     79e:	421a      	tst	r2, r3
     7a0:	d100      	bne.n	7a4 <udc_process_setup+0x1c>
     7a2:	e0d7      	b.n	954 <udc_process_setup+0x1cc>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     7a4:	4ba3      	ldr	r3, [pc, #652]	; (a34 <udc_process_setup+0x2ac>)
     7a6:	781a      	ldrb	r2, [r3, #0]
     7a8:	231f      	movs	r3, #31
     7aa:	4013      	ands	r3, r2
     7ac:	2b01      	cmp	r3, #1
     7ae:	d100      	bne.n	7b2 <udc_process_setup+0x2a>
     7b0:	e166      	b.n	a80 <udc_process_setup+0x2f8>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     7b2:	4ba0      	ldr	r3, [pc, #640]	; (a34 <udc_process_setup+0x2ac>)
     7b4:	781a      	ldrb	r2, [r3, #0]
     7b6:	231f      	movs	r3, #31
     7b8:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     7ba:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     7bc:	2b02      	cmp	r3, #2
     7be:	d100      	bne.n	7c2 <udc_process_setup+0x3a>
     7c0:	e1bc      	b.n	b3c <udc_process_setup+0x3b4>
#endif
}
     7c2:	bd70      	pop	{r4, r5, r6, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
     7c4:	4a9b      	ldr	r2, [pc, #620]	; (a34 <udc_process_setup+0x2ac>)
     7c6:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
     7c8:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
     7ca:	2a00      	cmp	r2, #0
     7cc:	d0f9      	beq.n	7c2 <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     7ce:	2160      	movs	r1, #96	; 0x60
     7d0:	4219      	tst	r1, r3
     7d2:	d1e7      	bne.n	7a4 <udc_process_setup+0x1c>
     7d4:	211f      	movs	r1, #31
     7d6:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     7d8:	d108      	bne.n	7ec <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
     7da:	4996      	ldr	r1, [pc, #600]	; (a34 <udc_process_setup+0x2ac>)
     7dc:	7849      	ldrb	r1, [r1, #1]
     7de:	2906      	cmp	r1, #6
     7e0:	d023      	beq.n	82a <udc_process_setup+0xa2>
     7e2:	2908      	cmp	r1, #8
     7e4:	d100      	bne.n	7e8 <udc_process_setup+0x60>
     7e6:	e084      	b.n	8f2 <udc_process_setup+0x16a>
     7e8:	2900      	cmp	r1, #0
     7ea:	d017      	beq.n	81c <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     7ec:	2b01      	cmp	r3, #1
     7ee:	d100      	bne.n	7f2 <udc_process_setup+0x6a>
     7f0:	e087      	b.n	902 <udc_process_setup+0x17a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     7f2:	2b02      	cmp	r3, #2
     7f4:	d1d6      	bne.n	7a4 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     7f6:	4b8f      	ldr	r3, [pc, #572]	; (a34 <udc_process_setup+0x2ac>)
     7f8:	785b      	ldrb	r3, [r3, #1]
	return false;
     7fa:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
     7fc:	2b00      	cmp	r3, #0
     7fe:	d000      	beq.n	802 <udc_process_setup+0x7a>
     800:	e198      	b.n	b34 <udc_process_setup+0x3ac>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     802:	2a02      	cmp	r2, #2
     804:	d1d5      	bne.n	7b2 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     806:	4b8b      	ldr	r3, [pc, #556]	; (a34 <udc_process_setup+0x2ac>)
     808:	7918      	ldrb	r0, [r3, #4]
     80a:	f001 f92d 	bl	1a68 <udd_ep_is_halted>
     80e:	4b8a      	ldr	r3, [pc, #552]	; (a38 <udc_process_setup+0x2b0>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
     810:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     812:	2102      	movs	r1, #2
     814:	0018      	movs	r0, r3
     816:	f001 fac7 	bl	1da8 <udd_set_setup_payload>
     81a:	e0fc      	b.n	a16 <udc_process_setup+0x28e>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     81c:	2a02      	cmp	r2, #2
     81e:	d1c8      	bne.n	7b2 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     820:	3102      	adds	r1, #2
     822:	4886      	ldr	r0, [pc, #536]	; (a3c <udc_process_setup+0x2b4>)
     824:	f001 fac0 	bl	1da8 <udd_set_setup_payload>
     828:	e0f5      	b.n	a16 <udc_process_setup+0x28e>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     82a:	4b82      	ldr	r3, [pc, #520]	; (a34 <udc_process_setup+0x2ac>)
     82c:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     82e:	0a13      	lsrs	r3, r2, #8
     830:	2b02      	cmp	r3, #2
     832:	d023      	beq.n	87c <udc_process_setup+0xf4>
     834:	b2d9      	uxtb	r1, r3
     836:	2902      	cmp	r1, #2
     838:	d90f      	bls.n	85a <udc_process_setup+0xd2>
     83a:	2b03      	cmp	r3, #3
     83c:	d034      	beq.n	8a8 <udc_process_setup+0x120>
     83e:	2b0f      	cmp	r3, #15
     840:	d000      	beq.n	844 <udc_process_setup+0xbc>
     842:	e174      	b.n	b2e <udc_process_setup+0x3a6>
		if (udc_config.conf_bos == NULL) {
     844:	4b7e      	ldr	r3, [pc, #504]	; (a40 <udc_process_setup+0x2b8>)
     846:	6898      	ldr	r0, [r3, #8]
     848:	2800      	cmp	r0, #0
     84a:	d0b2      	beq.n	7b2 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     84c:	7883      	ldrb	r3, [r0, #2]
     84e:	78c1      	ldrb	r1, [r0, #3]
     850:	0209      	lsls	r1, r1, #8
     852:	4319      	orrs	r1, r3
     854:	f001 faa8 	bl	1da8 <udd_set_setup_payload>
     858:	e007      	b.n	86a <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     85a:	2b01      	cmp	r3, #1
     85c:	d000      	beq.n	860 <udc_process_setup+0xd8>
     85e:	e166      	b.n	b2e <udc_process_setup+0x3a6>
				(uint8_t *) udc_config.confdev_lsfs,
     860:	4b77      	ldr	r3, [pc, #476]	; (a40 <udc_process_setup+0x2b8>)
     862:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
     864:	7801      	ldrb	r1, [r0, #0]
     866:	f001 fa9f 	bl	1da8 <udd_set_setup_payload>
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     86a:	4b72      	ldr	r3, [pc, #456]	; (a34 <udc_process_setup+0x2ac>)
     86c:	88da      	ldrh	r2, [r3, #6]
     86e:	899b      	ldrh	r3, [r3, #12]
     870:	4293      	cmp	r3, r2
     872:	d800      	bhi.n	876 <udc_process_setup+0xee>
     874:	e0cf      	b.n	a16 <udc_process_setup+0x28e>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     876:	4b6f      	ldr	r3, [pc, #444]	; (a34 <udc_process_setup+0x2ac>)
     878:	819a      	strh	r2, [r3, #12]
     87a:	e0cc      	b.n	a16 <udc_process_setup+0x28e>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     87c:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
     87e:	4b70      	ldr	r3, [pc, #448]	; (a40 <udc_process_setup+0x2b8>)
     880:	681b      	ldr	r3, [r3, #0]
     882:	7c5b      	ldrb	r3, [r3, #17]
     884:	4293      	cmp	r3, r2
     886:	d800      	bhi.n	88a <udc_process_setup+0x102>
     888:	e793      	b.n	7b2 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
     88a:	4b6d      	ldr	r3, [pc, #436]	; (a40 <udc_process_setup+0x2b8>)
     88c:	685b      	ldr	r3, [r3, #4]
     88e:	00d2      	lsls	r2, r2, #3
     890:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
     892:	7883      	ldrb	r3, [r0, #2]
     894:	78c1      	ldrb	r1, [r0, #3]
     896:	0209      	lsls	r1, r1, #8
     898:	4319      	orrs	r1, r3
     89a:	f001 fa85 	bl	1da8 <udd_set_setup_payload>
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     89e:	4b65      	ldr	r3, [pc, #404]	; (a34 <udc_process_setup+0x2ac>)
     8a0:	689b      	ldr	r3, [r3, #8]
     8a2:	2202      	movs	r2, #2
     8a4:	705a      	strb	r2, [r3, #1]
     8a6:	e7e0      	b.n	86a <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     8a8:	23ff      	movs	r3, #255	; 0xff
     8aa:	401a      	ands	r2, r3
     8ac:	2a01      	cmp	r2, #1
     8ae:	d01d      	beq.n	8ec <udc_process_setup+0x164>
     8b0:	2a00      	cmp	r2, #0
     8b2:	d016      	beq.n	8e2 <udc_process_setup+0x15a>
     8b4:	2a02      	cmp	r2, #2
     8b6:	d000      	beq.n	8ba <udc_process_setup+0x132>
     8b8:	e774      	b.n	7a4 <udc_process_setup+0x1c>
		str = udc_string_product_name;
     8ba:	4c62      	ldr	r4, [pc, #392]	; (a44 <udc_process_setup+0x2bc>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     8bc:	2114      	movs	r1, #20
     8be:	4a62      	ldr	r2, [pc, #392]	; (a48 <udc_process_setup+0x2c0>)
     8c0:	3202      	adds	r2, #2
     8c2:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     8c4:	5ce0      	ldrb	r0, [r4, r3]
     8c6:	8010      	strh	r0, [r2, #0]
     8c8:	3301      	adds	r3, #1
     8ca:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
     8cc:	b2d8      	uxtb	r0, r3
     8ce:	4288      	cmp	r0, r1
     8d0:	d3f8      	bcc.n	8c4 <udc_process_setup+0x13c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     8d2:	0049      	lsls	r1, r1, #1
     8d4:	3102      	adds	r1, #2
     8d6:	485c      	ldr	r0, [pc, #368]	; (a48 <udc_process_setup+0x2c0>)
     8d8:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
     8da:	b289      	uxth	r1, r1
     8dc:	f001 fa64 	bl	1da8 <udd_set_setup_payload>
     8e0:	e7c3      	b.n	86a <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     8e2:	2104      	movs	r1, #4
     8e4:	4859      	ldr	r0, [pc, #356]	; (a4c <udc_process_setup+0x2c4>)
     8e6:	f001 fa5f 	bl	1da8 <udd_set_setup_payload>
     8ea:	e7be      	b.n	86a <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
     8ec:	4c58      	ldr	r4, [pc, #352]	; (a50 <udc_process_setup+0x2c8>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     8ee:	2109      	movs	r1, #9
     8f0:	e7e5      	b.n	8be <udc_process_setup+0x136>
	if (udd_g_ctrlreq.req.wLength != 1) {
     8f2:	2a01      	cmp	r2, #1
     8f4:	d000      	beq.n	8f8 <udc_process_setup+0x170>
     8f6:	e75c      	b.n	7b2 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
     8f8:	2101      	movs	r1, #1
     8fa:	4856      	ldr	r0, [pc, #344]	; (a54 <udc_process_setup+0x2cc>)
     8fc:	f001 fa54 	bl	1da8 <udd_set_setup_payload>
     900:	e089      	b.n	a16 <udc_process_setup+0x28e>
			switch (udd_g_ctrlreq.req.bRequest) {
     902:	494c      	ldr	r1, [pc, #304]	; (a34 <udc_process_setup+0x2ac>)
     904:	7849      	ldrb	r1, [r1, #1]
     906:	290a      	cmp	r1, #10
     908:	d000      	beq.n	90c <udc_process_setup+0x184>
     90a:	e772      	b.n	7f2 <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
     90c:	2a01      	cmp	r2, #1
     90e:	d000      	beq.n	912 <udc_process_setup+0x18a>
     910:	e0b6      	b.n	a80 <udc_process_setup+0x2f8>
	if (!udc_num_configuration) {
     912:	4b50      	ldr	r3, [pc, #320]	; (a54 <udc_process_setup+0x2cc>)
     914:	781b      	ldrb	r3, [r3, #0]
     916:	2b00      	cmp	r3, #0
     918:	d100      	bne.n	91c <udc_process_setup+0x194>
     91a:	e0b1      	b.n	a80 <udc_process_setup+0x2f8>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     91c:	4b45      	ldr	r3, [pc, #276]	; (a34 <udc_process_setup+0x2ac>)
     91e:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     920:	4b4d      	ldr	r3, [pc, #308]	; (a58 <udc_process_setup+0x2d0>)
     922:	681d      	ldr	r5, [r3, #0]
     924:	682b      	ldr	r3, [r5, #0]
     926:	791b      	ldrb	r3, [r3, #4]
     928:	42a3      	cmp	r3, r4
     92a:	d800      	bhi.n	92e <udc_process_setup+0x1a6>
     92c:	e0a8      	b.n	a80 <udc_process_setup+0x2f8>
	if (!udc_update_iface_desc(iface_num, 0)) {
     92e:	2100      	movs	r1, #0
     930:	0020      	movs	r0, r4
     932:	f7ff fe4f 	bl	5d4 <udc_update_iface_desc>
     936:	2800      	cmp	r0, #0
     938:	d100      	bne.n	93c <udc_process_setup+0x1b4>
     93a:	e733      	b.n	7a4 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     93c:	686b      	ldr	r3, [r5, #4]
     93e:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
     940:	58e3      	ldr	r3, [r4, r3]
     942:	68db      	ldr	r3, [r3, #12]
     944:	4798      	blx	r3
     946:	4b45      	ldr	r3, [pc, #276]	; (a5c <udc_process_setup+0x2d4>)
     948:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
     94a:	2101      	movs	r1, #1
     94c:	0018      	movs	r0, r3
     94e:	f001 fa2b 	bl	1da8 <udd_set_setup_payload>
     952:	e060      	b.n	a16 <udc_process_setup+0x28e>
     954:	221f      	movs	r2, #31
     956:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     958:	d15f      	bne.n	a1a <udc_process_setup+0x292>
			switch (udd_g_ctrlreq.req.bRequest) {
     95a:	4a36      	ldr	r2, [pc, #216]	; (a34 <udc_process_setup+0x2ac>)
     95c:	7852      	ldrb	r2, [r2, #1]
     95e:	2a03      	cmp	r2, #3
     960:	d100      	bne.n	964 <udc_process_setup+0x1dc>
     962:	e0e6      	b.n	b32 <udc_process_setup+0x3aa>
     964:	b2d1      	uxtb	r1, r2
     966:	2903      	cmp	r1, #3
     968:	d93b      	bls.n	9e2 <udc_process_setup+0x25a>
     96a:	2a05      	cmp	r2, #5
     96c:	d04b      	beq.n	a06 <udc_process_setup+0x27e>
     96e:	2a09      	cmp	r2, #9
     970:	d153      	bne.n	a1a <udc_process_setup+0x292>
	if (udd_g_ctrlreq.req.wLength) {
     972:	4b30      	ldr	r3, [pc, #192]	; (a34 <udc_process_setup+0x2ac>)
     974:	88db      	ldrh	r3, [r3, #6]
     976:	2b00      	cmp	r3, #0
     978:	d000      	beq.n	97c <udc_process_setup+0x1f4>
     97a:	e71a      	b.n	7b2 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
     97c:	f001 fa0c 	bl	1d98 <udd_getaddress>
     980:	2800      	cmp	r0, #0
     982:	d100      	bne.n	986 <udc_process_setup+0x1fe>
     984:	e70e      	b.n	7a4 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     986:	4b2b      	ldr	r3, [pc, #172]	; (a34 <udc_process_setup+0x2ac>)
     988:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
     98a:	4b2d      	ldr	r3, [pc, #180]	; (a40 <udc_process_setup+0x2b8>)
     98c:	681b      	ldr	r3, [r3, #0]
     98e:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     990:	429a      	cmp	r2, r3
     992:	dd00      	ble.n	996 <udc_process_setup+0x20e>
     994:	e706      	b.n	7a4 <udc_process_setup+0x1c>
	udc_reset();
     996:	f7ff feb1 	bl	6fc <udc_reset>
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     99a:	4b26      	ldr	r3, [pc, #152]	; (a34 <udc_process_setup+0x2ac>)
     99c:	789b      	ldrb	r3, [r3, #2]
     99e:	4a2d      	ldr	r2, [pc, #180]	; (a54 <udc_process_setup+0x2cc>)
     9a0:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
     9a2:	2b00      	cmp	r3, #0
     9a4:	d037      	beq.n	a16 <udc_process_setup+0x28e>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     9a6:	4a2e      	ldr	r2, [pc, #184]	; (a60 <udc_process_setup+0x2d8>)
     9a8:	4694      	mov	ip, r2
     9aa:	4463      	add	r3, ip
     9ac:	00db      	lsls	r3, r3, #3
     9ae:	4a24      	ldr	r2, [pc, #144]	; (a40 <udc_process_setup+0x2b8>)
     9b0:	6852      	ldr	r2, [r2, #4]
     9b2:	18d3      	adds	r3, r2, r3
     9b4:	4a28      	ldr	r2, [pc, #160]	; (a58 <udc_process_setup+0x2d0>)
     9b6:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     9b8:	681b      	ldr	r3, [r3, #0]
     9ba:	791b      	ldrb	r3, [r3, #4]
     9bc:	2b00      	cmp	r3, #0
     9be:	d02a      	beq.n	a16 <udc_process_setup+0x28e>
     9c0:	2400      	movs	r4, #0
     9c2:	0015      	movs	r5, r2
		if (!udc_iface_enable(iface_num, 0)) {
     9c4:	2100      	movs	r1, #0
     9c6:	0020      	movs	r0, r4
     9c8:	f7ff fe68 	bl	69c <udc_iface_enable>
     9cc:	2800      	cmp	r0, #0
     9ce:	d100      	bne.n	9d2 <udc_process_setup+0x24a>
     9d0:	e6e8      	b.n	7a4 <udc_process_setup+0x1c>
			iface_num++) {
     9d2:	3401      	adds	r4, #1
     9d4:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     9d6:	682b      	ldr	r3, [r5, #0]
     9d8:	681b      	ldr	r3, [r3, #0]
     9da:	791b      	ldrb	r3, [r3, #4]
     9dc:	42a3      	cmp	r3, r4
     9de:	d8f1      	bhi.n	9c4 <udc_process_setup+0x23c>
     9e0:	e019      	b.n	a16 <udc_process_setup+0x28e>
			switch (udd_g_ctrlreq.req.bRequest) {
     9e2:	2a01      	cmp	r2, #1
     9e4:	d119      	bne.n	a1a <udc_process_setup+0x292>
	if (udd_g_ctrlreq.req.wLength) {
     9e6:	4b13      	ldr	r3, [pc, #76]	; (a34 <udc_process_setup+0x2ac>)
     9e8:	88db      	ldrh	r3, [r3, #6]
     9ea:	2b00      	cmp	r3, #0
     9ec:	d000      	beq.n	9f0 <udc_process_setup+0x268>
     9ee:	e6e0      	b.n	7b2 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     9f0:	4b10      	ldr	r3, [pc, #64]	; (a34 <udc_process_setup+0x2ac>)
     9f2:	885b      	ldrh	r3, [r3, #2]
     9f4:	2b01      	cmp	r3, #1
     9f6:	d000      	beq.n	9fa <udc_process_setup+0x272>
     9f8:	e6db      	b.n	7b2 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     9fa:	4a10      	ldr	r2, [pc, #64]	; (a3c <udc_process_setup+0x2b4>)
     9fc:	8813      	ldrh	r3, [r2, #0]
     9fe:	2102      	movs	r1, #2
     a00:	438b      	bics	r3, r1
     a02:	8013      	strh	r3, [r2, #0]
     a04:	e007      	b.n	a16 <udc_process_setup+0x28e>
	if (udd_g_ctrlreq.req.wLength) {
     a06:	4b0b      	ldr	r3, [pc, #44]	; (a34 <udc_process_setup+0x2ac>)
     a08:	88db      	ldrh	r3, [r3, #6]
     a0a:	2b00      	cmp	r3, #0
     a0c:	d000      	beq.n	a10 <udc_process_setup+0x288>
     a0e:	e6d0      	b.n	7b2 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
     a10:	4a14      	ldr	r2, [pc, #80]	; (a64 <udc_process_setup+0x2dc>)
     a12:	4b08      	ldr	r3, [pc, #32]	; (a34 <udc_process_setup+0x2ac>)
     a14:	611a      	str	r2, [r3, #16]
			return true;
     a16:	2001      	movs	r0, #1
     a18:	e6d3      	b.n	7c2 <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     a1a:	2b01      	cmp	r3, #1
     a1c:	d024      	beq.n	a68 <udc_process_setup+0x2e0>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     a1e:	2b02      	cmp	r3, #2
     a20:	d000      	beq.n	a24 <udc_process_setup+0x29c>
     a22:	e6bf      	b.n	7a4 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     a24:	4b03      	ldr	r3, [pc, #12]	; (a34 <udc_process_setup+0x2ac>)
     a26:	785b      	ldrb	r3, [r3, #1]
     a28:	2b01      	cmp	r3, #1
     a2a:	d05f      	beq.n	aec <udc_process_setup+0x364>
     a2c:	2b03      	cmp	r3, #3
     a2e:	d06c      	beq.n	b0a <udc_process_setup+0x382>
	return false;
     a30:	2000      	movs	r0, #0
     a32:	e07f      	b.n	b34 <udc_process_setup+0x3ac>
     a34:	20000980 	.word	0x20000980
     a38:	20000504 	.word	0x20000504
     a3c:	20000502 	.word	0x20000502
     a40:	20000018 	.word	0x20000018
     a44:	200000c8 	.word	0x200000c8
     a48:	2000008c 	.word	0x2000008c
     a4c:	200000b8 	.word	0x200000b8
     a50:	200000bc 	.word	0x200000bc
     a54:	2000050c 	.word	0x2000050c
     a58:	20000510 	.word	0x20000510
     a5c:	20000508 	.word	0x20000508
     a60:	1fffffff 	.word	0x1fffffff
     a64:	000005c1 	.word	0x000005c1
			switch (udd_g_ctrlreq.req.bRequest) {
     a68:	4a48      	ldr	r2, [pc, #288]	; (b8c <udc_process_setup+0x404>)
     a6a:	7852      	ldrb	r2, [r2, #1]
     a6c:	2a0b      	cmp	r2, #11
     a6e:	d1d6      	bne.n	a1e <udc_process_setup+0x296>
	if (udd_g_ctrlreq.req.wLength) {
     a70:	4b46      	ldr	r3, [pc, #280]	; (b8c <udc_process_setup+0x404>)
     a72:	88db      	ldrh	r3, [r3, #6]
     a74:	2b00      	cmp	r3, #0
     a76:	d103      	bne.n	a80 <udc_process_setup+0x2f8>
	if (!udc_num_configuration) {
     a78:	4b45      	ldr	r3, [pc, #276]	; (b90 <udc_process_setup+0x408>)
     a7a:	781b      	ldrb	r3, [r3, #0]
     a7c:	2b00      	cmp	r3, #0
     a7e:	d127      	bne.n	ad0 <udc_process_setup+0x348>
	if (0 == udc_num_configuration) {
     a80:	4b43      	ldr	r3, [pc, #268]	; (b90 <udc_process_setup+0x408>)
     a82:	781b      	ldrb	r3, [r3, #0]
	return false;
     a84:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
     a86:	2b00      	cmp	r3, #0
     a88:	d100      	bne.n	a8c <udc_process_setup+0x304>
     a8a:	e69a      	b.n	7c2 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     a8c:	4b3f      	ldr	r3, [pc, #252]	; (b8c <udc_process_setup+0x404>)
     a8e:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     a90:	4b40      	ldr	r3, [pc, #256]	; (b94 <udc_process_setup+0x40c>)
     a92:	681d      	ldr	r5, [r3, #0]
     a94:	682b      	ldr	r3, [r5, #0]
     a96:	791b      	ldrb	r3, [r3, #4]
     a98:	42a3      	cmp	r3, r4
     a9a:	d800      	bhi.n	a9e <udc_process_setup+0x316>
     a9c:	e691      	b.n	7c2 <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
     a9e:	2100      	movs	r1, #0
     aa0:	0020      	movs	r0, r4
     aa2:	f7ff fd97 	bl	5d4 <udc_update_iface_desc>
     aa6:	2800      	cmp	r0, #0
     aa8:	d100      	bne.n	aac <udc_process_setup+0x324>
     aaa:	e682      	b.n	7b2 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     aac:	686b      	ldr	r3, [r5, #4]
     aae:	00a2      	lsls	r2, r4, #2
     ab0:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     ab2:	68eb      	ldr	r3, [r5, #12]
     ab4:	4798      	blx	r3
     ab6:	0001      	movs	r1, r0
     ab8:	0020      	movs	r0, r4
     aba:	f7ff fd8b 	bl	5d4 <udc_update_iface_desc>
     abe:	2800      	cmp	r0, #0
     ac0:	d100      	bne.n	ac4 <udc_process_setup+0x33c>
     ac2:	e676      	b.n	7b2 <udc_process_setup+0x2a>
	return udi_api->setup();
     ac4:	68ab      	ldr	r3, [r5, #8]
     ac6:	4798      	blx	r3
		if (udc_req_iface()) {
     ac8:	2800      	cmp	r0, #0
     aca:	d000      	beq.n	ace <udc_process_setup+0x346>
     acc:	e679      	b.n	7c2 <udc_process_setup+0x3a>
     ace:	e670      	b.n	7b2 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     ad0:	4b2e      	ldr	r3, [pc, #184]	; (b8c <udc_process_setup+0x404>)
     ad2:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     ad4:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
     ad6:	0028      	movs	r0, r5
     ad8:	f7ff fdb6 	bl	648 <udc_iface_disable>
     adc:	2800      	cmp	r0, #0
     ade:	d100      	bne.n	ae2 <udc_process_setup+0x35a>
     ae0:	e660      	b.n	7a4 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
     ae2:	b2e1      	uxtb	r1, r4
     ae4:	0028      	movs	r0, r5
     ae6:	f7ff fdd9 	bl	69c <udc_iface_enable>
     aea:	e023      	b.n	b34 <udc_process_setup+0x3ac>
	if (udd_g_ctrlreq.req.wLength) {
     aec:	4b27      	ldr	r3, [pc, #156]	; (b8c <udc_process_setup+0x404>)
     aee:	88db      	ldrh	r3, [r3, #6]
     af0:	2b00      	cmp	r3, #0
     af2:	d000      	beq.n	af6 <udc_process_setup+0x36e>
     af4:	e65d      	b.n	7b2 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     af6:	4b25      	ldr	r3, [pc, #148]	; (b8c <udc_process_setup+0x404>)
     af8:	885b      	ldrh	r3, [r3, #2]
     afa:	2b00      	cmp	r3, #0
     afc:	d000      	beq.n	b00 <udc_process_setup+0x378>
     afe:	e658      	b.n	7b2 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     b00:	4b22      	ldr	r3, [pc, #136]	; (b8c <udc_process_setup+0x404>)
     b02:	7918      	ldrb	r0, [r3, #4]
     b04:	f001 f842 	bl	1b8c <udd_ep_clear_halt>
     b08:	e014      	b.n	b34 <udc_process_setup+0x3ac>
	if (udd_g_ctrlreq.req.wLength) {
     b0a:	4b20      	ldr	r3, [pc, #128]	; (b8c <udc_process_setup+0x404>)
     b0c:	88db      	ldrh	r3, [r3, #6]
     b0e:	2b00      	cmp	r3, #0
     b10:	d000      	beq.n	b14 <udc_process_setup+0x38c>
     b12:	e64e      	b.n	7b2 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     b14:	4b1d      	ldr	r3, [pc, #116]	; (b8c <udc_process_setup+0x404>)
     b16:	885b      	ldrh	r3, [r3, #2]
     b18:	2b00      	cmp	r3, #0
     b1a:	d000      	beq.n	b1e <udc_process_setup+0x396>
     b1c:	e649      	b.n	7b2 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     b1e:	4c1b      	ldr	r4, [pc, #108]	; (b8c <udc_process_setup+0x404>)
     b20:	7920      	ldrb	r0, [r4, #4]
     b22:	f000 fedf 	bl	18e4 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     b26:	7920      	ldrb	r0, [r4, #4]
     b28:	f000 ffa6 	bl	1a78 <udd_ep_set_halt>
     b2c:	e002      	b.n	b34 <udc_process_setup+0x3ac>
		return false;
     b2e:	2000      	movs	r0, #0
     b30:	e000      	b.n	b34 <udc_process_setup+0x3ac>
				return udc_req_std_dev_set_feature();
     b32:	2000      	movs	r0, #0
		if (udc_reqstd()) {
     b34:	2800      	cmp	r0, #0
     b36:	d000      	beq.n	b3a <udc_process_setup+0x3b2>
     b38:	e643      	b.n	7c2 <udc_process_setup+0x3a>
     b3a:	e633      	b.n	7a4 <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
     b3c:	4b14      	ldr	r3, [pc, #80]	; (b90 <udc_process_setup+0x408>)
     b3e:	781b      	ldrb	r3, [r3, #0]
     b40:	2b00      	cmp	r3, #0
     b42:	d100      	bne.n	b46 <udc_process_setup+0x3be>
     b44:	e63d      	b.n	7c2 <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b46:	4b13      	ldr	r3, [pc, #76]	; (b94 <udc_process_setup+0x40c>)
     b48:	681b      	ldr	r3, [r3, #0]
     b4a:	681a      	ldr	r2, [r3, #0]
     b4c:	7912      	ldrb	r2, [r2, #4]
     b4e:	2a00      	cmp	r2, #0
     b50:	d01a      	beq.n	b88 <udc_process_setup+0x400>
     b52:	2500      	movs	r5, #0
     b54:	4e0f      	ldr	r6, [pc, #60]	; (b94 <udc_process_setup+0x40c>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     b56:	685b      	ldr	r3, [r3, #4]
     b58:	00aa      	lsls	r2, r5, #2
     b5a:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     b5c:	68e3      	ldr	r3, [r4, #12]
     b5e:	4798      	blx	r3
     b60:	0001      	movs	r1, r0
     b62:	0028      	movs	r0, r5
     b64:	f7ff fd36 	bl	5d4 <udc_update_iface_desc>
     b68:	2800      	cmp	r0, #0
     b6a:	d100      	bne.n	b6e <udc_process_setup+0x3e6>
     b6c:	e629      	b.n	7c2 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
     b6e:	68a3      	ldr	r3, [r4, #8]
     b70:	4798      	blx	r3
     b72:	2800      	cmp	r0, #0
     b74:	d000      	beq.n	b78 <udc_process_setup+0x3f0>
     b76:	e624      	b.n	7c2 <udc_process_setup+0x3a>
			iface_num++) {
     b78:	3501      	adds	r5, #1
     b7a:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b7c:	6833      	ldr	r3, [r6, #0]
     b7e:	681a      	ldr	r2, [r3, #0]
     b80:	7912      	ldrb	r2, [r2, #4]
     b82:	42aa      	cmp	r2, r5
     b84:	d8e7      	bhi.n	b56 <udc_process_setup+0x3ce>
     b86:	e61c      	b.n	7c2 <udc_process_setup+0x3a>
	return false;
     b88:	2000      	movs	r0, #0
     b8a:	e61a      	b.n	7c2 <udc_process_setup+0x3a>
     b8c:	20000980 	.word	0x20000980
     b90:	2000050c 	.word	0x2000050c
     b94:	20000510 	.word	0x20000510

00000b98 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     b98:	4b0c      	ldr	r3, [pc, #48]	; (bcc <cpu_irq_enter_critical+0x34>)
     b9a:	681b      	ldr	r3, [r3, #0]
     b9c:	2b00      	cmp	r3, #0
     b9e:	d106      	bne.n	bae <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     ba0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     ba4:	2b00      	cmp	r3, #0
     ba6:	d007      	beq.n	bb8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     ba8:	2200      	movs	r2, #0
     baa:	4b09      	ldr	r3, [pc, #36]	; (bd0 <cpu_irq_enter_critical+0x38>)
     bac:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     bae:	4a07      	ldr	r2, [pc, #28]	; (bcc <cpu_irq_enter_critical+0x34>)
     bb0:	6813      	ldr	r3, [r2, #0]
     bb2:	3301      	adds	r3, #1
     bb4:	6013      	str	r3, [r2, #0]
}
     bb6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     bb8:	b672      	cpsid	i
  __ASM volatile ("dmb");
     bba:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     bbe:	2200      	movs	r2, #0
     bc0:	4b04      	ldr	r3, [pc, #16]	; (bd4 <cpu_irq_enter_critical+0x3c>)
     bc2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     bc4:	3201      	adds	r2, #1
     bc6:	4b02      	ldr	r3, [pc, #8]	; (bd0 <cpu_irq_enter_critical+0x38>)
     bc8:	701a      	strb	r2, [r3, #0]
     bca:	e7f0      	b.n	bae <cpu_irq_enter_critical+0x16>
     bcc:	20000518 	.word	0x20000518
     bd0:	2000051c 	.word	0x2000051c
     bd4:	200000dd 	.word	0x200000dd

00000bd8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     bd8:	4b08      	ldr	r3, [pc, #32]	; (bfc <cpu_irq_leave_critical+0x24>)
     bda:	681a      	ldr	r2, [r3, #0]
     bdc:	3a01      	subs	r2, #1
     bde:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     be0:	681b      	ldr	r3, [r3, #0]
     be2:	2b00      	cmp	r3, #0
     be4:	d109      	bne.n	bfa <cpu_irq_leave_critical+0x22>
     be6:	4b06      	ldr	r3, [pc, #24]	; (c00 <cpu_irq_leave_critical+0x28>)
     be8:	781b      	ldrb	r3, [r3, #0]
     bea:	2b00      	cmp	r3, #0
     bec:	d005      	beq.n	bfa <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     bee:	2201      	movs	r2, #1
     bf0:	4b04      	ldr	r3, [pc, #16]	; (c04 <cpu_irq_leave_critical+0x2c>)
     bf2:	701a      	strb	r2, [r3, #0]
     bf4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     bf8:	b662      	cpsie	i
	}
}
     bfa:	4770      	bx	lr
     bfc:	20000518 	.word	0x20000518
     c00:	2000051c 	.word	0x2000051c
     c04:	200000dd 	.word	0x200000dd

00000c08 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     c08:	b570      	push	{r4, r5, r6, lr}
     c0a:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
     c0c:	ac01      	add	r4, sp, #4
     c0e:	2501      	movs	r5, #1
     c10:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     c12:	2600      	movs	r6, #0
     c14:	70a6      	strb	r6, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     c16:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     c18:	0021      	movs	r1, r4
     c1a:	203e      	movs	r0, #62	; 0x3e
     c1c:	f000 f8ee 	bl	dfc <port_pin_set_config>
		port_base->OUTSET.reg = pin_mask;
     c20:	2280      	movs	r2, #128	; 0x80
     c22:	05d2      	lsls	r2, r2, #23
     c24:	4b04      	ldr	r3, [pc, #16]	; (c38 <system_board_init+0x30>)
     c26:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     c28:	7026      	strb	r6, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     c2a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     c2c:	0021      	movs	r1, r4
     c2e:	200f      	movs	r0, #15
     c30:	f000 f8e4 	bl	dfc <port_pin_set_config>
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     c34:	b002      	add	sp, #8
     c36:	bd70      	pop	{r4, r5, r6, pc}
     c38:	41004480 	.word	0x41004480

00000c3c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c3c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     c3e:	2a00      	cmp	r2, #0
     c40:	d001      	beq.n	c46 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     c42:	0018      	movs	r0, r3
     c44:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     c46:	008b      	lsls	r3, r1, #2
     c48:	4a06      	ldr	r2, [pc, #24]	; (c64 <extint_register_callback+0x28>)
     c4a:	589b      	ldr	r3, [r3, r2]
     c4c:	2b00      	cmp	r3, #0
     c4e:	d003      	beq.n	c58 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     c50:	4283      	cmp	r3, r0
     c52:	d005      	beq.n	c60 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     c54:	231d      	movs	r3, #29
     c56:	e7f4      	b.n	c42 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     c58:	0089      	lsls	r1, r1, #2
     c5a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     c5c:	2300      	movs	r3, #0
     c5e:	e7f0      	b.n	c42 <extint_register_callback+0x6>
		return STATUS_OK;
     c60:	2300      	movs	r3, #0
     c62:	e7ee      	b.n	c42 <extint_register_callback+0x6>
     c64:	20000658 	.word	0x20000658

00000c68 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c68:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     c6a:	2900      	cmp	r1, #0
     c6c:	d001      	beq.n	c72 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     c6e:	0018      	movs	r0, r3
     c70:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     c72:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     c74:	281f      	cmp	r0, #31
     c76:	d800      	bhi.n	c7a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     c78:	4a02      	ldr	r2, [pc, #8]	; (c84 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     c7a:	2301      	movs	r3, #1
     c7c:	4083      	lsls	r3, r0
     c7e:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     c80:	2300      	movs	r3, #0
     c82:	e7f4      	b.n	c6e <extint_chan_enable_callback+0x6>
     c84:	40001800 	.word	0x40001800

00000c88 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c88:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     c8a:	2900      	cmp	r1, #0
     c8c:	d001      	beq.n	c92 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
     c8e:	0018      	movs	r0, r3
     c90:	4770      	bx	lr
		return NULL;
     c92:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     c94:	281f      	cmp	r0, #31
     c96:	d800      	bhi.n	c9a <extint_chan_disable_callback+0x12>
		return eics[eic_index];
     c98:	4a02      	ldr	r2, [pc, #8]	; (ca4 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
     c9a:	2301      	movs	r3, #1
     c9c:	4083      	lsls	r3, r0
     c9e:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
     ca0:	2300      	movs	r3, #0
     ca2:	e7f4      	b.n	c8e <extint_chan_disable_callback+0x6>
     ca4:	40001800 	.word	0x40001800

00000ca8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     ca8:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     caa:	2200      	movs	r2, #0
     cac:	4b10      	ldr	r3, [pc, #64]	; (cf0 <EIC_Handler+0x48>)
     cae:	701a      	strb	r2, [r3, #0]
     cb0:	2300      	movs	r3, #0
     cb2:	4910      	ldr	r1, [pc, #64]	; (cf4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     cb4:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     cb6:	4e10      	ldr	r6, [pc, #64]	; (cf8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     cb8:	4c0d      	ldr	r4, [pc, #52]	; (cf0 <EIC_Handler+0x48>)
     cba:	e00a      	b.n	cd2 <EIC_Handler+0x2a>
		return eics[eic_index];
     cbc:	490d      	ldr	r1, [pc, #52]	; (cf4 <EIC_Handler+0x4c>)
     cbe:	e008      	b.n	cd2 <EIC_Handler+0x2a>
     cc0:	7823      	ldrb	r3, [r4, #0]
     cc2:	3301      	adds	r3, #1
     cc4:	b2db      	uxtb	r3, r3
     cc6:	7023      	strb	r3, [r4, #0]
     cc8:	2b0f      	cmp	r3, #15
     cca:	d810      	bhi.n	cee <EIC_Handler+0x46>
		return NULL;
     ccc:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     cce:	2b1f      	cmp	r3, #31
     cd0:	d9f4      	bls.n	cbc <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     cd2:	0028      	movs	r0, r5
     cd4:	4018      	ands	r0, r3
     cd6:	2201      	movs	r2, #1
     cd8:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     cda:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     cdc:	4210      	tst	r0, r2
     cde:	d0ef      	beq.n	cc0 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     ce0:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     ce2:	009b      	lsls	r3, r3, #2
     ce4:	599b      	ldr	r3, [r3, r6]
     ce6:	2b00      	cmp	r3, #0
     ce8:	d0ea      	beq.n	cc0 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     cea:	4798      	blx	r3
     cec:	e7e8      	b.n	cc0 <EIC_Handler+0x18>
			}
		}
	}
}
     cee:	bd70      	pop	{r4, r5, r6, pc}
     cf0:	20000655 	.word	0x20000655
     cf4:	40001800 	.word	0x40001800
     cf8:	20000658 	.word	0x20000658

00000cfc <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     cfc:	4a04      	ldr	r2, [pc, #16]	; (d10 <_extint_enable+0x14>)
     cfe:	7813      	ldrb	r3, [r2, #0]
     d00:	2102      	movs	r1, #2
     d02:	430b      	orrs	r3, r1
     d04:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     d06:	7853      	ldrb	r3, [r2, #1]
     d08:	b25b      	sxtb	r3, r3
     d0a:	2b00      	cmp	r3, #0
     d0c:	dbfb      	blt.n	d06 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     d0e:	4770      	bx	lr
     d10:	40001800 	.word	0x40001800

00000d14 <_system_extint_init>:
{
     d14:	b500      	push	{lr}
     d16:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     d18:	4a12      	ldr	r2, [pc, #72]	; (d64 <_system_extint_init+0x50>)
     d1a:	6993      	ldr	r3, [r2, #24]
     d1c:	2140      	movs	r1, #64	; 0x40
     d1e:	430b      	orrs	r3, r1
     d20:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     d22:	a901      	add	r1, sp, #4
     d24:	2300      	movs	r3, #0
     d26:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     d28:	2005      	movs	r0, #5
     d2a:	f000 fa61 	bl	11f0 <system_gclk_chan_set_config>
	system_gclk_chan_enable(EIC_GCLK_ID);
     d2e:	2005      	movs	r0, #5
     d30:	f000 fa20 	bl	1174 <system_gclk_chan_enable>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     d34:	4a0c      	ldr	r2, [pc, #48]	; (d68 <_system_extint_init+0x54>)
     d36:	7813      	ldrb	r3, [r2, #0]
     d38:	2101      	movs	r1, #1
     d3a:	430b      	orrs	r3, r1
     d3c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     d3e:	7853      	ldrb	r3, [r2, #1]
     d40:	b25b      	sxtb	r3, r3
     d42:	2b00      	cmp	r3, #0
     d44:	dbfb      	blt.n	d3e <_system_extint_init+0x2a>
     d46:	4b09      	ldr	r3, [pc, #36]	; (d6c <_system_extint_init+0x58>)
     d48:	0019      	movs	r1, r3
     d4a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     d4c:	2200      	movs	r2, #0
     d4e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     d50:	4299      	cmp	r1, r3
     d52:	d1fc      	bne.n	d4e <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d54:	2210      	movs	r2, #16
     d56:	4b06      	ldr	r3, [pc, #24]	; (d70 <_system_extint_init+0x5c>)
     d58:	601a      	str	r2, [r3, #0]
	_extint_enable();
     d5a:	f7ff ffcf 	bl	cfc <_extint_enable>
}
     d5e:	b003      	add	sp, #12
     d60:	bd00      	pop	{pc}
     d62:	46c0      	nop			; (mov r8, r8)
     d64:	40000400 	.word	0x40000400
     d68:	40001800 	.word	0x40001800
     d6c:	20000658 	.word	0x20000658
     d70:	e000e100 	.word	0xe000e100

00000d74 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     d74:	2300      	movs	r3, #0
     d76:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     d78:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     d7a:	2201      	movs	r2, #1
     d7c:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     d7e:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     d80:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     d82:	3302      	adds	r3, #2
     d84:	72c3      	strb	r3, [r0, #11]
}
     d86:	4770      	bx	lr

00000d88 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     d88:	b5f0      	push	{r4, r5, r6, r7, lr}
     d8a:	b083      	sub	sp, #12
     d8c:	0005      	movs	r5, r0
     d8e:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d90:	a901      	add	r1, sp, #4
     d92:	2300      	movs	r3, #0
     d94:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     d96:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     d98:	7923      	ldrb	r3, [r4, #4]
     d9a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     d9c:	7a23      	ldrb	r3, [r4, #8]
     d9e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     da0:	7820      	ldrb	r0, [r4, #0]
     da2:	f000 fa85 	bl	12b0 <system_pinmux_pin_set_config>
		return NULL;
     da6:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     da8:	2d1f      	cmp	r5, #31
     daa:	d800      	bhi.n	dae <extint_chan_set_config+0x26>
		return eics[eic_index];
     dac:	4812      	ldr	r0, [pc, #72]	; (df8 <extint_chan_set_config+0x70>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     dae:	2207      	movs	r2, #7
     db0:	402a      	ands	r2, r5
     db2:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     db4:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     db6:	7aa3      	ldrb	r3, [r4, #10]
     db8:	2b00      	cmp	r3, #0
     dba:	d001      	beq.n	dc0 <extint_chan_set_config+0x38>
     dbc:	2308      	movs	r3, #8
     dbe:	431f      	orrs	r7, r3
     dc0:	08eb      	lsrs	r3, r5, #3
     dc2:	009b      	lsls	r3, r3, #2
     dc4:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     dc6:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     dc8:	260f      	movs	r6, #15
     dca:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     dcc:	43b1      	bics	r1, r6
			(new_config << config_pos);
     dce:	4097      	lsls	r7, r2
     dd0:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     dd2:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     dd4:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     dd6:	7a63      	ldrb	r3, [r4, #9]
     dd8:	2b00      	cmp	r3, #0
     dda:	d106      	bne.n	dea <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     ddc:	6943      	ldr	r3, [r0, #20]
     dde:	2201      	movs	r2, #1
     de0:	40aa      	lsls	r2, r5
     de2:	4393      	bics	r3, r2
     de4:	6143      	str	r3, [r0, #20]
	}
}
     de6:	b003      	add	sp, #12
     de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     dea:	6942      	ldr	r2, [r0, #20]
     dec:	2301      	movs	r3, #1
     dee:	40ab      	lsls	r3, r5
     df0:	4313      	orrs	r3, r2
     df2:	6143      	str	r3, [r0, #20]
     df4:	e7f7      	b.n	de6 <extint_chan_set_config+0x5e>
     df6:	46c0      	nop			; (mov r8, r8)
     df8:	40001800 	.word	0x40001800

00000dfc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     dfc:	b500      	push	{lr}
     dfe:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e00:	ab01      	add	r3, sp, #4
     e02:	2280      	movs	r2, #128	; 0x80
     e04:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     e06:	780a      	ldrb	r2, [r1, #0]
     e08:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     e0a:	784a      	ldrb	r2, [r1, #1]
     e0c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     e0e:	788a      	ldrb	r2, [r1, #2]
     e10:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     e12:	0019      	movs	r1, r3
     e14:	f000 fa4c 	bl	12b0 <system_pinmux_pin_set_config>
}
     e18:	b003      	add	sp, #12
     e1a:	bd00      	pop	{pc}

00000e1c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     e1c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     e1e:	490c      	ldr	r1, [pc, #48]	; (e50 <system_clock_source_osc8m_set_config+0x34>)
     e20:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     e22:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     e24:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     e26:	7840      	ldrb	r0, [r0, #1]
     e28:	2201      	movs	r2, #1
     e2a:	4010      	ands	r0, r2
     e2c:	0180      	lsls	r0, r0, #6
     e2e:	2640      	movs	r6, #64	; 0x40
     e30:	43b3      	bics	r3, r6
     e32:	4303      	orrs	r3, r0
     e34:	402a      	ands	r2, r5
     e36:	01d2      	lsls	r2, r2, #7
     e38:	2080      	movs	r0, #128	; 0x80
     e3a:	4383      	bics	r3, r0
     e3c:	4313      	orrs	r3, r2
     e3e:	2203      	movs	r2, #3
     e40:	4022      	ands	r2, r4
     e42:	0212      	lsls	r2, r2, #8
     e44:	4803      	ldr	r0, [pc, #12]	; (e54 <system_clock_source_osc8m_set_config+0x38>)
     e46:	4003      	ands	r3, r0
     e48:	4313      	orrs	r3, r2
     e4a:	620b      	str	r3, [r1, #32]
}
     e4c:	bd70      	pop	{r4, r5, r6, pc}
     e4e:	46c0      	nop			; (mov r8, r8)
     e50:	40000800 	.word	0x40000800
     e54:	fffffcff 	.word	0xfffffcff

00000e58 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     e58:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     e5a:	7a03      	ldrb	r3, [r0, #8]
     e5c:	069b      	lsls	r3, r3, #26
     e5e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     e60:	8942      	ldrh	r2, [r0, #10]
     e62:	0592      	lsls	r2, r2, #22
     e64:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     e66:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
     e68:	4918      	ldr	r1, [pc, #96]	; (ecc <system_clock_source_dfll_set_config+0x74>)
     e6a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
     e6c:	7983      	ldrb	r3, [r0, #6]
     e6e:	79c2      	ldrb	r2, [r0, #7]
     e70:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
     e72:	8842      	ldrh	r2, [r0, #2]
     e74:	8884      	ldrh	r4, [r0, #4]
     e76:	4322      	orrs	r2, r4
     e78:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     e7a:	7842      	ldrb	r2, [r0, #1]
     e7c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
     e7e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
     e80:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     e82:	7803      	ldrb	r3, [r0, #0]
     e84:	2b04      	cmp	r3, #4
     e86:	d011      	beq.n	eac <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     e88:	2b20      	cmp	r3, #32
     e8a:	d10e      	bne.n	eaa <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     e8c:	7b03      	ldrb	r3, [r0, #12]
     e8e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     e90:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     e92:	4313      	orrs	r3, r2
     e94:	89c2      	ldrh	r2, [r0, #14]
     e96:	0412      	lsls	r2, r2, #16
     e98:	490d      	ldr	r1, [pc, #52]	; (ed0 <system_clock_source_dfll_set_config+0x78>)
     e9a:	400a      	ands	r2, r1
     e9c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     e9e:	4a0b      	ldr	r2, [pc, #44]	; (ecc <system_clock_source_dfll_set_config+0x74>)
     ea0:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
     ea2:	6811      	ldr	r1, [r2, #0]
     ea4:	4b0b      	ldr	r3, [pc, #44]	; (ed4 <system_clock_source_dfll_set_config+0x7c>)
     ea6:	430b      	orrs	r3, r1
     ea8:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
     eaa:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     eac:	7b03      	ldrb	r3, [r0, #12]
     eae:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     eb0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     eb2:	4313      	orrs	r3, r2
     eb4:	89c2      	ldrh	r2, [r0, #14]
     eb6:	0412      	lsls	r2, r2, #16
     eb8:	4905      	ldr	r1, [pc, #20]	; (ed0 <system_clock_source_dfll_set_config+0x78>)
     eba:	400a      	ands	r2, r1
     ebc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     ebe:	4a03      	ldr	r2, [pc, #12]	; (ecc <system_clock_source_dfll_set_config+0x74>)
     ec0:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     ec2:	6813      	ldr	r3, [r2, #0]
     ec4:	2104      	movs	r1, #4
     ec6:	430b      	orrs	r3, r1
     ec8:	6013      	str	r3, [r2, #0]
     eca:	e7ee      	b.n	eaa <system_clock_source_dfll_set_config+0x52>
     ecc:	20000520 	.word	0x20000520
     ed0:	03ff0000 	.word	0x03ff0000
     ed4:	00000424 	.word	0x00000424

00000ed8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     ed8:	2808      	cmp	r0, #8
     eda:	d803      	bhi.n	ee4 <system_clock_source_enable+0xc>
     edc:	0080      	lsls	r0, r0, #2
     ede:	4b25      	ldr	r3, [pc, #148]	; (f74 <system_clock_source_enable+0x9c>)
     ee0:	581b      	ldr	r3, [r3, r0]
     ee2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     ee4:	2017      	movs	r0, #23
     ee6:	e044      	b.n	f72 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     ee8:	4a23      	ldr	r2, [pc, #140]	; (f78 <system_clock_source_enable+0xa0>)
     eea:	6a13      	ldr	r3, [r2, #32]
     eec:	2102      	movs	r1, #2
     eee:	430b      	orrs	r3, r1
     ef0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     ef2:	2000      	movs	r0, #0
     ef4:	e03d      	b.n	f72 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     ef6:	4a20      	ldr	r2, [pc, #128]	; (f78 <system_clock_source_enable+0xa0>)
     ef8:	6993      	ldr	r3, [r2, #24]
     efa:	2102      	movs	r1, #2
     efc:	430b      	orrs	r3, r1
     efe:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     f00:	2000      	movs	r0, #0
		break;
     f02:	e036      	b.n	f72 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     f04:	4a1c      	ldr	r2, [pc, #112]	; (f78 <system_clock_source_enable+0xa0>)
     f06:	8a13      	ldrh	r3, [r2, #16]
     f08:	2102      	movs	r1, #2
     f0a:	430b      	orrs	r3, r1
     f0c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     f0e:	2000      	movs	r0, #0
		break;
     f10:	e02f      	b.n	f72 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     f12:	4a19      	ldr	r2, [pc, #100]	; (f78 <system_clock_source_enable+0xa0>)
     f14:	8a93      	ldrh	r3, [r2, #20]
     f16:	2102      	movs	r1, #2
     f18:	430b      	orrs	r3, r1
     f1a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     f1c:	2000      	movs	r0, #0
		break;
     f1e:	e028      	b.n	f72 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     f20:	4916      	ldr	r1, [pc, #88]	; (f7c <system_clock_source_enable+0xa4>)
     f22:	680b      	ldr	r3, [r1, #0]
     f24:	2202      	movs	r2, #2
     f26:	4313      	orrs	r3, r2
     f28:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     f2a:	4b13      	ldr	r3, [pc, #76]	; (f78 <system_clock_source_enable+0xa0>)
     f2c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f2e:	0019      	movs	r1, r3
     f30:	320e      	adds	r2, #14
     f32:	68cb      	ldr	r3, [r1, #12]
     f34:	421a      	tst	r2, r3
     f36:	d0fc      	beq.n	f32 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     f38:	4a10      	ldr	r2, [pc, #64]	; (f7c <system_clock_source_enable+0xa4>)
     f3a:	6891      	ldr	r1, [r2, #8]
     f3c:	4b0e      	ldr	r3, [pc, #56]	; (f78 <system_clock_source_enable+0xa0>)
     f3e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     f40:	6852      	ldr	r2, [r2, #4]
     f42:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     f44:	2200      	movs	r2, #0
     f46:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f48:	0019      	movs	r1, r3
     f4a:	3210      	adds	r2, #16
     f4c:	68cb      	ldr	r3, [r1, #12]
     f4e:	421a      	tst	r2, r3
     f50:	d0fc      	beq.n	f4c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     f52:	4b0a      	ldr	r3, [pc, #40]	; (f7c <system_clock_source_enable+0xa4>)
     f54:	681b      	ldr	r3, [r3, #0]
     f56:	b29b      	uxth	r3, r3
     f58:	4a07      	ldr	r2, [pc, #28]	; (f78 <system_clock_source_enable+0xa0>)
     f5a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     f5c:	2000      	movs	r0, #0
     f5e:	e008      	b.n	f72 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     f60:	4905      	ldr	r1, [pc, #20]	; (f78 <system_clock_source_enable+0xa0>)
     f62:	2244      	movs	r2, #68	; 0x44
     f64:	5c8b      	ldrb	r3, [r1, r2]
     f66:	2002      	movs	r0, #2
     f68:	4303      	orrs	r3, r0
     f6a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     f6c:	2000      	movs	r0, #0
		break;
     f6e:	e000      	b.n	f72 <system_clock_source_enable+0x9a>
		return STATUS_OK;
     f70:	2000      	movs	r0, #0
}
     f72:	4770      	bx	lr
     f74:	00003228 	.word	0x00003228
     f78:	40000800 	.word	0x40000800
     f7c:	20000520 	.word	0x20000520

00000f80 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     f80:	b510      	push	{r4, lr}
     f82:	b08a      	sub	sp, #40	; 0x28
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     f84:	22c2      	movs	r2, #194	; 0xc2
     f86:	00d2      	lsls	r2, r2, #3
     f88:	4b30      	ldr	r3, [pc, #192]	; (104c <system_clock_init+0xcc>)
     f8a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     f8c:	4a30      	ldr	r2, [pc, #192]	; (1050 <system_clock_init+0xd0>)
     f8e:	6853      	ldr	r3, [r2, #4]
     f90:	211e      	movs	r1, #30
     f92:	438b      	bics	r3, r1
     f94:	391a      	subs	r1, #26
     f96:	430b      	orrs	r3, r1
     f98:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     f9a:	2201      	movs	r2, #1
     f9c:	ab01      	add	r3, sp, #4
     f9e:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     fa0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     fa2:	b2e0      	uxtb	r0, r4
     fa4:	a901      	add	r1, sp, #4
     fa6:	f000 f923 	bl	11f0 <system_gclk_chan_set_config>
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     faa:	3401      	adds	r4, #1
     fac:	2c25      	cmp	r4, #37	; 0x25
     fae:	d1f8      	bne.n	fa2 <system_clock_init+0x22>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     fb0:	ab05      	add	r3, sp, #20
     fb2:	2200      	movs	r2, #0
     fb4:	2100      	movs	r1, #0
     fb6:	8059      	strh	r1, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     fb8:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     fba:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     fbc:	3120      	adds	r1, #32
     fbe:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
     fc0:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     fc2:	4b24      	ldr	r3, [pc, #144]	; (1054 <system_clock_init+0xd4>)
     fc4:	681b      	ldr	r3, [r3, #0]
     fc6:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
     fc8:	2b3f      	cmp	r3, #63	; 0x3f
     fca:	d03d      	beq.n	1048 <system_clock_init+0xc8>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
     fcc:	a805      	add	r0, sp, #20
     fce:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
     fd0:	2307      	movs	r3, #7
     fd2:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
     fd4:	3303      	adds	r3, #3
     fd6:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
     fd8:	4b1f      	ldr	r3, [pc, #124]	; (1058 <system_clock_init+0xd8>)
     fda:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
     fdc:	3bff      	subs	r3, #255	; 0xff
     fde:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
     fe0:	4b1e      	ldr	r3, [pc, #120]	; (105c <system_clock_init+0xdc>)
     fe2:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
     fe4:	f7ff ff38 	bl	e58 <system_clock_source_dfll_set_config>
	config->run_in_standby  = false;
     fe8:	a804      	add	r0, sp, #16
     fea:	2300      	movs	r3, #0
     fec:	7043      	strb	r3, [r0, #1]
	config->on_demand       = true;
     fee:	2201      	movs	r2, #1
     ff0:	7082      	strb	r2, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     ff2:	7003      	strb	r3, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     ff4:	f7ff ff12 	bl	e1c <system_clock_source_osc8m_set_config>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     ff8:	2006      	movs	r0, #6
     ffa:	f7ff ff6d 	bl	ed8 <system_clock_source_enable>


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     ffe:	f000 f831 	bl	1064 <system_gclk_init>
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1002:	2007      	movs	r0, #7
    1004:	f7ff ff68 	bl	ed8 <system_clock_source_enable>
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1008:	4910      	ldr	r1, [pc, #64]	; (104c <system_clock_init+0xcc>)
    100a:	2210      	movs	r2, #16
    100c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    100e:	421a      	tst	r2, r3
    1010:	d0fc      	beq.n	100c <system_clock_init+0x8c>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    1012:	4a0e      	ldr	r2, [pc, #56]	; (104c <system_clock_init+0xcc>)
    1014:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    1016:	2180      	movs	r1, #128	; 0x80
    1018:	430b      	orrs	r3, r1
    101a:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    101c:	4a10      	ldr	r2, [pc, #64]	; (1060 <system_clock_init+0xe0>)
    101e:	2300      	movs	r3, #0
    1020:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1022:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1024:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1026:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1028:	a901      	add	r1, sp, #4
    102a:	2201      	movs	r2, #1
    102c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    102e:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    1030:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1032:	3307      	adds	r3, #7
    1034:	700b      	strb	r3, [r1, #0]
    1036:	720a      	strb	r2, [r1, #8]
    1038:	2000      	movs	r0, #0
    103a:	f000 f825 	bl	1088 <system_gclk_gen_set_config>
    103e:	2000      	movs	r0, #0
    1040:	f000 f87a 	bl	1138 <system_gclk_gen_enable>
#endif
}
    1044:	b00a      	add	sp, #40	; 0x28
    1046:	bd10      	pop	{r4, pc}
		coarse = 0x1f;
    1048:	3b20      	subs	r3, #32
    104a:	e7bf      	b.n	fcc <system_clock_init+0x4c>
    104c:	40000800 	.word	0x40000800
    1050:	41004000 	.word	0x41004000
    1054:	00806024 	.word	0x00806024
    1058:	000001ff 	.word	0x000001ff
    105c:	ffffbb80 	.word	0xffffbb80
    1060:	40000400 	.word	0x40000400

00001064 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1064:	4a06      	ldr	r2, [pc, #24]	; (1080 <system_gclk_init+0x1c>)
    1066:	6993      	ldr	r3, [r2, #24]
    1068:	2108      	movs	r1, #8
    106a:	430b      	orrs	r3, r1
    106c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    106e:	2201      	movs	r2, #1
    1070:	4b04      	ldr	r3, [pc, #16]	; (1084 <system_gclk_init+0x20>)
    1072:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1074:	0019      	movs	r1, r3
    1076:	780b      	ldrb	r3, [r1, #0]
    1078:	4213      	tst	r3, r2
    107a:	d1fc      	bne.n	1076 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    107c:	4770      	bx	lr
    107e:	46c0      	nop			; (mov r8, r8)
    1080:	40000400 	.word	0x40000400
    1084:	40000c00 	.word	0x40000c00

00001088 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1088:	b570      	push	{r4, r5, r6, lr}
    108a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    108c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    108e:	780d      	ldrb	r5, [r1, #0]
    1090:	022d      	lsls	r5, r5, #8
    1092:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1094:	784b      	ldrb	r3, [r1, #1]
    1096:	2b00      	cmp	r3, #0
    1098:	d002      	beq.n	10a0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    109a:	2380      	movs	r3, #128	; 0x80
    109c:	02db      	lsls	r3, r3, #11
    109e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    10a0:	7a4b      	ldrb	r3, [r1, #9]
    10a2:	2b00      	cmp	r3, #0
    10a4:	d002      	beq.n	10ac <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    10a6:	2380      	movs	r3, #128	; 0x80
    10a8:	031b      	lsls	r3, r3, #12
    10aa:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    10ac:	6848      	ldr	r0, [r1, #4]
    10ae:	2801      	cmp	r0, #1
    10b0:	d910      	bls.n	10d4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    10b2:	1e43      	subs	r3, r0, #1
    10b4:	4218      	tst	r0, r3
    10b6:	d134      	bne.n	1122 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    10b8:	2802      	cmp	r0, #2
    10ba:	d930      	bls.n	111e <system_gclk_gen_set_config+0x96>
    10bc:	2302      	movs	r3, #2
    10be:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    10c0:	3201      	adds	r2, #1
						mask <<= 1) {
    10c2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    10c4:	4298      	cmp	r0, r3
    10c6:	d8fb      	bhi.n	10c0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    10c8:	0212      	lsls	r2, r2, #8
    10ca:	4332      	orrs	r2, r6
    10cc:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    10ce:	2380      	movs	r3, #128	; 0x80
    10d0:	035b      	lsls	r3, r3, #13
    10d2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    10d4:	7a0b      	ldrb	r3, [r1, #8]
    10d6:	2b00      	cmp	r3, #0
    10d8:	d002      	beq.n	10e0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    10da:	2380      	movs	r3, #128	; 0x80
    10dc:	039b      	lsls	r3, r3, #14
    10de:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10e0:	4a13      	ldr	r2, [pc, #76]	; (1130 <system_gclk_gen_set_config+0xa8>)
    10e2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    10e4:	b25b      	sxtb	r3, r3
    10e6:	2b00      	cmp	r3, #0
    10e8:	dbfb      	blt.n	10e2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    10ea:	f7ff fd55 	bl	b98 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    10ee:	4b11      	ldr	r3, [pc, #68]	; (1134 <system_gclk_gen_set_config+0xac>)
    10f0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10f2:	4a0f      	ldr	r2, [pc, #60]	; (1130 <system_gclk_gen_set_config+0xa8>)
    10f4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    10f6:	b25b      	sxtb	r3, r3
    10f8:	2b00      	cmp	r3, #0
    10fa:	dbfb      	blt.n	10f4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    10fc:	4b0c      	ldr	r3, [pc, #48]	; (1130 <system_gclk_gen_set_config+0xa8>)
    10fe:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1100:	001a      	movs	r2, r3
    1102:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1104:	b25b      	sxtb	r3, r3
    1106:	2b00      	cmp	r3, #0
    1108:	dbfb      	blt.n	1102 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    110a:	4a09      	ldr	r2, [pc, #36]	; (1130 <system_gclk_gen_set_config+0xa8>)
    110c:	6853      	ldr	r3, [r2, #4]
    110e:	2180      	movs	r1, #128	; 0x80
    1110:	0249      	lsls	r1, r1, #9
    1112:	400b      	ands	r3, r1
    1114:	431d      	orrs	r5, r3
    1116:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1118:	f7ff fd5e 	bl	bd8 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    111c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    111e:	2200      	movs	r2, #0
    1120:	e7d2      	b.n	10c8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1122:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1124:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1126:	2380      	movs	r3, #128	; 0x80
    1128:	029b      	lsls	r3, r3, #10
    112a:	431d      	orrs	r5, r3
    112c:	e7d2      	b.n	10d4 <system_gclk_gen_set_config+0x4c>
    112e:	46c0      	nop			; (mov r8, r8)
    1130:	40000c00 	.word	0x40000c00
    1134:	40000c08 	.word	0x40000c08

00001138 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1138:	b510      	push	{r4, lr}
    113a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    113c:	4a0b      	ldr	r2, [pc, #44]	; (116c <system_gclk_gen_enable+0x34>)
    113e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1140:	b25b      	sxtb	r3, r3
    1142:	2b00      	cmp	r3, #0
    1144:	dbfb      	blt.n	113e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1146:	f7ff fd27 	bl	b98 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    114a:	4b09      	ldr	r3, [pc, #36]	; (1170 <system_gclk_gen_enable+0x38>)
    114c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    114e:	4a07      	ldr	r2, [pc, #28]	; (116c <system_gclk_gen_enable+0x34>)
    1150:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1152:	b25b      	sxtb	r3, r3
    1154:	2b00      	cmp	r3, #0
    1156:	dbfb      	blt.n	1150 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1158:	4a04      	ldr	r2, [pc, #16]	; (116c <system_gclk_gen_enable+0x34>)
    115a:	6851      	ldr	r1, [r2, #4]
    115c:	2380      	movs	r3, #128	; 0x80
    115e:	025b      	lsls	r3, r3, #9
    1160:	430b      	orrs	r3, r1
    1162:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1164:	f7ff fd38 	bl	bd8 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1168:	bd10      	pop	{r4, pc}
    116a:	46c0      	nop			; (mov r8, r8)
    116c:	40000c00 	.word	0x40000c00
    1170:	40000c04 	.word	0x40000c04

00001174 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1174:	b510      	push	{r4, lr}
    1176:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1178:	f7ff fd0e 	bl	b98 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    117c:	4b05      	ldr	r3, [pc, #20]	; (1194 <system_gclk_chan_enable+0x20>)
    117e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1180:	4a05      	ldr	r2, [pc, #20]	; (1198 <system_gclk_chan_enable+0x24>)
    1182:	8853      	ldrh	r3, [r2, #2]
    1184:	2180      	movs	r1, #128	; 0x80
    1186:	01c9      	lsls	r1, r1, #7
    1188:	430b      	orrs	r3, r1
    118a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    118c:	f7ff fd24 	bl	bd8 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1190:	bd10      	pop	{r4, pc}
    1192:	46c0      	nop			; (mov r8, r8)
    1194:	40000c02 	.word	0x40000c02
    1198:	40000c00 	.word	0x40000c00

0000119c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    119c:	b510      	push	{r4, lr}
    119e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    11a0:	f7ff fcfa 	bl	b98 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    11a4:	4b0e      	ldr	r3, [pc, #56]	; (11e0 <system_gclk_chan_disable+0x44>)
    11a6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    11a8:	4a0e      	ldr	r2, [pc, #56]	; (11e4 <system_gclk_chan_disable+0x48>)
    11aa:	8853      	ldrh	r3, [r2, #2]
    11ac:	051b      	lsls	r3, r3, #20
    11ae:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    11b0:	8853      	ldrh	r3, [r2, #2]
    11b2:	490d      	ldr	r1, [pc, #52]	; (11e8 <system_gclk_chan_disable+0x4c>)
    11b4:	400b      	ands	r3, r1
    11b6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    11b8:	8853      	ldrh	r3, [r2, #2]
    11ba:	490c      	ldr	r1, [pc, #48]	; (11ec <system_gclk_chan_disable+0x50>)
    11bc:	400b      	ands	r3, r1
    11be:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    11c0:	0011      	movs	r1, r2
    11c2:	2280      	movs	r2, #128	; 0x80
    11c4:	01d2      	lsls	r2, r2, #7
    11c6:	884b      	ldrh	r3, [r1, #2]
    11c8:	4213      	tst	r3, r2
    11ca:	d1fc      	bne.n	11c6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    11cc:	4905      	ldr	r1, [pc, #20]	; (11e4 <system_gclk_chan_disable+0x48>)
    11ce:	884a      	ldrh	r2, [r1, #2]
    11d0:	0203      	lsls	r3, r0, #8
    11d2:	4805      	ldr	r0, [pc, #20]	; (11e8 <system_gclk_chan_disable+0x4c>)
    11d4:	4002      	ands	r2, r0
    11d6:	4313      	orrs	r3, r2
    11d8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    11da:	f7ff fcfd 	bl	bd8 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    11de:	bd10      	pop	{r4, pc}
    11e0:	40000c02 	.word	0x40000c02
    11e4:	40000c00 	.word	0x40000c00
    11e8:	fffff0ff 	.word	0xfffff0ff
    11ec:	ffffbfff 	.word	0xffffbfff

000011f0 <system_gclk_chan_set_config>:
{
    11f0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    11f2:	780c      	ldrb	r4, [r1, #0]
    11f4:	0224      	lsls	r4, r4, #8
    11f6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    11f8:	f7ff ffd0 	bl	119c <system_gclk_chan_disable>
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    11fc:	b2a4      	uxth	r4, r4
    11fe:	4b01      	ldr	r3, [pc, #4]	; (1204 <system_gclk_chan_set_config+0x14>)
    1200:	805c      	strh	r4, [r3, #2]
}
    1202:	bd10      	pop	{r4, pc}
    1204:	40000c00 	.word	0x40000c00

00001208 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1208:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    120a:	78d3      	ldrb	r3, [r2, #3]
    120c:	2b00      	cmp	r3, #0
    120e:	d135      	bne.n	127c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1210:	7813      	ldrb	r3, [r2, #0]
    1212:	2b80      	cmp	r3, #128	; 0x80
    1214:	d029      	beq.n	126a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1216:	061b      	lsls	r3, r3, #24
    1218:	2480      	movs	r4, #128	; 0x80
    121a:	0264      	lsls	r4, r4, #9
    121c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    121e:	7854      	ldrb	r4, [r2, #1]
    1220:	2502      	movs	r5, #2
    1222:	43ac      	bics	r4, r5
    1224:	d106      	bne.n	1234 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1226:	7894      	ldrb	r4, [r2, #2]
    1228:	2c00      	cmp	r4, #0
    122a:	d120      	bne.n	126e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    122c:	2480      	movs	r4, #128	; 0x80
    122e:	02a4      	lsls	r4, r4, #10
    1230:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1232:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1234:	7854      	ldrb	r4, [r2, #1]
    1236:	3c01      	subs	r4, #1
    1238:	2c01      	cmp	r4, #1
    123a:	d91c      	bls.n	1276 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    123c:	040d      	lsls	r5, r1, #16
    123e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1240:	24a0      	movs	r4, #160	; 0xa0
    1242:	05e4      	lsls	r4, r4, #23
    1244:	432c      	orrs	r4, r5
    1246:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1248:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    124a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    124c:	24d0      	movs	r4, #208	; 0xd0
    124e:	0624      	lsls	r4, r4, #24
    1250:	432c      	orrs	r4, r5
    1252:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1254:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1256:	78d4      	ldrb	r4, [r2, #3]
    1258:	2c00      	cmp	r4, #0
    125a:	d122      	bne.n	12a2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    125c:	035b      	lsls	r3, r3, #13
    125e:	d51c      	bpl.n	129a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1260:	7893      	ldrb	r3, [r2, #2]
    1262:	2b01      	cmp	r3, #1
    1264:	d01e      	beq.n	12a4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1266:	6141      	str	r1, [r0, #20]
    1268:	e017      	b.n	129a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    126a:	2300      	movs	r3, #0
    126c:	e7d7      	b.n	121e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    126e:	24c0      	movs	r4, #192	; 0xc0
    1270:	02e4      	lsls	r4, r4, #11
    1272:	4323      	orrs	r3, r4
    1274:	e7dd      	b.n	1232 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1276:	4c0d      	ldr	r4, [pc, #52]	; (12ac <_system_pinmux_config+0xa4>)
    1278:	4023      	ands	r3, r4
    127a:	e7df      	b.n	123c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    127c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    127e:	040c      	lsls	r4, r1, #16
    1280:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1282:	23a0      	movs	r3, #160	; 0xa0
    1284:	05db      	lsls	r3, r3, #23
    1286:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1288:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    128a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    128c:	23d0      	movs	r3, #208	; 0xd0
    128e:	061b      	lsls	r3, r3, #24
    1290:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1292:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1294:	78d3      	ldrb	r3, [r2, #3]
    1296:	2b00      	cmp	r3, #0
    1298:	d103      	bne.n	12a2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    129a:	7853      	ldrb	r3, [r2, #1]
    129c:	3b01      	subs	r3, #1
    129e:	2b01      	cmp	r3, #1
    12a0:	d902      	bls.n	12a8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    12a2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    12a4:	6181      	str	r1, [r0, #24]
    12a6:	e7f8      	b.n	129a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    12a8:	6081      	str	r1, [r0, #8]
}
    12aa:	e7fa      	b.n	12a2 <_system_pinmux_config+0x9a>
    12ac:	fffbffff 	.word	0xfffbffff

000012b0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    12b0:	b510      	push	{r4, lr}
    12b2:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    12b4:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    12b6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    12b8:	2900      	cmp	r1, #0
    12ba:	d104      	bne.n	12c6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    12bc:	0943      	lsrs	r3, r0, #5
    12be:	01db      	lsls	r3, r3, #7
    12c0:	4905      	ldr	r1, [pc, #20]	; (12d8 <system_pinmux_pin_set_config+0x28>)
    12c2:	468c      	mov	ip, r1
    12c4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    12c6:	241f      	movs	r4, #31
    12c8:	4020      	ands	r0, r4
    12ca:	2101      	movs	r1, #1
    12cc:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    12ce:	0018      	movs	r0, r3
    12d0:	f7ff ff9a 	bl	1208 <_system_pinmux_config>
}
    12d4:	bd10      	pop	{r4, pc}
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	41004400 	.word	0x41004400

000012dc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    12dc:	4770      	bx	lr

000012de <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    12de:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    12e0:	f7ff fe4e 	bl	f80 <system_clock_init>

	/* Initialize board hardware */
	system_board_init();
    12e4:	f7ff fc90 	bl	c08 <system_board_init>

	/* Initialize EVSYS hardware */
	_system_events_init();
    12e8:	f7ff fff8 	bl	12dc <_system_dummy_init>

	/* Initialize External hardware */
	_system_extint_init();
    12ec:	f7ff fd12 	bl	d14 <_system_extint_init>
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    12f0:	f7ff fff4 	bl	12dc <_system_dummy_init>
}
    12f4:	bd10      	pop	{r4, pc}
	...

000012f8 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    12f8:	b510      	push	{r4, lr}
    12fa:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    12fc:	ab03      	add	r3, sp, #12
    12fe:	2200      	movs	r2, #0
    1300:	701a      	strb	r2, [r3, #0]
    1302:	3203      	adds	r2, #3
    1304:	705a      	strb	r2, [r3, #1]
    1306:	3a01      	subs	r2, #1
    1308:	709a      	strb	r2, [r3, #2]
    130a:	3a01      	subs	r2, #1
    130c:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    130e:	4b27      	ldr	r3, [pc, #156]	; (13ac <udd_sleep_mode+0xb4>)
    1310:	781b      	ldrb	r3, [r3, #0]
    1312:	4283      	cmp	r3, r0
    1314:	d007      	beq.n	1326 <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    1316:	2800      	cmp	r0, #0
    1318:	d107      	bne.n	132a <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    131a:	4b24      	ldr	r3, [pc, #144]	; (13ac <udd_sleep_mode+0xb4>)
    131c:	781b      	ldrb	r3, [r3, #0]
    131e:	2b00      	cmp	r3, #0
    1320:	d123      	bne.n	136a <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    1322:	4b22      	ldr	r3, [pc, #136]	; (13ac <udd_sleep_mode+0xb4>)
    1324:	7018      	strb	r0, [r3, #0]
}
    1326:	b004      	add	sp, #16
    1328:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    132a:	ab03      	add	r3, sp, #12
	if(sleepmgr_locks[mode] >= 0xff) {
    132c:	5c1b      	ldrb	r3, [r3, r0]
    132e:	4a20      	ldr	r2, [pc, #128]	; (13b0 <udd_sleep_mode+0xb8>)
    1330:	5cd2      	ldrb	r2, [r2, r3]
    1332:	2aff      	cmp	r2, #255	; 0xff
    1334:	d100      	bne.n	1338 <udd_sleep_mode+0x40>
    1336:	e7fe      	b.n	1336 <udd_sleep_mode+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1338:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    133c:	4251      	negs	r1, r2
    133e:	414a      	adcs	r2, r1
    1340:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1342:	b672      	cpsid	i
    1344:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1348:	2100      	movs	r1, #0
    134a:	4a1a      	ldr	r2, [pc, #104]	; (13b4 <udd_sleep_mode+0xbc>)
    134c:	7011      	strb	r1, [r2, #0]
	return flags;
    134e:	9c01      	ldr	r4, [sp, #4]
	++sleepmgr_locks[mode];
    1350:	4917      	ldr	r1, [pc, #92]	; (13b0 <udd_sleep_mode+0xb8>)
    1352:	5cca      	ldrb	r2, [r1, r3]
    1354:	3201      	adds	r2, #1
    1356:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1358:	2c00      	cmp	r4, #0
    135a:	d0de      	beq.n	131a <udd_sleep_mode+0x22>
		cpu_irq_enable();
    135c:	2201      	movs	r2, #1
    135e:	4b15      	ldr	r3, [pc, #84]	; (13b4 <udd_sleep_mode+0xbc>)
    1360:	701a      	strb	r2, [r3, #0]
    1362:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1366:	b662      	cpsie	i
    1368:	e7d7      	b.n	131a <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    136a:	aa03      	add	r2, sp, #12
	if(sleepmgr_locks[mode] == 0) {
    136c:	5cd3      	ldrb	r3, [r2, r3]
    136e:	4a10      	ldr	r2, [pc, #64]	; (13b0 <udd_sleep_mode+0xb8>)
    1370:	5cd2      	ldrb	r2, [r2, r3]
    1372:	2a00      	cmp	r2, #0
    1374:	d100      	bne.n	1378 <udd_sleep_mode+0x80>
    1376:	e7fe      	b.n	1376 <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1378:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    137c:	4251      	negs	r1, r2
    137e:	414a      	adcs	r2, r1
    1380:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    1382:	b672      	cpsid	i
    1384:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1388:	2100      	movs	r1, #0
    138a:	4a0a      	ldr	r2, [pc, #40]	; (13b4 <udd_sleep_mode+0xbc>)
    138c:	7011      	strb	r1, [r2, #0]
	return flags;
    138e:	9c02      	ldr	r4, [sp, #8]
	--sleepmgr_locks[mode];
    1390:	4907      	ldr	r1, [pc, #28]	; (13b0 <udd_sleep_mode+0xb8>)
    1392:	5cca      	ldrb	r2, [r1, r3]
    1394:	3a01      	subs	r2, #1
    1396:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    1398:	2c00      	cmp	r4, #0
    139a:	d0c2      	beq.n	1322 <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    139c:	2201      	movs	r2, #1
    139e:	4b05      	ldr	r3, [pc, #20]	; (13b4 <udd_sleep_mode+0xbc>)
    13a0:	701a      	strb	r2, [r3, #0]
    13a2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    13a6:	b662      	cpsie	i
    13a8:	e7bb      	b.n	1322 <udd_sleep_mode+0x2a>
    13aa:	46c0      	nop			; (mov r8, r8)
    13ac:	20000630 	.word	0x20000630
    13b0:	20000650 	.word	0x20000650
    13b4:	200000dd 	.word	0x200000dd

000013b8 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    13b8:	0643      	lsls	r3, r0, #25
    13ba:	d00b      	beq.n	13d4 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    13bc:	230f      	movs	r3, #15
    13be:	4003      	ands	r3, r0
    13c0:	005b      	lsls	r3, r3, #1
    13c2:	09c0      	lsrs	r0, r0, #7
    13c4:	1818      	adds	r0, r3, r0
    13c6:	3802      	subs	r0, #2
    13c8:	0083      	lsls	r3, r0, #2
    13ca:	1818      	adds	r0, r3, r0
    13cc:	0080      	lsls	r0, r0, #2
    13ce:	4b02      	ldr	r3, [pc, #8]	; (13d8 <udd_ep_get_job+0x20>)
    13d0:	1818      	adds	r0, r3, r0
	}
}
    13d2:	4770      	bx	lr
		return NULL;
    13d4:	2000      	movs	r0, #0
    13d6:	e7fc      	b.n	13d2 <udd_ep_get_job+0x1a>
    13d8:	20000540 	.word	0x20000540

000013dc <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    13dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    13de:	46d6      	mov	lr, sl
    13e0:	464f      	mov	r7, r9
    13e2:	4646      	mov	r6, r8
    13e4:	b5c0      	push	{r6, r7, lr}
    13e6:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    13e8:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    13ea:	b26b      	sxtb	r3, r5
    13ec:	2b00      	cmp	r3, #0
    13ee:	db26      	blt.n	143e <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    13f0:	0028      	movs	r0, r5
    13f2:	f7ff ffe1 	bl	13b8 <udd_ep_get_job>
    13f6:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    13f8:	270f      	movs	r7, #15
    13fa:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    13fc:	8a03      	ldrh	r3, [r0, #16]
    13fe:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    1400:	464b      	mov	r3, r9
    1402:	881b      	ldrh	r3, [r3, #0]
    1404:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    1406:	7c83      	ldrb	r3, [r0, #18]
    1408:	075b      	lsls	r3, r3, #29
    140a:	d46a      	bmi.n	14e2 <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    140c:	68e3      	ldr	r3, [r4, #12]
    140e:	4453      	add	r3, sl
    1410:	001e      	movs	r6, r3
    1412:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    1414:	68a3      	ldr	r3, [r4, #8]
    1416:	429e      	cmp	r6, r3
    1418:	d800      	bhi.n	141c <udd_ep_transfer_process+0x40>
    141a:	e074      	b.n	1506 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    141c:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    141e:	7ca3      	ldrb	r3, [r4, #18]
    1420:	2201      	movs	r2, #1
    1422:	4393      	bics	r3, r2
    1424:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    1426:	6823      	ldr	r3, [r4, #0]
    1428:	2b00      	cmp	r3, #0
    142a:	d003      	beq.n	1434 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    142c:	68e1      	ldr	r1, [r4, #12]
    142e:	002a      	movs	r2, r5
    1430:	2000      	movs	r0, #0
    1432:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    1434:	bc1c      	pop	{r2, r3, r4}
    1436:	4690      	mov	r8, r2
    1438:	4699      	mov	r9, r3
    143a:	46a2      	mov	sl, r4
    143c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    143e:	0028      	movs	r0, r5
    1440:	f7ff ffba 	bl	13b8 <udd_ep_get_job>
    1444:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    1446:	270f      	movs	r7, #15
    1448:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    144a:	8a03      	ldrh	r3, [r0, #16]
    144c:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    144e:	464b      	mov	r3, r9
    1450:	885e      	ldrh	r6, [r3, #2]
    1452:	68c3      	ldr	r3, [r0, #12]
    1454:	469c      	mov	ip, r3
    1456:	4466      	add	r6, ip
    1458:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    145a:	6881      	ldr	r1, [r0, #8]
    145c:	428e      	cmp	r6, r1
    145e:	d025      	beq.n	14ac <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1460:	1b8d      	subs	r5, r1, r6
    1462:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1464:	4b41      	ldr	r3, [pc, #260]	; (156c <udd_ep_transfer_process+0x190>)
    1466:	429d      	cmp	r5, r3
    1468:	d906      	bls.n	1478 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    146a:	001d      	movs	r5, r3
    146c:	4641      	mov	r1, r8
    146e:	0018      	movs	r0, r3
    1470:	f001 fe7e 	bl	3170 <__aeabi_idivmod>
    1474:	1a6d      	subs	r5, r5, r1
    1476:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    1478:	7ca2      	ldrb	r2, [r4, #18]
    147a:	2300      	movs	r3, #0
    147c:	0792      	lsls	r2, r2, #30
    147e:	d507      	bpl.n	1490 <udd_ep_transfer_process+0xb4>
    1480:	4641      	mov	r1, r8
    1482:	0028      	movs	r0, r5
    1484:	f001 fd8a 	bl	2f9c <__aeabi_uidivmod>
    1488:	b289      	uxth	r1, r1
    148a:	424b      	negs	r3, r1
    148c:	414b      	adcs	r3, r1
    148e:	b2db      	uxtb	r3, r3
    1490:	005b      	lsls	r3, r3, #1
    1492:	7ca2      	ldrb	r2, [r4, #18]
    1494:	2102      	movs	r1, #2
    1496:	438a      	bics	r2, r1
    1498:	4313      	orrs	r3, r2
    149a:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    149c:	6862      	ldr	r2, [r4, #4]
    149e:	1992      	adds	r2, r2, r6
    14a0:	002b      	movs	r3, r5
    14a2:	0039      	movs	r1, r7
    14a4:	4832      	ldr	r0, [pc, #200]	; (1570 <udd_ep_transfer_process+0x194>)
    14a6:	f001 f82f 	bl	2508 <usb_device_endpoint_write_buffer_job>
    14aa:	e7c3      	b.n	1434 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    14ac:	7c83      	ldrb	r3, [r0, #18]
    14ae:	079b      	lsls	r3, r3, #30
    14b0:	d40b      	bmi.n	14ca <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    14b2:	7c83      	ldrb	r3, [r0, #18]
    14b4:	2201      	movs	r2, #1
    14b6:	4393      	bics	r3, r2
    14b8:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    14ba:	6803      	ldr	r3, [r0, #0]
    14bc:	2b00      	cmp	r3, #0
    14be:	d0b9      	beq.n	1434 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    14c0:	002a      	movs	r2, r5
    14c2:	0031      	movs	r1, r6
    14c4:	2000      	movs	r0, #0
    14c6:	4798      	blx	r3
    14c8:	e7b4      	b.n	1434 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    14ca:	7c83      	ldrb	r3, [r0, #18]
    14cc:	2202      	movs	r2, #2
    14ce:	4393      	bics	r3, r2
    14d0:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    14d2:	6842      	ldr	r2, [r0, #4]
    14d4:	1992      	adds	r2, r2, r6
    14d6:	2300      	movs	r3, #0
    14d8:	0039      	movs	r1, r7
    14da:	4825      	ldr	r0, [pc, #148]	; (1570 <udd_ep_transfer_process+0x194>)
    14dc:	f001 f814 	bl	2508 <usb_device_endpoint_write_buffer_job>
    14e0:	e7a8      	b.n	1434 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    14e2:	6843      	ldr	r3, [r0, #4]
    14e4:	68c2      	ldr	r2, [r0, #12]
    14e6:	4694      	mov	ip, r2
    14e8:	4463      	add	r3, ip
    14ea:	001e      	movs	r6, r3
    14ec:	4641      	mov	r1, r8
    14ee:	6880      	ldr	r0, [r0, #8]
    14f0:	f001 fd54 	bl	2f9c <__aeabi_uidivmod>
    14f4:	000a      	movs	r2, r1
    14f6:	1e7b      	subs	r3, r7, #1
    14f8:	019b      	lsls	r3, r3, #6
    14fa:	491e      	ldr	r1, [pc, #120]	; (1574 <udd_ep_transfer_process+0x198>)
    14fc:	1859      	adds	r1, r3, r1
    14fe:	0030      	movs	r0, r6
    1500:	f001 fe80 	bl	3204 <memcpy>
    1504:	e782      	b.n	140c <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    1506:	464a      	mov	r2, r9
    1508:	8892      	ldrh	r2, [r2, #4]
    150a:	4552      	cmp	r2, sl
    150c:	d000      	beq.n	1510 <udd_ep_transfer_process+0x134>
    150e:	e786      	b.n	141e <udd_ep_transfer_process+0x42>
    1510:	429e      	cmp	r6, r3
    1512:	d100      	bne.n	1516 <udd_ep_transfer_process+0x13a>
    1514:	e783      	b.n	141e <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1516:	1b9b      	subs	r3, r3, r6
    1518:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    151a:	4b14      	ldr	r3, [pc, #80]	; (156c <udd_ep_transfer_process+0x190>)
    151c:	429d      	cmp	r5, r3
    151e:	d916      	bls.n	154e <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    1520:	001d      	movs	r5, r3
    1522:	4641      	mov	r1, r8
    1524:	0018      	movs	r0, r3
    1526:	f001 fe23 	bl	3170 <__aeabi_idivmod>
    152a:	1a6b      	subs	r3, r5, r1
    152c:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    152e:	4598      	cmp	r8, r3
    1530:	d914      	bls.n	155c <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    1532:	7ca3      	ldrb	r3, [r4, #18]
    1534:	2204      	movs	r2, #4
    1536:	4313      	orrs	r3, r2
    1538:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    153a:	1e7a      	subs	r2, r7, #1
    153c:	0192      	lsls	r2, r2, #6
    153e:	4b0d      	ldr	r3, [pc, #52]	; (1574 <udd_ep_transfer_process+0x198>)
    1540:	18d2      	adds	r2, r2, r3
    1542:	4643      	mov	r3, r8
    1544:	0039      	movs	r1, r7
    1546:	480a      	ldr	r0, [pc, #40]	; (1570 <udd_ep_transfer_process+0x194>)
    1548:	f001 f808 	bl	255c <usb_device_endpoint_read_buffer_job>
    154c:	e772      	b.n	1434 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    154e:	4641      	mov	r1, r8
    1550:	0028      	movs	r0, r5
    1552:	f001 fd23 	bl	2f9c <__aeabi_uidivmod>
    1556:	1a6b      	subs	r3, r5, r1
    1558:	b29b      	uxth	r3, r3
    155a:	e7e8      	b.n	152e <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    155c:	6862      	ldr	r2, [r4, #4]
    155e:	1992      	adds	r2, r2, r6
    1560:	0039      	movs	r1, r7
    1562:	4803      	ldr	r0, [pc, #12]	; (1570 <udd_ep_transfer_process+0x194>)
    1564:	f000 fffa 	bl	255c <usb_device_endpoint_read_buffer_job>
    1568:	e764      	b.n	1434 <udd_ep_transfer_process+0x58>
    156a:	46c0      	nop			; (mov r8, r8)
    156c:	00001fff 	.word	0x00001fff
    1570:	20000818 	.word	0x20000818
    1574:	20000698 	.word	0x20000698

00001578 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    1578:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    157a:	2205      	movs	r2, #5
    157c:	4b05      	ldr	r3, [pc, #20]	; (1594 <udd_ctrl_stall_data+0x1c>)
    157e:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    1580:	4c05      	ldr	r4, [pc, #20]	; (1598 <udd_ctrl_stall_data+0x20>)
    1582:	2180      	movs	r1, #128	; 0x80
    1584:	0020      	movs	r0, r4
    1586:	f000 ff69 	bl	245c <usb_device_endpoint_set_halt>
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    158a:	2100      	movs	r1, #0
    158c:	0020      	movs	r0, r4
    158e:	f000 ff78 	bl	2482 <usb_device_endpoint_clear_halt>
}
    1592:	bd10      	pop	{r4, pc}
    1594:	2000053e 	.word	0x2000053e
    1598:	20000818 	.word	0x20000818

0000159c <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    159c:	b510      	push	{r4, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    159e:	4c08      	ldr	r4, [pc, #32]	; (15c0 <_usb_device_lpm_suspend+0x24>)
    15a0:	2106      	movs	r1, #6
    15a2:	0020      	movs	r0, r4
    15a4:	f000 fcfa 	bl	1f9c <usb_device_disable_callback>
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    15a8:	2104      	movs	r1, #4
    15aa:	0020      	movs	r0, r4
    15ac:	f000 fcf6 	bl	1f9c <usb_device_disable_callback>
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    15b0:	2102      	movs	r1, #2
    15b2:	0020      	movs	r0, r4
    15b4:	f000 fce2 	bl	1f7c <usb_device_enable_callback>

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    15b8:	2002      	movs	r0, #2
    15ba:	f7ff fe9d 	bl	12f8 <udd_sleep_mode>
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    15be:	bd10      	pop	{r4, pc}
    15c0:	20000818 	.word	0x20000818

000015c4 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    15c4:	b510      	push	{r4, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    15c6:	4b14      	ldr	r3, [pc, #80]	; (1618 <_usb_on_wakeup+0x54>)
    15c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    15ca:	069b      	lsls	r3, r3, #26
    15cc:	d41d      	bmi.n	160a <_usb_on_wakeup+0x46>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    15ce:	4912      	ldr	r1, [pc, #72]	; (1618 <_usb_on_wakeup+0x54>)
    15d0:	22d0      	movs	r2, #208	; 0xd0
    15d2:	68cb      	ldr	r3, [r1, #12]
    15d4:	4013      	ands	r3, r2
    15d6:	2bd0      	cmp	r3, #208	; 0xd0
    15d8:	d1fb      	bne.n	15d2 <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    15da:	4c10      	ldr	r4, [pc, #64]	; (161c <_usb_on_wakeup+0x58>)
    15dc:	2102      	movs	r1, #2
    15de:	0020      	movs	r0, r4
    15e0:	f000 fcdc 	bl	1f9c <usb_device_disable_callback>
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    15e4:	2104      	movs	r1, #4
    15e6:	0020      	movs	r0, r4
    15e8:	f000 fcc8 	bl	1f7c <usb_device_enable_callback>
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    15ec:	4a0c      	ldr	r2, [pc, #48]	; (1620 <_usb_on_wakeup+0x5c>)
    15ee:	2106      	movs	r1, #6
    15f0:	0020      	movs	r0, r4
    15f2:	f000 fcb1 	bl	1f58 <usb_device_register_callback>
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    15f6:	2106      	movs	r1, #6
    15f8:	0020      	movs	r0, r4
    15fa:	f000 fcbf 	bl	1f7c <usb_device_enable_callback>
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    15fe:	2003      	movs	r0, #3
    1600:	f7ff fe7a 	bl	12f8 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    1604:	f7fe fe82 	bl	30c <main_resume_action>
#endif
}
    1608:	bd10      	pop	{r4, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    160a:	4903      	ldr	r1, [pc, #12]	; (1618 <_usb_on_wakeup+0x54>)
    160c:	2210      	movs	r2, #16
    160e:	68cb      	ldr	r3, [r1, #12]
    1610:	421a      	tst	r2, r3
    1612:	d0fc      	beq.n	160e <_usb_on_wakeup+0x4a>
    1614:	e7e1      	b.n	15da <_usb_on_wakeup+0x16>
    1616:	46c0      	nop			; (mov r8, r8)
    1618:	40000800 	.word	0x40000800
    161c:	20000818 	.word	0x20000818
    1620:	0000159d 	.word	0x0000159d

00001624 <_usb_on_bus_reset>:
{
    1624:	b530      	push	{r4, r5, lr}
    1626:	b083      	sub	sp, #12
    1628:	0004      	movs	r4, r0
	udc_reset();
    162a:	f7ff f867 	bl	6fc <udc_reset>
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    162e:	2380      	movs	r3, #128	; 0x80
    1630:	6822      	ldr	r2, [r4, #0]
    1632:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    1634:	ad01      	add	r5, sp, #4
    1636:	0028      	movs	r0, r5
    1638:	f000 fdb6 	bl	21a8 <usb_device_endpoint_get_config_defaults>
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    163c:	2303      	movs	r3, #3
    163e:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    1640:	0029      	movs	r1, r5
    1642:	0020      	movs	r0, r4
    1644:	f000 fdb8 	bl	21b8 <usb_device_endpoint_set_config>
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    1648:	4918      	ldr	r1, [pc, #96]	; (16ac <_usb_on_bus_reset+0x88>)
    164a:	0020      	movs	r0, r4
    164c:	f000 ffae 	bl	25ac <usb_device_endpoint_setup_buffer_job>
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    1650:	4b17      	ldr	r3, [pc, #92]	; (16b0 <_usb_on_bus_reset+0x8c>)
    1652:	2202      	movs	r2, #2
    1654:	2100      	movs	r1, #0
    1656:	0020      	movs	r0, r4
    1658:	f000 fcae 	bl	1fb8 <usb_device_endpoint_register_callback>
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    165c:	4b15      	ldr	r3, [pc, #84]	; (16b4 <_usb_on_bus_reset+0x90>)
    165e:	2200      	movs	r2, #0
    1660:	2100      	movs	r1, #0
    1662:	0020      	movs	r0, r4
    1664:	f000 fca8 	bl	1fb8 <usb_device_endpoint_register_callback>
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    1668:	4b13      	ldr	r3, [pc, #76]	; (16b8 <_usb_on_bus_reset+0x94>)
    166a:	2201      	movs	r2, #1
    166c:	2100      	movs	r1, #0
    166e:	0020      	movs	r0, r4
    1670:	f000 fca2 	bl	1fb8 <usb_device_endpoint_register_callback>
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    1674:	2202      	movs	r2, #2
    1676:	2100      	movs	r1, #0
    1678:	0020      	movs	r0, r4
    167a:	f000 fcc5 	bl	2008 <usb_device_endpoint_enable_callback>
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    167e:	2200      	movs	r2, #0
    1680:	2100      	movs	r1, #0
    1682:	0020      	movs	r0, r4
    1684:	f000 fcc0 	bl	2008 <usb_device_endpoint_enable_callback>
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    1688:	2201      	movs	r2, #1
    168a:	2100      	movs	r1, #0
    168c:	0020      	movs	r0, r4
    168e:	f000 fcbb 	bl	2008 <usb_device_endpoint_enable_callback>
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    1692:	6821      	ldr	r1, [r4, #0]
    1694:	890b      	ldrh	r3, [r1, #8]
    1696:	4a09      	ldr	r2, [pc, #36]	; (16bc <_usb_on_bus_reset+0x98>)
    1698:	401a      	ands	r2, r3
    169a:	2380      	movs	r3, #128	; 0x80
    169c:	00db      	lsls	r3, r3, #3
    169e:	4313      	orrs	r3, r2
    16a0:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    16a2:	2200      	movs	r2, #0
    16a4:	4b06      	ldr	r3, [pc, #24]	; (16c0 <_usb_on_bus_reset+0x9c>)
    16a6:	701a      	strb	r2, [r3, #0]
}
    16a8:	b003      	add	sp, #12
    16aa:	bd30      	pop	{r4, r5, pc}
    16ac:	20000998 	.word	0x20000998
    16b0:	000017e5 	.word	0x000017e5
    16b4:	00001aa1 	.word	0x00001aa1
    16b8:	000016f9 	.word	0x000016f9
    16bc:	fffff3ff 	.word	0xfffff3ff
    16c0:	2000053e 	.word	0x2000053e

000016c4 <udd_ctrl_send_zlp_in>:
{
    16c4:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    16c6:	2203      	movs	r2, #3
    16c8:	4b07      	ldr	r3, [pc, #28]	; (16e8 <udd_ctrl_send_zlp_in+0x24>)
    16ca:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    16cc:	4c07      	ldr	r4, [pc, #28]	; (16ec <udd_ctrl_send_zlp_in+0x28>)
    16ce:	4908      	ldr	r1, [pc, #32]	; (16f0 <udd_ctrl_send_zlp_in+0x2c>)
    16d0:	0020      	movs	r0, r4
    16d2:	f000 ff6b 	bl	25ac <usb_device_endpoint_setup_buffer_job>
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    16d6:	4b07      	ldr	r3, [pc, #28]	; (16f4 <udd_ctrl_send_zlp_in+0x30>)
    16d8:	689a      	ldr	r2, [r3, #8]
    16da:	2300      	movs	r3, #0
    16dc:	2100      	movs	r1, #0
    16de:	0020      	movs	r0, r4
    16e0:	f000 ff12 	bl	2508 <usb_device_endpoint_write_buffer_job>
}
    16e4:	bd10      	pop	{r4, pc}
    16e6:	46c0      	nop			; (mov r8, r8)
    16e8:	2000053e 	.word	0x2000053e
    16ec:	20000818 	.word	0x20000818
    16f0:	20000998 	.word	0x20000998
    16f4:	20000980 	.word	0x20000980

000016f8 <_usb_ep0_on_tansfer_fail>:
{
    16f8:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    16fa:	7989      	ldrb	r1, [r1, #6]
    16fc:	b24b      	sxtb	r3, r1
    16fe:	2b00      	cmp	r3, #0
    1700:	db06      	blt.n	1710 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1702:	4b0e      	ldr	r3, [pc, #56]	; (173c <_usb_ep0_on_tansfer_fail+0x44>)
    1704:	781b      	ldrb	r3, [r3, #0]
    1706:	2b02      	cmp	r3, #2
    1708:	d00f      	beq.n	172a <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    170a:	2b03      	cmp	r3, #3
    170c:	d011      	beq.n	1732 <_usb_ep0_on_tansfer_fail+0x3a>
}
    170e:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1710:	4b0a      	ldr	r3, [pc, #40]	; (173c <_usb_ep0_on_tansfer_fail+0x44>)
    1712:	781b      	ldrb	r3, [r3, #0]
    1714:	2b01      	cmp	r3, #1
    1716:	d005      	beq.n	1724 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1718:	2b04      	cmp	r3, #4
    171a:	d1f8      	bne.n	170e <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    171c:	4808      	ldr	r0, [pc, #32]	; (1740 <_usb_ep0_on_tansfer_fail+0x48>)
    171e:	f000 fe9d 	bl	245c <usb_device_endpoint_set_halt>
    1722:	e7f4      	b.n	170e <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    1724:	f7ff ffce 	bl	16c4 <udd_ctrl_send_zlp_in>
    1728:	e7f1      	b.n	170e <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    172a:	2204      	movs	r2, #4
    172c:	4b03      	ldr	r3, [pc, #12]	; (173c <_usb_ep0_on_tansfer_fail+0x44>)
    172e:	701a      	strb	r2, [r3, #0]
    1730:	e7ed      	b.n	170e <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    1732:	4803      	ldr	r0, [pc, #12]	; (1740 <_usb_ep0_on_tansfer_fail+0x48>)
    1734:	f000 fe92 	bl	245c <usb_device_endpoint_set_halt>
}
    1738:	e7e9      	b.n	170e <_usb_ep0_on_tansfer_fail+0x16>
    173a:	46c0      	nop			; (mov r8, r8)
    173c:	2000053e 	.word	0x2000053e
    1740:	20000818 	.word	0x20000818

00001744 <udd_ctrl_in_sent>:
{
    1744:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1746:	4b20      	ldr	r3, [pc, #128]	; (17c8 <udd_ctrl_in_sent+0x84>)
    1748:	881b      	ldrh	r3, [r3, #0]
    174a:	4a20      	ldr	r2, [pc, #128]	; (17cc <udd_ctrl_in_sent+0x88>)
    174c:	8994      	ldrh	r4, [r2, #12]
    174e:	1ae4      	subs	r4, r4, r3
    1750:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    1752:	2c00      	cmp	r4, #0
    1754:	d118      	bne.n	1788 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1756:	4a1e      	ldr	r2, [pc, #120]	; (17d0 <udd_ctrl_in_sent+0x8c>)
    1758:	8811      	ldrh	r1, [r2, #0]
    175a:	185b      	adds	r3, r3, r1
    175c:	b29b      	uxth	r3, r3
    175e:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    1760:	4a1a      	ldr	r2, [pc, #104]	; (17cc <udd_ctrl_in_sent+0x88>)
    1762:	88d2      	ldrh	r2, [r2, #6]
    1764:	429a      	cmp	r2, r3
    1766:	d023      	beq.n	17b0 <udd_ctrl_in_sent+0x6c>
    1768:	4b1a      	ldr	r3, [pc, #104]	; (17d4 <udd_ctrl_in_sent+0x90>)
    176a:	781b      	ldrb	r3, [r3, #0]
    176c:	2b00      	cmp	r3, #0
    176e:	d11f      	bne.n	17b0 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    1770:	4b16      	ldr	r3, [pc, #88]	; (17cc <udd_ctrl_in_sent+0x88>)
    1772:	695b      	ldr	r3, [r3, #20]
    1774:	2b00      	cmp	r3, #0
    1776:	d023      	beq.n	17c0 <udd_ctrl_in_sent+0x7c>
    1778:	4798      	blx	r3
    177a:	2800      	cmp	r0, #0
    177c:	d020      	beq.n	17c0 <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    177e:	2200      	movs	r2, #0
    1780:	4b11      	ldr	r3, [pc, #68]	; (17c8 <udd_ctrl_in_sent+0x84>)
    1782:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    1784:	4b11      	ldr	r3, [pc, #68]	; (17cc <udd_ctrl_in_sent+0x88>)
    1786:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    1788:	2c3f      	cmp	r4, #63	; 0x3f
    178a:	d919      	bls.n	17c0 <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    178c:	2200      	movs	r2, #0
    178e:	4b11      	ldr	r3, [pc, #68]	; (17d4 <udd_ctrl_in_sent+0x90>)
    1790:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    1792:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    1794:	4d0c      	ldr	r5, [pc, #48]	; (17c8 <udd_ctrl_in_sent+0x84>)
    1796:	882b      	ldrh	r3, [r5, #0]
    1798:	4a0c      	ldr	r2, [pc, #48]	; (17cc <udd_ctrl_in_sent+0x88>)
    179a:	6892      	ldr	r2, [r2, #8]
    179c:	18d2      	adds	r2, r2, r3
    179e:	0023      	movs	r3, r4
    17a0:	2100      	movs	r1, #0
    17a2:	480d      	ldr	r0, [pc, #52]	; (17d8 <udd_ctrl_in_sent+0x94>)
    17a4:	f000 feb0 	bl	2508 <usb_device_endpoint_write_buffer_job>
	udd_ctrl_payload_nb_trans += nb_remain;
    17a8:	882b      	ldrh	r3, [r5, #0]
    17aa:	18e4      	adds	r4, r4, r3
    17ac:	802c      	strh	r4, [r5, #0]
}
    17ae:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    17b0:	2204      	movs	r2, #4
    17b2:	4b0a      	ldr	r3, [pc, #40]	; (17dc <udd_ctrl_in_sent+0x98>)
    17b4:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    17b6:	490a      	ldr	r1, [pc, #40]	; (17e0 <udd_ctrl_in_sent+0x9c>)
    17b8:	4807      	ldr	r0, [pc, #28]	; (17d8 <udd_ctrl_in_sent+0x94>)
    17ba:	f000 fef7 	bl	25ac <usb_device_endpoint_setup_buffer_job>
			return;
    17be:	e7f6      	b.n	17ae <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    17c0:	2201      	movs	r2, #1
    17c2:	4b04      	ldr	r3, [pc, #16]	; (17d4 <udd_ctrl_in_sent+0x90>)
    17c4:	701a      	strb	r2, [r3, #0]
    17c6:	e7e5      	b.n	1794 <udd_ctrl_in_sent+0x50>
    17c8:	2000053a 	.word	0x2000053a
    17cc:	20000980 	.word	0x20000980
    17d0:	2000053c 	.word	0x2000053c
    17d4:	20000538 	.word	0x20000538
    17d8:	20000818 	.word	0x20000818
    17dc:	2000053e 	.word	0x2000053e
    17e0:	20000998 	.word	0x20000998

000017e4 <_usb_ep0_on_setup>:
{
    17e4:	b510      	push	{r4, lr}
    17e6:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    17e8:	4b2c      	ldr	r3, [pc, #176]	; (189c <_usb_ep0_on_setup+0xb8>)
    17ea:	781b      	ldrb	r3, [r3, #0]
    17ec:	2b00      	cmp	r3, #0
    17ee:	d007      	beq.n	1800 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    17f0:	4b2b      	ldr	r3, [pc, #172]	; (18a0 <_usb_ep0_on_setup+0xbc>)
    17f2:	691b      	ldr	r3, [r3, #16]
    17f4:	2b00      	cmp	r3, #0
    17f6:	d000      	beq.n	17fa <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    17f8:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    17fa:	2200      	movs	r2, #0
    17fc:	4b27      	ldr	r3, [pc, #156]	; (189c <_usb_ep0_on_setup+0xb8>)
    17fe:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    1800:	8823      	ldrh	r3, [r4, #0]
    1802:	2b08      	cmp	r3, #8
    1804:	d002      	beq.n	180c <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    1806:	f7ff feb7 	bl	1578 <udd_ctrl_stall_data>
}
    180a:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    180c:	4a24      	ldr	r2, [pc, #144]	; (18a0 <_usb_ep0_on_setup+0xbc>)
    180e:	4b25      	ldr	r3, [pc, #148]	; (18a4 <_usb_ep0_on_setup+0xc0>)
    1810:	7819      	ldrb	r1, [r3, #0]
    1812:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    1814:	7859      	ldrb	r1, [r3, #1]
    1816:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    1818:	78d8      	ldrb	r0, [r3, #3]
    181a:	0200      	lsls	r0, r0, #8
    181c:	7899      	ldrb	r1, [r3, #2]
    181e:	1809      	adds	r1, r1, r0
    1820:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    1822:	7958      	ldrb	r0, [r3, #5]
    1824:	0200      	lsls	r0, r0, #8
    1826:	7919      	ldrb	r1, [r3, #4]
    1828:	1809      	adds	r1, r1, r0
    182a:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    182c:	79d9      	ldrb	r1, [r3, #7]
    182e:	0209      	lsls	r1, r1, #8
    1830:	799b      	ldrb	r3, [r3, #6]
    1832:	185b      	adds	r3, r3, r1
    1834:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    1836:	f7fe ffa7 	bl	788 <udc_process_setup>
    183a:	2800      	cmp	r0, #0
    183c:	d016      	beq.n	186c <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    183e:	4b18      	ldr	r3, [pc, #96]	; (18a0 <_usb_ep0_on_setup+0xbc>)
    1840:	781b      	ldrb	r3, [r3, #0]
    1842:	2b7f      	cmp	r3, #127	; 0x7f
    1844:	d815      	bhi.n	1872 <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    1846:	4b16      	ldr	r3, [pc, #88]	; (18a0 <_usb_ep0_on_setup+0xbc>)
    1848:	88db      	ldrh	r3, [r3, #6]
    184a:	2b00      	cmp	r3, #0
    184c:	d022      	beq.n	1894 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    184e:	2300      	movs	r3, #0
    1850:	4a15      	ldr	r2, [pc, #84]	; (18a8 <_usb_ep0_on_setup+0xc4>)
    1852:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    1854:	4a15      	ldr	r2, [pc, #84]	; (18ac <_usb_ep0_on_setup+0xc8>)
    1856:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    1858:	2201      	movs	r2, #1
    185a:	4b10      	ldr	r3, [pc, #64]	; (189c <_usb_ep0_on_setup+0xb8>)
    185c:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    185e:	2340      	movs	r3, #64	; 0x40
    1860:	4a10      	ldr	r2, [pc, #64]	; (18a4 <_usb_ep0_on_setup+0xc0>)
    1862:	2100      	movs	r1, #0
    1864:	4812      	ldr	r0, [pc, #72]	; (18b0 <_usb_ep0_on_setup+0xcc>)
    1866:	f000 fe79 	bl	255c <usb_device_endpoint_read_buffer_job>
    186a:	e7ce      	b.n	180a <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    186c:	f7ff fe84 	bl	1578 <udd_ctrl_stall_data>
			return;
    1870:	e7cb      	b.n	180a <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    1872:	2300      	movs	r3, #0
    1874:	4a0c      	ldr	r2, [pc, #48]	; (18a8 <_usb_ep0_on_setup+0xc4>)
    1876:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    1878:	4a0c      	ldr	r2, [pc, #48]	; (18ac <_usb_ep0_on_setup+0xc8>)
    187a:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    187c:	2202      	movs	r2, #2
    187e:	4b07      	ldr	r3, [pc, #28]	; (189c <_usb_ep0_on_setup+0xb8>)
    1880:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1882:	2340      	movs	r3, #64	; 0x40
    1884:	4a07      	ldr	r2, [pc, #28]	; (18a4 <_usb_ep0_on_setup+0xc0>)
    1886:	2100      	movs	r1, #0
    1888:	4809      	ldr	r0, [pc, #36]	; (18b0 <_usb_ep0_on_setup+0xcc>)
    188a:	f000 fe67 	bl	255c <usb_device_endpoint_read_buffer_job>
			udd_ctrl_in_sent();
    188e:	f7ff ff59 	bl	1744 <udd_ctrl_in_sent>
    1892:	e7ba      	b.n	180a <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    1894:	f7ff ff16 	bl	16c4 <udd_ctrl_send_zlp_in>
				return;
    1898:	e7b7      	b.n	180a <_usb_ep0_on_setup+0x26>
    189a:	46c0      	nop			; (mov r8, r8)
    189c:	2000053e 	.word	0x2000053e
    18a0:	20000980 	.word	0x20000980
    18a4:	20000998 	.word	0x20000998
    18a8:	2000053c 	.word	0x2000053c
    18ac:	2000053a 	.word	0x2000053a
    18b0:	20000818 	.word	0x20000818

000018b4 <_usb_on_sof_notify>:
{
    18b4:	b510      	push	{r4, lr}
	udc_sof_notify();
    18b6:	f7fe ff45 	bl	744 <udc_sof_notify>
	UDC_SOF_EVENT();
    18ba:	f7fe fd2b 	bl	314 <main_sof_action>
}
    18be:	bd10      	pop	{r4, pc}

000018c0 <_usb_on_suspend>:
{
    18c0:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    18c2:	4c07      	ldr	r4, [pc, #28]	; (18e0 <_usb_on_suspend+0x20>)
    18c4:	2104      	movs	r1, #4
    18c6:	0020      	movs	r0, r4
    18c8:	f000 fb68 	bl	1f9c <usb_device_disable_callback>
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    18cc:	2102      	movs	r1, #2
    18ce:	0020      	movs	r0, r4
    18d0:	f000 fb54 	bl	1f7c <usb_device_enable_callback>
	udd_sleep_mode(UDD_STATE_SUSPEND);
    18d4:	2001      	movs	r0, #1
    18d6:	f7ff fd0f 	bl	12f8 <udd_sleep_mode>
	UDC_SUSPEND_EVENT();
    18da:	f7fe fd13 	bl	304 <main_suspend_action>
}
    18de:	bd10      	pop	{r4, pc}
    18e0:	20000818 	.word	0x20000818

000018e4 <udd_ep_abort>:
{
    18e4:	b510      	push	{r4, lr}
    18e6:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    18e8:	0001      	movs	r1, r0
    18ea:	480a      	ldr	r0, [pc, #40]	; (1914 <udd_ep_abort+0x30>)
    18ec:	f000 fd86 	bl	23fc <usb_device_endpoint_abort_job>
	ptr_job = udd_ep_get_job(ep);
    18f0:	0020      	movs	r0, r4
    18f2:	f7ff fd61 	bl	13b8 <udd_ep_get_job>
	if (!ptr_job->busy) {
    18f6:	7c83      	ldrb	r3, [r0, #18]
    18f8:	07db      	lsls	r3, r3, #31
    18fa:	d50a      	bpl.n	1912 <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    18fc:	7c83      	ldrb	r3, [r0, #18]
    18fe:	2201      	movs	r2, #1
    1900:	4393      	bics	r3, r2
    1902:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    1904:	6803      	ldr	r3, [r0, #0]
    1906:	2b00      	cmp	r3, #0
    1908:	d003      	beq.n	1912 <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    190a:	68c1      	ldr	r1, [r0, #12]
    190c:	0022      	movs	r2, r4
    190e:	2001      	movs	r0, #1
    1910:	4798      	blx	r3
}
    1912:	bd10      	pop	{r4, pc}
    1914:	20000818 	.word	0x20000818

00001918 <udd_is_high_speed>:
}
    1918:	2000      	movs	r0, #0
    191a:	4770      	bx	lr

0000191c <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    191c:	4b02      	ldr	r3, [pc, #8]	; (1928 <udd_get_frame_number+0xc>)
    191e:	681b      	ldr	r3, [r3, #0]
    1920:	8a18      	ldrh	r0, [r3, #16]
    1922:	0480      	lsls	r0, r0, #18
    1924:	0d40      	lsrs	r0, r0, #21
}
    1926:	4770      	bx	lr
    1928:	20000818 	.word	0x20000818

0000192c <udd_ep_free>:
{
    192c:	b570      	push	{r4, r5, r6, lr}
    192e:	b082      	sub	sp, #8
    1930:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    1932:	ad01      	add	r5, sp, #4
    1934:	0028      	movs	r0, r5
    1936:	f000 fc37 	bl	21a8 <usb_device_endpoint_get_config_defaults>
	udd_ep_abort(ep);
    193a:	0020      	movs	r0, r4
    193c:	f7ff ffd2 	bl	18e4 <udd_ep_abort>
	config_ep.ep_address = ep;
    1940:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    1942:	2300      	movs	r3, #0
    1944:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    1946:	4e09      	ldr	r6, [pc, #36]	; (196c <udd_ep_free+0x40>)
    1948:	0029      	movs	r1, r5
    194a:	0030      	movs	r0, r6
    194c:	f000 fc34 	bl	21b8 <usb_device_endpoint_set_config>
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1950:	210f      	movs	r1, #15
    1952:	4021      	ands	r1, r4
    1954:	2200      	movs	r2, #0
    1956:	0030      	movs	r0, r6
    1958:	f000 fb42 	bl	1fe0 <usb_device_endpoint_unregister_callback>
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    195c:	2200      	movs	r2, #0
    195e:	0021      	movs	r1, r4
    1960:	0030      	movs	r0, r6
    1962:	f000 fbb9 	bl	20d8 <usb_device_endpoint_disable_callback>
}
    1966:	b002      	add	sp, #8
    1968:	bd70      	pop	{r4, r5, r6, pc}
    196a:	46c0      	nop			; (mov r8, r8)
    196c:	20000818 	.word	0x20000818

00001970 <udd_ep_alloc>:
{
    1970:	b5f0      	push	{r4, r5, r6, r7, lr}
    1972:	b083      	sub	sp, #12
    1974:	0005      	movs	r5, r0
    1976:	000f      	movs	r7, r1
    1978:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    197a:	ae01      	add	r6, sp, #4
    197c:	0030      	movs	r0, r6
    197e:	f000 fc13 	bl	21a8 <usb_device_endpoint_get_config_defaults>
	config_ep.ep_address = ep;
    1982:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    1984:	2c08      	cmp	r4, #8
    1986:	d813      	bhi.n	19b0 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    1988:	2200      	movs	r2, #0
    198a:	ab01      	add	r3, sp, #4
    198c:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    198e:	0028      	movs	r0, r5
    1990:	f7ff fd12 	bl	13b8 <udd_ep_get_job>
	ptr_job->ep_size = MaxEndpointSize;
    1994:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    1996:	2103      	movs	r1, #3
    1998:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    199a:	2901      	cmp	r1, #1
    199c:	d038      	beq.n	1a10 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    199e:	2902      	cmp	r1, #2
    19a0:	d043      	beq.n	1a2a <udd_ep_alloc+0xba>
		return false;
    19a2:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    19a4:	2903      	cmp	r1, #3
    19a6:	d13d      	bne.n	1a24 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    19a8:	2204      	movs	r2, #4
    19aa:	ab01      	add	r3, sp, #4
    19ac:	70da      	strb	r2, [r3, #3]
    19ae:	e032      	b.n	1a16 <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    19b0:	2c10      	cmp	r4, #16
    19b2:	d803      	bhi.n	19bc <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    19b4:	2201      	movs	r2, #1
    19b6:	ab01      	add	r3, sp, #4
    19b8:	705a      	strb	r2, [r3, #1]
    19ba:	e7e8      	b.n	198e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    19bc:	2c20      	cmp	r4, #32
    19be:	d803      	bhi.n	19c8 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    19c0:	2202      	movs	r2, #2
    19c2:	ab01      	add	r3, sp, #4
    19c4:	705a      	strb	r2, [r3, #1]
    19c6:	e7e2      	b.n	198e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    19c8:	2c40      	cmp	r4, #64	; 0x40
    19ca:	d803      	bhi.n	19d4 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    19cc:	2203      	movs	r2, #3
    19ce:	ab01      	add	r3, sp, #4
    19d0:	705a      	strb	r2, [r3, #1]
    19d2:	e7dc      	b.n	198e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    19d4:	2c80      	cmp	r4, #128	; 0x80
    19d6:	d803      	bhi.n	19e0 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    19d8:	2204      	movs	r2, #4
    19da:	ab01      	add	r3, sp, #4
    19dc:	705a      	strb	r2, [r3, #1]
    19de:	e7d6      	b.n	198e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    19e0:	2380      	movs	r3, #128	; 0x80
    19e2:	005b      	lsls	r3, r3, #1
    19e4:	429c      	cmp	r4, r3
    19e6:	d803      	bhi.n	19f0 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    19e8:	2205      	movs	r2, #5
    19ea:	ab01      	add	r3, sp, #4
    19ec:	705a      	strb	r2, [r3, #1]
    19ee:	e7ce      	b.n	198e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    19f0:	2380      	movs	r3, #128	; 0x80
    19f2:	009b      	lsls	r3, r3, #2
    19f4:	429c      	cmp	r4, r3
    19f6:	d803      	bhi.n	1a00 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    19f8:	2206      	movs	r2, #6
    19fa:	ab01      	add	r3, sp, #4
    19fc:	705a      	strb	r2, [r3, #1]
    19fe:	e7c6      	b.n	198e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    1a00:	4a16      	ldr	r2, [pc, #88]	; (1a5c <udd_ep_alloc+0xec>)
		return false;
    1a02:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    1a04:	4294      	cmp	r4, r2
    1a06:	d80d      	bhi.n	1a24 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    1a08:	2207      	movs	r2, #7
    1a0a:	ab01      	add	r3, sp, #4
    1a0c:	705a      	strb	r2, [r3, #1]
    1a0e:	e7be      	b.n	198e <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    1a10:	2202      	movs	r2, #2
    1a12:	ab01      	add	r3, sp, #4
    1a14:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    1a16:	a901      	add	r1, sp, #4
    1a18:	4811      	ldr	r0, [pc, #68]	; (1a60 <udd_ep_alloc+0xf0>)
    1a1a:	f000 fbcd 	bl	21b8 <usb_device_endpoint_set_config>
		return false;
    1a1e:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    1a20:	2800      	cmp	r0, #0
    1a22:	d006      	beq.n	1a32 <udd_ep_alloc+0xc2>
}
    1a24:	0018      	movs	r0, r3
    1a26:	b003      	add	sp, #12
    1a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    1a2a:	2203      	movs	r2, #3
    1a2c:	ab01      	add	r3, sp, #4
    1a2e:	70da      	strb	r2, [r3, #3]
    1a30:	e7f1      	b.n	1a16 <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    1a32:	210f      	movs	r1, #15
    1a34:	4029      	ands	r1, r5
    1a36:	4c0a      	ldr	r4, [pc, #40]	; (1a60 <udd_ep_alloc+0xf0>)
    1a38:	4b0a      	ldr	r3, [pc, #40]	; (1a64 <udd_ep_alloc+0xf4>)
    1a3a:	2200      	movs	r2, #0
    1a3c:	0020      	movs	r0, r4
    1a3e:	f000 fabb 	bl	1fb8 <usb_device_endpoint_register_callback>
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1a42:	2200      	movs	r2, #0
    1a44:	0029      	movs	r1, r5
    1a46:	0020      	movs	r0, r4
    1a48:	f000 fade 	bl	2008 <usb_device_endpoint_enable_callback>
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    1a4c:	2201      	movs	r2, #1
    1a4e:	0029      	movs	r1, r5
    1a50:	0020      	movs	r0, r4
    1a52:	f000 fad9 	bl	2008 <usb_device_endpoint_enable_callback>
	return true;
    1a56:	2301      	movs	r3, #1
    1a58:	e7e4      	b.n	1a24 <udd_ep_alloc+0xb4>
    1a5a:	46c0      	nop			; (mov r8, r8)
    1a5c:	000003ff 	.word	0x000003ff
    1a60:	20000818 	.word	0x20000818
    1a64:	000013dd 	.word	0x000013dd

00001a68 <udd_ep_is_halted>:
{
    1a68:	b510      	push	{r4, lr}
    1a6a:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    1a6c:	4801      	ldr	r0, [pc, #4]	; (1a74 <udd_ep_is_halted+0xc>)
    1a6e:	f000 fce0 	bl	2432 <usb_device_endpoint_is_halted>
}
    1a72:	bd10      	pop	{r4, pc}
    1a74:	20000818 	.word	0x20000818

00001a78 <udd_ep_set_halt>:
{
    1a78:	b510      	push	{r4, lr}
    1a7a:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    1a7c:	230f      	movs	r3, #15
    1a7e:	4003      	ands	r3, r0
		return false;
    1a80:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    1a82:	2b06      	cmp	r3, #6
    1a84:	d900      	bls.n	1a88 <udd_ep_set_halt+0x10>
}
    1a86:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    1a88:	0021      	movs	r1, r4
    1a8a:	4804      	ldr	r0, [pc, #16]	; (1a9c <udd_ep_set_halt+0x24>)
    1a8c:	f000 fce6 	bl	245c <usb_device_endpoint_set_halt>
	udd_ep_abort(ep);
    1a90:	0020      	movs	r0, r4
    1a92:	f7ff ff27 	bl	18e4 <udd_ep_abort>
	return true;
    1a96:	2001      	movs	r0, #1
    1a98:	e7f5      	b.n	1a86 <udd_ep_set_halt+0xe>
    1a9a:	46c0      	nop			; (mov r8, r8)
    1a9c:	20000818 	.word	0x20000818

00001aa0 <_usb_ep0_on_tansfer_ok>:
{
    1aa0:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    1aa2:	4b34      	ldr	r3, [pc, #208]	; (1b74 <_usb_ep0_on_tansfer_ok+0xd4>)
    1aa4:	781b      	ldrb	r3, [r3, #0]
    1aa6:	2b01      	cmp	r3, #1
    1aa8:	d00a      	beq.n	1ac0 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    1aaa:	2b02      	cmp	r3, #2
    1aac:	d05f      	beq.n	1b6e <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    1aae:	4b32      	ldr	r3, [pc, #200]	; (1b78 <_usb_ep0_on_tansfer_ok+0xd8>)
    1ab0:	691b      	ldr	r3, [r3, #16]
    1ab2:	2b00      	cmp	r3, #0
    1ab4:	d000      	beq.n	1ab8 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    1ab6:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    1ab8:	2200      	movs	r2, #0
    1aba:	4b2e      	ldr	r3, [pc, #184]	; (1b74 <_usb_ep0_on_tansfer_ok+0xd4>)
    1abc:	701a      	strb	r2, [r3, #0]
}
    1abe:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    1ac0:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1ac2:	4b2d      	ldr	r3, [pc, #180]	; (1b78 <_usb_ep0_on_tansfer_ok+0xd8>)
    1ac4:	899b      	ldrh	r3, [r3, #12]
    1ac6:	4a2d      	ldr	r2, [pc, #180]	; (1b7c <_usb_ep0_on_tansfer_ok+0xdc>)
    1ac8:	8814      	ldrh	r4, [r2, #0]
    1aca:	1962      	adds	r2, r4, r5
    1acc:	4293      	cmp	r3, r2
    1ace:	da01      	bge.n	1ad4 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1ad0:	1b1d      	subs	r5, r3, r4
    1ad2:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    1ad4:	4b28      	ldr	r3, [pc, #160]	; (1b78 <_usb_ep0_on_tansfer_ok+0xd8>)
    1ad6:	6898      	ldr	r0, [r3, #8]
    1ad8:	1900      	adds	r0, r0, r4
    1ada:	002a      	movs	r2, r5
    1adc:	4928      	ldr	r1, [pc, #160]	; (1b80 <_usb_ep0_on_tansfer_ok+0xe0>)
    1ade:	f001 fb91 	bl	3204 <memcpy>
	udd_ctrl_payload_nb_trans += nb_data;
    1ae2:	1964      	adds	r4, r4, r5
    1ae4:	b2a4      	uxth	r4, r4
    1ae6:	4b25      	ldr	r3, [pc, #148]	; (1b7c <_usb_ep0_on_tansfer_ok+0xdc>)
    1ae8:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    1aea:	2d40      	cmp	r5, #64	; 0x40
    1aec:	d00a      	beq.n	1b04 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1aee:	4b22      	ldr	r3, [pc, #136]	; (1b78 <_usb_ep0_on_tansfer_ok+0xd8>)
    1af0:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    1af2:	695b      	ldr	r3, [r3, #20]
    1af4:	2b00      	cmp	r3, #0
    1af6:	d002      	beq.n	1afe <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    1af8:	4798      	blx	r3
    1afa:	2800      	cmp	r0, #0
    1afc:	d014      	beq.n	1b28 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    1afe:	f7ff fde1 	bl	16c4 <udd_ctrl_send_zlp_in>
    1b02:	e7dc      	b.n	1abe <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    1b04:	4b1c      	ldr	r3, [pc, #112]	; (1b78 <_usb_ep0_on_tansfer_ok+0xd8>)
    1b06:	88da      	ldrh	r2, [r3, #6]
    1b08:	4b1e      	ldr	r3, [pc, #120]	; (1b84 <_usb_ep0_on_tansfer_ok+0xe4>)
    1b0a:	881b      	ldrh	r3, [r3, #0]
    1b0c:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    1b0e:	429a      	cmp	r2, r3
    1b10:	dded      	ble.n	1aee <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1b12:	4b19      	ldr	r3, [pc, #100]	; (1b78 <_usb_ep0_on_tansfer_ok+0xd8>)
    1b14:	899b      	ldrh	r3, [r3, #12]
    1b16:	42a3      	cmp	r3, r4
    1b18:	d00c      	beq.n	1b34 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1b1a:	2340      	movs	r3, #64	; 0x40
    1b1c:	4a18      	ldr	r2, [pc, #96]	; (1b80 <_usb_ep0_on_tansfer_ok+0xe0>)
    1b1e:	2100      	movs	r1, #0
    1b20:	4819      	ldr	r0, [pc, #100]	; (1b88 <_usb_ep0_on_tansfer_ok+0xe8>)
    1b22:	f000 fd1b 	bl	255c <usb_device_endpoint_read_buffer_job>
    1b26:	e7ca      	b.n	1abe <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1b28:	2205      	movs	r2, #5
    1b2a:	4b12      	ldr	r3, [pc, #72]	; (1b74 <_usb_ep0_on_tansfer_ok+0xd4>)
    1b2c:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    1b2e:	f7ff ffa3 	bl	1a78 <udd_ep_set_halt>
    1b32:	e7c4      	b.n	1abe <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    1b34:	4b10      	ldr	r3, [pc, #64]	; (1b78 <_usb_ep0_on_tansfer_ok+0xd8>)
    1b36:	695b      	ldr	r3, [r3, #20]
    1b38:	2b00      	cmp	r3, #0
    1b3a:	d00b      	beq.n	1b54 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    1b3c:	4798      	blx	r3
    1b3e:	2800      	cmp	r0, #0
    1b40:	d00f      	beq.n	1b62 <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1b42:	4910      	ldr	r1, [pc, #64]	; (1b84 <_usb_ep0_on_tansfer_ok+0xe4>)
    1b44:	4a0d      	ldr	r2, [pc, #52]	; (1b7c <_usb_ep0_on_tansfer_ok+0xdc>)
    1b46:	880b      	ldrh	r3, [r1, #0]
    1b48:	8810      	ldrh	r0, [r2, #0]
    1b4a:	181b      	adds	r3, r3, r0
    1b4c:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    1b4e:	2300      	movs	r3, #0
    1b50:	8013      	strh	r3, [r2, #0]
    1b52:	e7e2      	b.n	1b1a <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1b54:	2205      	movs	r2, #5
    1b56:	4b07      	ldr	r3, [pc, #28]	; (1b74 <_usb_ep0_on_tansfer_ok+0xd4>)
    1b58:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    1b5a:	2000      	movs	r0, #0
    1b5c:	f7ff ff8c 	bl	1a78 <udd_ep_set_halt>
    1b60:	e7ad      	b.n	1abe <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1b62:	2205      	movs	r2, #5
    1b64:	4b03      	ldr	r3, [pc, #12]	; (1b74 <_usb_ep0_on_tansfer_ok+0xd4>)
    1b66:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    1b68:	f7ff ff86 	bl	1a78 <udd_ep_set_halt>
    1b6c:	e7a7      	b.n	1abe <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    1b6e:	f7ff fde9 	bl	1744 <udd_ctrl_in_sent>
    1b72:	e7a4      	b.n	1abe <_usb_ep0_on_tansfer_ok+0x1e>
    1b74:	2000053e 	.word	0x2000053e
    1b78:	20000980 	.word	0x20000980
    1b7c:	2000053a 	.word	0x2000053a
    1b80:	20000998 	.word	0x20000998
    1b84:	2000053c 	.word	0x2000053c
    1b88:	20000818 	.word	0x20000818

00001b8c <udd_ep_clear_halt>:
{
    1b8c:	b570      	push	{r4, r5, r6, lr}
    1b8e:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    1b90:	230f      	movs	r3, #15
    1b92:	4003      	ands	r3, r0
		return false;
    1b94:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    1b96:	2b06      	cmp	r3, #6
    1b98:	d900      	bls.n	1b9c <udd_ep_clear_halt+0x10>
}
    1b9a:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    1b9c:	0020      	movs	r0, r4
    1b9e:	f7ff fc0b 	bl	13b8 <udd_ep_get_job>
    1ba2:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    1ba4:	0021      	movs	r1, r4
    1ba6:	4807      	ldr	r0, [pc, #28]	; (1bc4 <udd_ep_clear_halt+0x38>)
    1ba8:	f000 fc6b 	bl	2482 <usb_device_endpoint_clear_halt>
	if (ptr_job->busy == true) {
    1bac:	7cab      	ldrb	r3, [r5, #18]
	return true;
    1bae:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    1bb0:	07db      	lsls	r3, r3, #31
    1bb2:	d5f2      	bpl.n	1b9a <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    1bb4:	7cab      	ldrb	r3, [r5, #18]
    1bb6:	2201      	movs	r2, #1
    1bb8:	4393      	bics	r3, r2
    1bba:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    1bbc:	682b      	ldr	r3, [r5, #0]
    1bbe:	4798      	blx	r3
	return true;
    1bc0:	2001      	movs	r0, #1
    1bc2:	e7ea      	b.n	1b9a <udd_ep_clear_halt+0xe>
    1bc4:	20000818 	.word	0x20000818

00001bc8 <udd_ep_run>:
{
    1bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bca:	b087      	sub	sp, #28
    1bcc:	0005      	movs	r5, r0
    1bce:	9103      	str	r1, [sp, #12]
    1bd0:	9202      	str	r2, [sp, #8]
    1bd2:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    1bd4:	260f      	movs	r6, #15
    1bd6:	4006      	ands	r6, r0
		return false;
    1bd8:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    1bda:	2e06      	cmp	r6, #6
    1bdc:	d902      	bls.n	1be4 <udd_ep_run+0x1c>
}
    1bde:	0020      	movs	r0, r4
    1be0:	b007      	add	sp, #28
    1be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    1be4:	f7ff ff40 	bl	1a68 <udd_ep_is_halted>
    1be8:	1e04      	subs	r4, r0, #0
    1bea:	d000      	beq.n	1bee <udd_ep_run+0x26>
    1bec:	e0bd      	b.n	1d6a <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    1bee:	0028      	movs	r0, r5
    1bf0:	f7ff fbe2 	bl	13b8 <udd_ep_get_job>
    1bf4:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1bf6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1bfa:	425a      	negs	r2, r3
    1bfc:	4153      	adcs	r3, r2
    1bfe:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    1c00:	b672      	cpsid	i
    1c02:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1c06:	2200      	movs	r2, #0
    1c08:	4b5b      	ldr	r3, [pc, #364]	; (1d78 <udd_ep_run+0x1b0>)
    1c0a:	701a      	strb	r2, [r3, #0]
	return flags;
    1c0c:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    1c0e:	7c83      	ldrb	r3, [r0, #18]
    1c10:	07db      	lsls	r3, r3, #31
    1c12:	d508      	bpl.n	1c26 <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    1c14:	2a00      	cmp	r2, #0
    1c16:	d0e2      	beq.n	1bde <udd_ep_run+0x16>
		cpu_irq_enable();
    1c18:	2201      	movs	r2, #1
    1c1a:	4b57      	ldr	r3, [pc, #348]	; (1d78 <udd_ep_run+0x1b0>)
    1c1c:	701a      	strb	r2, [r3, #0]
    1c1e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1c22:	b662      	cpsie	i
    1c24:	e7db      	b.n	1bde <udd_ep_run+0x16>
	ptr_job->busy = true;
    1c26:	7c83      	ldrb	r3, [r0, #18]
    1c28:	2101      	movs	r1, #1
    1c2a:	430b      	orrs	r3, r1
    1c2c:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    1c2e:	2a00      	cmp	r2, #0
    1c30:	d005      	beq.n	1c3e <udd_ep_run+0x76>
		cpu_irq_enable();
    1c32:	2201      	movs	r2, #1
    1c34:	4b50      	ldr	r3, [pc, #320]	; (1d78 <udd_ep_run+0x1b0>)
    1c36:	701a      	strb	r2, [r3, #0]
    1c38:	f3bf 8f5f 	dmb	sy
    1c3c:	b662      	cpsie	i
	ptr_job->buf = buf;
    1c3e:	9b02      	ldr	r3, [sp, #8]
    1c40:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    1c42:	9b01      	ldr	r3, [sp, #4]
    1c44:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    1c46:	2300      	movs	r3, #0
    1c48:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    1c4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c4c:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    1c4e:	2301      	movs	r3, #1
    1c50:	9a03      	ldr	r2, [sp, #12]
    1c52:	4013      	ands	r3, r2
    1c54:	005a      	lsls	r2, r3, #1
    1c56:	7cbb      	ldrb	r3, [r7, #18]
    1c58:	2102      	movs	r1, #2
    1c5a:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    1c5c:	4313      	orrs	r3, r2
    1c5e:	2204      	movs	r2, #4
    1c60:	4393      	bics	r3, r2
    1c62:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    1c64:	b26b      	sxtb	r3, r5
    1c66:	2b00      	cmp	r3, #0
    1c68:	db20      	blt.n	1cac <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    1c6a:	9b01      	ldr	r3, [sp, #4]
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	d06f      	beq.n	1d50 <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    1c70:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1c72:	4b42      	ldr	r3, [pc, #264]	; (1d7c <udd_ep_run+0x1b4>)
    1c74:	429c      	cmp	r4, r3
    1c76:	d95a      	bls.n	1d2e <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    1c78:	8a39      	ldrh	r1, [r7, #16]
    1c7a:	001c      	movs	r4, r3
    1c7c:	0018      	movs	r0, r3
    1c7e:	f001 fa77 	bl	3170 <__aeabi_idivmod>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    1c82:	1a63      	subs	r3, r4, r1
    1c84:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    1c86:	8a3b      	ldrh	r3, [r7, #16]
    1c88:	429a      	cmp	r2, r3
    1c8a:	d257      	bcs.n	1d3c <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    1c8c:	7cba      	ldrb	r2, [r7, #18]
    1c8e:	2104      	movs	r1, #4
    1c90:	430a      	orrs	r2, r1
    1c92:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    1c94:	1e72      	subs	r2, r6, #1
    1c96:	0192      	lsls	r2, r2, #6
    1c98:	4939      	ldr	r1, [pc, #228]	; (1d80 <udd_ep_run+0x1b8>)
    1c9a:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    1c9c:	0031      	movs	r1, r6
    1c9e:	4839      	ldr	r0, [pc, #228]	; (1d84 <udd_ep_run+0x1bc>)
    1ca0:	f000 fc5c 	bl	255c <usb_device_endpoint_read_buffer_job>
				return (STATUS_OK ==
    1ca4:	4244      	negs	r4, r0
    1ca6:	4144      	adcs	r4, r0
    1ca8:	b2e4      	uxtb	r4, r4
    1caa:	e798      	b.n	1bde <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    1cac:	9b01      	ldr	r3, [sp, #4]
    1cae:	2b00      	cmp	r3, #0
    1cb0:	d027      	beq.n	1d02 <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    1cb2:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1cb4:	4b31      	ldr	r3, [pc, #196]	; (1d7c <udd_ep_run+0x1b4>)
    1cb6:	429d      	cmp	r5, r3
    1cb8:	d906      	bls.n	1cc8 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    1cba:	8a39      	ldrh	r1, [r7, #16]
    1cbc:	001d      	movs	r5, r3
    1cbe:	0018      	movs	r0, r3
    1cc0:	f001 fa56 	bl	3170 <__aeabi_idivmod>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    1cc4:	1a6b      	subs	r3, r5, r1
    1cc6:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    1cc8:	7cbb      	ldrb	r3, [r7, #18]
    1cca:	079b      	lsls	r3, r3, #30
    1ccc:	d507      	bpl.n	1cde <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    1cce:	8a39      	ldrh	r1, [r7, #16]
    1cd0:	0028      	movs	r0, r5
    1cd2:	f001 f963 	bl	2f9c <__aeabi_uidivmod>
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    1cd6:	b289      	uxth	r1, r1
    1cd8:	424c      	negs	r4, r1
    1cda:	414c      	adcs	r4, r1
    1cdc:	b2e4      	uxtb	r4, r4
    1cde:	2001      	movs	r0, #1
    1ce0:	4020      	ands	r0, r4
    1ce2:	0040      	lsls	r0, r0, #1
    1ce4:	7cbc      	ldrb	r4, [r7, #18]
    1ce6:	2302      	movs	r3, #2
    1ce8:	439c      	bics	r4, r3
    1cea:	4304      	orrs	r4, r0
    1cec:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    1cee:	002b      	movs	r3, r5
    1cf0:	9a02      	ldr	r2, [sp, #8]
    1cf2:	0031      	movs	r1, r6
    1cf4:	4823      	ldr	r0, [pc, #140]	; (1d84 <udd_ep_run+0x1bc>)
    1cf6:	f000 fc07 	bl	2508 <usb_device_endpoint_write_buffer_job>
		return (STATUS_OK ==
    1cfa:	4244      	negs	r4, r0
    1cfc:	4144      	adcs	r4, r0
    1cfe:	b2e4      	uxtb	r4, r4
    1d00:	e76d      	b.n	1bde <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    1d02:	7cbb      	ldrb	r3, [r7, #18]
    1d04:	079b      	lsls	r3, r3, #30
    1d06:	d505      	bpl.n	1d14 <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    1d08:	7cbb      	ldrb	r3, [r7, #18]
    1d0a:	2202      	movs	r2, #2
    1d0c:	4393      	bics	r3, r2
    1d0e:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    1d10:	2500      	movs	r5, #0
    1d12:	e7ec      	b.n	1cee <udd_ep_run+0x126>
			ptr_job->busy = false;
    1d14:	7cbb      	ldrb	r3, [r7, #18]
    1d16:	2201      	movs	r2, #1
    1d18:	4393      	bics	r3, r2
    1d1a:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    1d1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d025      	beq.n	1d6e <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    1d22:	002a      	movs	r2, r5
    1d24:	2100      	movs	r1, #0
    1d26:	2000      	movs	r0, #0
    1d28:	4798      	blx	r3
			return true;
    1d2a:	2401      	movs	r4, #1
    1d2c:	e757      	b.n	1bde <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    1d2e:	8a39      	ldrh	r1, [r7, #16]
    1d30:	0020      	movs	r0, r4
    1d32:	f001 f933 	bl	2f9c <__aeabi_uidivmod>
    1d36:	1a63      	subs	r3, r4, r1
    1d38:	b29a      	uxth	r2, r3
    1d3a:	e7a4      	b.n	1c86 <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    1d3c:	0013      	movs	r3, r2
    1d3e:	9a02      	ldr	r2, [sp, #8]
    1d40:	0031      	movs	r1, r6
    1d42:	4810      	ldr	r0, [pc, #64]	; (1d84 <udd_ep_run+0x1bc>)
    1d44:	f000 fc0a 	bl	255c <usb_device_endpoint_read_buffer_job>
				return (STATUS_OK ==
    1d48:	4244      	negs	r4, r0
    1d4a:	4144      	adcs	r4, r0
    1d4c:	b2e4      	uxtb	r4, r4
    1d4e:	e746      	b.n	1bde <udd_ep_run+0x16>
			ptr_job->busy = false;
    1d50:	7cbb      	ldrb	r3, [r7, #18]
    1d52:	2201      	movs	r2, #1
    1d54:	4393      	bics	r3, r2
    1d56:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    1d58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d5a:	2b00      	cmp	r3, #0
    1d5c:	d009      	beq.n	1d72 <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    1d5e:	002a      	movs	r2, r5
    1d60:	2100      	movs	r1, #0
    1d62:	2000      	movs	r0, #0
    1d64:	4798      	blx	r3
			return true;
    1d66:	2401      	movs	r4, #1
    1d68:	e739      	b.n	1bde <udd_ep_run+0x16>
		return false;
    1d6a:	2400      	movs	r4, #0
    1d6c:	e737      	b.n	1bde <udd_ep_run+0x16>
			return true;
    1d6e:	2401      	movs	r4, #1
    1d70:	e735      	b.n	1bde <udd_ep_run+0x16>
			return true;
    1d72:	2401      	movs	r4, #1
    1d74:	e733      	b.n	1bde <udd_ep_run+0x16>
    1d76:	46c0      	nop			; (mov r8, r8)
    1d78:	200000dd 	.word	0x200000dd
    1d7c:	00001fff 	.word	0x00001fff
    1d80:	20000698 	.word	0x20000698
    1d84:	20000818 	.word	0x20000818

00001d88 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    1d88:	4b02      	ldr	r3, [pc, #8]	; (1d94 <udd_set_address+0xc>)
    1d8a:	681b      	ldr	r3, [r3, #0]
    1d8c:	2280      	movs	r2, #128	; 0x80
    1d8e:	4310      	orrs	r0, r2
    1d90:	7298      	strb	r0, [r3, #10]
}
    1d92:	4770      	bx	lr
    1d94:	20000818 	.word	0x20000818

00001d98 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    1d98:	4b02      	ldr	r3, [pc, #8]	; (1da4 <udd_getaddress+0xc>)
    1d9a:	681b      	ldr	r3, [r3, #0]
    1d9c:	7a98      	ldrb	r0, [r3, #10]
    1d9e:	0640      	lsls	r0, r0, #25
    1da0:	0e40      	lsrs	r0, r0, #25
}
    1da2:	4770      	bx	lr
    1da4:	20000818 	.word	0x20000818

00001da8 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    1da8:	4b01      	ldr	r3, [pc, #4]	; (1db0 <udd_set_setup_payload+0x8>)
    1daa:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    1dac:	8199      	strh	r1, [r3, #12]
}
    1dae:	4770      	bx	lr
    1db0:	20000980 	.word	0x20000980

00001db4 <udd_detach>:

void udd_detach(void)
{
    1db4:	b510      	push	{r4, lr}
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    1db6:	4b05      	ldr	r3, [pc, #20]	; (1dcc <udd_detach+0x18>)
    1db8:	681a      	ldr	r2, [r3, #0]
    1dba:	8913      	ldrh	r3, [r2, #8]
    1dbc:	2101      	movs	r1, #1
    1dbe:	430b      	orrs	r3, r1
    1dc0:	8113      	strh	r3, [r2, #8]
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
    1dc2:	2001      	movs	r0, #1
    1dc4:	f7ff fa98 	bl	12f8 <udd_sleep_mode>
}
    1dc8:	bd10      	pop	{r4, pc}
    1dca:	46c0      	nop			; (mov r8, r8)
    1dcc:	20000818 	.word	0x20000818

00001dd0 <udd_attach>:

void udd_attach(void)
{
    1dd0:	b510      	push	{r4, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    1dd2:	2003      	movs	r0, #3
    1dd4:	f7ff fa90 	bl	12f8 <udd_sleep_mode>
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1dd8:	4c19      	ldr	r4, [pc, #100]	; (1e40 <udd_attach+0x70>)
    1dda:	6822      	ldr	r2, [r4, #0]
    1ddc:	8913      	ldrh	r3, [r2, #8]
    1dde:	2101      	movs	r1, #1
    1de0:	438b      	bics	r3, r1
    1de2:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    1de4:	4a17      	ldr	r2, [pc, #92]	; (1e44 <udd_attach+0x74>)
    1de6:	3103      	adds	r1, #3
    1de8:	0020      	movs	r0, r4
    1dea:	f000 f8b5 	bl	1f58 <usb_device_register_callback>
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    1dee:	4a16      	ldr	r2, [pc, #88]	; (1e48 <udd_attach+0x78>)
    1df0:	2100      	movs	r1, #0
    1df2:	0020      	movs	r0, r4
    1df4:	f000 f8b0 	bl	1f58 <usb_device_register_callback>
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    1df8:	4a14      	ldr	r2, [pc, #80]	; (1e4c <udd_attach+0x7c>)
    1dfa:	2101      	movs	r1, #1
    1dfc:	0020      	movs	r0, r4
    1dfe:	f000 f8ab 	bl	1f58 <usb_device_register_callback>
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    1e02:	4a13      	ldr	r2, [pc, #76]	; (1e50 <udd_attach+0x80>)
    1e04:	2102      	movs	r1, #2
    1e06:	0020      	movs	r0, r4
    1e08:	f000 f8a6 	bl	1f58 <usb_device_register_callback>

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1e0c:	2104      	movs	r1, #4
    1e0e:	0020      	movs	r0, r4
    1e10:	f000 f8b4 	bl	1f7c <usb_device_enable_callback>
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    1e14:	2100      	movs	r1, #0
    1e16:	0020      	movs	r0, r4
    1e18:	f000 f8b0 	bl	1f7c <usb_device_enable_callback>
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    1e1c:	2101      	movs	r1, #1
    1e1e:	0020      	movs	r0, r4
    1e20:	f000 f8ac 	bl	1f7c <usb_device_enable_callback>
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1e24:	2102      	movs	r1, #2
    1e26:	0020      	movs	r0, r4
    1e28:	f000 f8a8 	bl	1f7c <usb_device_enable_callback>
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    1e2c:	4a09      	ldr	r2, [pc, #36]	; (1e54 <udd_attach+0x84>)
    1e2e:	2106      	movs	r1, #6
    1e30:	0020      	movs	r0, r4
    1e32:	f000 f891 	bl	1f58 <usb_device_register_callback>
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1e36:	2106      	movs	r1, #6
    1e38:	0020      	movs	r0, r4
    1e3a:	f000 f89f 	bl	1f7c <usb_device_enable_callback>
#endif
}
    1e3e:	bd10      	pop	{r4, pc}
    1e40:	20000818 	.word	0x20000818
    1e44:	000018c1 	.word	0x000018c1
    1e48:	000018b5 	.word	0x000018b5
    1e4c:	00001625 	.word	0x00001625
    1e50:	000015c5 	.word	0x000015c5
    1e54:	0000159d 	.word	0x0000159d

00001e58 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    1e58:	b510      	push	{r4, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    1e5a:	2100      	movs	r1, #0
    1e5c:	200e      	movs	r0, #14
    1e5e:	f7fe ff13 	bl	c88 <extint_chan_disable_callback>
	return (port_base->IN.reg & pin_mask);
    1e62:	4b07      	ldr	r3, [pc, #28]	; (1e80 <_uhd_vbus_handler+0x28>)
    1e64:	6a1b      	ldr	r3, [r3, #32]
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    1e66:	045b      	lsls	r3, r3, #17
    1e68:	d406      	bmi.n	1e78 <_uhd_vbus_handler+0x20>
		udd_attach();
	} else {
		udd_detach();
    1e6a:	f7ff ffa3 	bl	1db4 <udd_detach>
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    1e6e:	2100      	movs	r1, #0
    1e70:	200e      	movs	r0, #14
    1e72:	f7fe fef9 	bl	c68 <extint_chan_enable_callback>
			EXTINT_CALLBACK_TYPE_DETECT);
}
    1e76:	bd10      	pop	{r4, pc}
		udd_attach();
    1e78:	f7ff ffaa 	bl	1dd0 <udd_attach>
    1e7c:	e7f7      	b.n	1e6e <_uhd_vbus_handler+0x16>
    1e7e:	46c0      	nop			; (mov r8, r8)
    1e80:	41004400 	.word	0x41004400

00001e84 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    1e84:	b570      	push	{r4, r5, r6, lr}
    1e86:	b086      	sub	sp, #24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1e88:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1e8c:	425a      	negs	r2, r3
    1e8e:	4153      	adcs	r3, r2
    1e90:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1e92:	b672      	cpsid	i
    1e94:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1e98:	2600      	movs	r6, #0
    1e9a:	4b29      	ldr	r3, [pc, #164]	; (1f40 <udd_enable+0xbc>)
    1e9c:	701e      	strb	r6, [r3, #0]
	return flags;
    1e9e:	9d01      	ldr	r5, [sp, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    1ea0:	ac05      	add	r4, sp, #20
    1ea2:	0020      	movs	r0, r4
    1ea4:	f000 fe86 	bl	2bb4 <usb_get_config_defaults>
	config_usb.source_generator = UDD_CLOCK_GEN;
    1ea8:	70a6      	strb	r6, [r4, #2]
	usb_init(&usb_device, USB, &config_usb);
    1eaa:	4e26      	ldr	r6, [pc, #152]	; (1f44 <udd_enable+0xc0>)
    1eac:	0022      	movs	r2, r4
    1eae:	4926      	ldr	r1, [pc, #152]	; (1f48 <udd_enable+0xc4>)
    1eb0:	0030      	movs	r0, r6
    1eb2:	f000 fe87 	bl	2bc4 <usb_init>

	/* USB Module Enable */
	usb_enable(&usb_device);
    1eb6:	0030      	movs	r0, r6
    1eb8:	f000 fb90 	bl	25dc <usb_enable>
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    1ebc:	4b23      	ldr	r3, [pc, #140]	; (1f4c <udd_enable+0xc8>)
    1ebe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1ec0:	069b      	lsls	r3, r3, #26
    1ec2:	d434      	bmi.n	1f2e <udd_enable+0xaa>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    1ec4:	4921      	ldr	r1, [pc, #132]	; (1f4c <udd_enable+0xc8>)
    1ec6:	22d0      	movs	r2, #208	; 0xd0
    1ec8:	68cb      	ldr	r3, [r1, #12]
    1eca:	4013      	ands	r3, r2
    1ecc:	2bd0      	cmp	r3, #208	; 0xd0
    1ece:	d1fb      	bne.n	1ec8 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    1ed0:	2001      	movs	r0, #1
    1ed2:	f7ff fa11 	bl	12f8 <udd_sleep_mode>
	extint_chan_get_config_defaults(&eint_chan_conf);
    1ed6:	ac02      	add	r4, sp, #8
    1ed8:	0020      	movs	r0, r4
    1eda:	f7fe ff4b 	bl	d74 <extint_chan_get_config_defaults>
	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    1ede:	230e      	movs	r3, #14
    1ee0:	9302      	str	r3, [sp, #8]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    1ee2:	2300      	movs	r3, #0
    1ee4:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    1ee6:	7223      	strb	r3, [r4, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    1ee8:	3303      	adds	r3, #3
    1eea:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    1eec:	3b02      	subs	r3, #2
    1eee:	72a3      	strb	r3, [r4, #10]
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    1ef0:	2100      	movs	r1, #0
    1ef2:	200e      	movs	r0, #14
    1ef4:	f7fe fec8 	bl	c88 <extint_chan_disable_callback>
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    1ef8:	0021      	movs	r1, r4
    1efa:	200e      	movs	r0, #14
    1efc:	f7fe ff44 	bl	d88 <extint_chan_set_config>
	extint_register_callback(_uhd_vbus_handler,
    1f00:	2200      	movs	r2, #0
    1f02:	210e      	movs	r1, #14
    1f04:	4812      	ldr	r0, [pc, #72]	; (1f50 <udd_enable+0xcc>)
    1f06:	f7fe fe99 	bl	c3c <extint_register_callback>
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    1f0a:	2100      	movs	r1, #0
    1f0c:	200e      	movs	r0, #14
    1f0e:	f7fe feab 	bl	c68 <extint_chan_enable_callback>
    1f12:	4b10      	ldr	r3, [pc, #64]	; (1f54 <udd_enable+0xd0>)
    1f14:	6a1b      	ldr	r3, [r3, #32]

#if USB_VBUS_EIC
	_usb_vbus_config();
	if (is_usb_vbus_high()) {
    1f16:	045b      	lsls	r3, r3, #17
    1f18:	d40f      	bmi.n	1f3a <udd_enable+0xb6>
	if (cpu_irq_is_enabled_flags(flags))
    1f1a:	2d00      	cmp	r5, #0
    1f1c:	d005      	beq.n	1f2a <udd_enable+0xa6>
		cpu_irq_enable();
    1f1e:	2201      	movs	r2, #1
    1f20:	4b07      	ldr	r3, [pc, #28]	; (1f40 <udd_enable+0xbc>)
    1f22:	701a      	strb	r2, [r3, #0]
    1f24:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1f28:	b662      	cpsie	i
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
}
    1f2a:	b006      	add	sp, #24
    1f2c:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    1f2e:	4907      	ldr	r1, [pc, #28]	; (1f4c <udd_enable+0xc8>)
    1f30:	2210      	movs	r2, #16
    1f32:	68cb      	ldr	r3, [r1, #12]
    1f34:	421a      	tst	r2, r3
    1f36:	d0fc      	beq.n	1f32 <udd_enable+0xae>
    1f38:	e7ca      	b.n	1ed0 <udd_enable+0x4c>
		_uhd_vbus_handler();
    1f3a:	f7ff ff8d 	bl	1e58 <_uhd_vbus_handler>
    1f3e:	e7ec      	b.n	1f1a <udd_enable+0x96>
    1f40:	200000dd 	.word	0x200000dd
    1f44:	20000818 	.word	0x20000818
    1f48:	41005000 	.word	0x41005000
    1f4c:	40000800 	.word	0x40000800
    1f50:	00001e59 	.word	0x00001e59
    1f54:	41004400 	.word	0x41004400

00001f58 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    1f58:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    1f5a:	000b      	movs	r3, r1
    1f5c:	332e      	adds	r3, #46	; 0x2e
    1f5e:	009b      	lsls	r3, r3, #2
    1f60:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    1f62:	22aa      	movs	r2, #170	; 0xaa
    1f64:	0052      	lsls	r2, r2, #1
    1f66:	0049      	lsls	r1, r1, #1
    1f68:	5a83      	ldrh	r3, [r0, r2]
    1f6a:	4c03      	ldr	r4, [pc, #12]	; (1f78 <usb_device_register_callback+0x20>)
    1f6c:	5b09      	ldrh	r1, [r1, r4]
    1f6e:	430b      	orrs	r3, r1
    1f70:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    1f72:	2000      	movs	r0, #0
    1f74:	bd10      	pop	{r4, pc}
    1f76:	46c0      	nop			; (mov r8, r8)
    1f78:	00003260 	.word	0x00003260

00001f7c <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    1f7c:	0049      	lsls	r1, r1, #1
    1f7e:	4b06      	ldr	r3, [pc, #24]	; (1f98 <usb_device_enable_callback+0x1c>)
    1f80:	5acb      	ldrh	r3, [r1, r3]
    1f82:	6802      	ldr	r2, [r0, #0]
    1f84:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    1f86:	21ab      	movs	r1, #171	; 0xab
    1f88:	0049      	lsls	r1, r1, #1
    1f8a:	5a42      	ldrh	r2, [r0, r1]
    1f8c:	431a      	orrs	r2, r3
    1f8e:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    1f90:	6802      	ldr	r2, [r0, #0]
    1f92:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    1f94:	2000      	movs	r0, #0
    1f96:	4770      	bx	lr
    1f98:	00003260 	.word	0x00003260

00001f9c <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    1f9c:	0049      	lsls	r1, r1, #1
    1f9e:	4b05      	ldr	r3, [pc, #20]	; (1fb4 <usb_device_disable_callback+0x18>)
    1fa0:	5aca      	ldrh	r2, [r1, r3]
    1fa2:	21ab      	movs	r1, #171	; 0xab
    1fa4:	0049      	lsls	r1, r1, #1
    1fa6:	5a43      	ldrh	r3, [r0, r1]
    1fa8:	4393      	bics	r3, r2
    1faa:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    1fac:	6803      	ldr	r3, [r0, #0]
    1fae:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    1fb0:	2000      	movs	r0, #0
    1fb2:	4770      	bx	lr
    1fb4:	00003260 	.word	0x00003260

00001fb8 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    1fb8:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    1fba:	008c      	lsls	r4, r1, #2
    1fbc:	18a4      	adds	r4, r4, r2
    1fbe:	3434      	adds	r4, #52	; 0x34
    1fc0:	00a4      	lsls	r4, r4, #2
    1fc2:	1904      	adds	r4, r0, r4
    1fc4:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    1fc6:	1840      	adds	r0, r0, r1
    1fc8:	3059      	adds	r0, #89	; 0x59
    1fca:	30ff      	adds	r0, #255	; 0xff
    1fcc:	7803      	ldrb	r3, [r0, #0]
    1fce:	4903      	ldr	r1, [pc, #12]	; (1fdc <usb_device_endpoint_register_callback+0x24>)
    1fd0:	5c8a      	ldrb	r2, [r1, r2]
    1fd2:	4313      	orrs	r3, r2
    1fd4:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    1fd6:	2000      	movs	r0, #0
    1fd8:	bd10      	pop	{r4, pc}
    1fda:	46c0      	nop			; (mov r8, r8)
    1fdc:	00003270 	.word	0x00003270

00001fe0 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    1fe0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    1fe2:	008b      	lsls	r3, r1, #2
    1fe4:	189b      	adds	r3, r3, r2
    1fe6:	3334      	adds	r3, #52	; 0x34
    1fe8:	009b      	lsls	r3, r3, #2
    1fea:	18c3      	adds	r3, r0, r3
    1fec:	2400      	movs	r4, #0
    1fee:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    1ff0:	1840      	adds	r0, r0, r1
    1ff2:	3059      	adds	r0, #89	; 0x59
    1ff4:	30ff      	adds	r0, #255	; 0xff
    1ff6:	4b03      	ldr	r3, [pc, #12]	; (2004 <STACK_SIZE+0x4>)
    1ff8:	5c9a      	ldrb	r2, [r3, r2]
    1ffa:	7803      	ldrb	r3, [r0, #0]
    1ffc:	4393      	bics	r3, r2
    1ffe:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    2000:	2000      	movs	r0, #0
    2002:	bd10      	pop	{r4, pc}
    2004:	00003270 	.word	0x00003270

00002008 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    2008:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    200a:	230f      	movs	r3, #15
    200c:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    200e:	18c4      	adds	r4, r0, r3
    2010:	3461      	adds	r4, #97	; 0x61
    2012:	34ff      	adds	r4, #255	; 0xff
    2014:	7825      	ldrb	r5, [r4, #0]
    2016:	4e2f      	ldr	r6, [pc, #188]	; (20d4 <usb_device_endpoint_enable_callback+0xcc>)
    2018:	5cb6      	ldrb	r6, [r6, r2]
    201a:	4335      	orrs	r5, r6
    201c:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    201e:	2a00      	cmp	r2, #0
    2020:	d129      	bne.n	2076 <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    2022:	2b00      	cmp	r3, #0
    2024:	d112      	bne.n	204c <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    2026:	2503      	movs	r5, #3
    2028:	240a      	movs	r4, #10
    202a:	34ff      	adds	r4, #255	; 0xff
    202c:	6806      	ldr	r6, [r0, #0]
    202e:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    2030:	2a03      	cmp	r2, #3
    2032:	d109      	bne.n	2048 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    2034:	b249      	sxtb	r1, r1
    2036:	2900      	cmp	r1, #0
    2038:	db44      	blt.n	20c4 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    203a:	6802      	ldr	r2, [r0, #0]
    203c:	015b      	lsls	r3, r3, #5
    203e:	18d3      	adds	r3, r2, r3
    2040:	330a      	adds	r3, #10
    2042:	33ff      	adds	r3, #255	; 0xff
    2044:	2220      	movs	r2, #32
    2046:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    2048:	2000      	movs	r0, #0
    204a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    204c:	b24c      	sxtb	r4, r1
    204e:	2c00      	cmp	r4, #0
    2050:	db08      	blt.n	2064 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    2052:	015c      	lsls	r4, r3, #5
    2054:	6805      	ldr	r5, [r0, #0]
    2056:	46ac      	mov	ip, r5
    2058:	4464      	add	r4, ip
    205a:	340a      	adds	r4, #10
    205c:	34ff      	adds	r4, #255	; 0xff
    205e:	2501      	movs	r5, #1
    2060:	7025      	strb	r5, [r4, #0]
    2062:	e7e5      	b.n	2030 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    2064:	015c      	lsls	r4, r3, #5
    2066:	6805      	ldr	r5, [r0, #0]
    2068:	46ac      	mov	ip, r5
    206a:	4464      	add	r4, ip
    206c:	340a      	adds	r4, #10
    206e:	34ff      	adds	r4, #255	; 0xff
    2070:	2502      	movs	r5, #2
    2072:	7025      	strb	r5, [r4, #0]
    2074:	e7dc      	b.n	2030 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    2076:	2a01      	cmp	r2, #1
    2078:	d11a      	bne.n	20b0 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    207a:	2b00      	cmp	r3, #0
    207c:	d105      	bne.n	208a <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    207e:	6802      	ldr	r2, [r0, #0]
    2080:	210c      	movs	r1, #12
    2082:	230a      	movs	r3, #10
    2084:	33ff      	adds	r3, #255	; 0xff
    2086:	54d1      	strb	r1, [r2, r3]
    2088:	e7de      	b.n	2048 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    208a:	b249      	sxtb	r1, r1
    208c:	2900      	cmp	r1, #0
    208e:	db07      	blt.n	20a0 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    2090:	6802      	ldr	r2, [r0, #0]
    2092:	015b      	lsls	r3, r3, #5
    2094:	18d3      	adds	r3, r2, r3
    2096:	330a      	adds	r3, #10
    2098:	33ff      	adds	r3, #255	; 0xff
    209a:	2204      	movs	r2, #4
    209c:	701a      	strb	r2, [r3, #0]
    209e:	e7d3      	b.n	2048 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    20a0:	6802      	ldr	r2, [r0, #0]
    20a2:	015b      	lsls	r3, r3, #5
    20a4:	18d3      	adds	r3, r2, r3
    20a6:	330a      	adds	r3, #10
    20a8:	33ff      	adds	r3, #255	; 0xff
    20aa:	2208      	movs	r2, #8
    20ac:	701a      	strb	r2, [r3, #0]
    20ae:	e7cb      	b.n	2048 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    20b0:	2a02      	cmp	r2, #2
    20b2:	d1bd      	bne.n	2030 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    20b4:	6802      	ldr	r2, [r0, #0]
    20b6:	015b      	lsls	r3, r3, #5
    20b8:	18d3      	adds	r3, r2, r3
    20ba:	330a      	adds	r3, #10
    20bc:	33ff      	adds	r3, #255	; 0xff
    20be:	2210      	movs	r2, #16
    20c0:	701a      	strb	r2, [r3, #0]
    20c2:	e7c1      	b.n	2048 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    20c4:	6802      	ldr	r2, [r0, #0]
    20c6:	015b      	lsls	r3, r3, #5
    20c8:	18d3      	adds	r3, r2, r3
    20ca:	330a      	adds	r3, #10
    20cc:	33ff      	adds	r3, #255	; 0xff
    20ce:	2240      	movs	r2, #64	; 0x40
    20d0:	701a      	strb	r2, [r3, #0]
    20d2:	e7b9      	b.n	2048 <usb_device_endpoint_enable_callback+0x40>
    20d4:	00003270 	.word	0x00003270

000020d8 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    20d8:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    20da:	230f      	movs	r3, #15
    20dc:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    20de:	18c4      	adds	r4, r0, r3
    20e0:	3461      	adds	r4, #97	; 0x61
    20e2:	34ff      	adds	r4, #255	; 0xff
    20e4:	4d2f      	ldr	r5, [pc, #188]	; (21a4 <usb_device_endpoint_disable_callback+0xcc>)
    20e6:	5cae      	ldrb	r6, [r5, r2]
    20e8:	7825      	ldrb	r5, [r4, #0]
    20ea:	43b5      	bics	r5, r6
    20ec:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    20ee:	2a00      	cmp	r2, #0
    20f0:	d129      	bne.n	2146 <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    20f2:	2b00      	cmp	r3, #0
    20f4:	d112      	bne.n	211c <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    20f6:	2503      	movs	r5, #3
    20f8:	2484      	movs	r4, #132	; 0x84
    20fa:	0064      	lsls	r4, r4, #1
    20fc:	6806      	ldr	r6, [r0, #0]
    20fe:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    2100:	2a03      	cmp	r2, #3
    2102:	d109      	bne.n	2118 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    2104:	b249      	sxtb	r1, r1
    2106:	2900      	cmp	r1, #0
    2108:	db44      	blt.n	2194 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    210a:	6802      	ldr	r2, [r0, #0]
    210c:	015b      	lsls	r3, r3, #5
    210e:	18d3      	adds	r3, r2, r3
    2110:	3309      	adds	r3, #9
    2112:	33ff      	adds	r3, #255	; 0xff
    2114:	2220      	movs	r2, #32
    2116:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    2118:	2000      	movs	r0, #0
    211a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    211c:	b24c      	sxtb	r4, r1
    211e:	2c00      	cmp	r4, #0
    2120:	db08      	blt.n	2134 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    2122:	015c      	lsls	r4, r3, #5
    2124:	6805      	ldr	r5, [r0, #0]
    2126:	46ac      	mov	ip, r5
    2128:	4464      	add	r4, ip
    212a:	3409      	adds	r4, #9
    212c:	34ff      	adds	r4, #255	; 0xff
    212e:	2501      	movs	r5, #1
    2130:	7025      	strb	r5, [r4, #0]
    2132:	e7e5      	b.n	2100 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    2134:	015c      	lsls	r4, r3, #5
    2136:	6805      	ldr	r5, [r0, #0]
    2138:	46ac      	mov	ip, r5
    213a:	4464      	add	r4, ip
    213c:	3409      	adds	r4, #9
    213e:	34ff      	adds	r4, #255	; 0xff
    2140:	2502      	movs	r5, #2
    2142:	7025      	strb	r5, [r4, #0]
    2144:	e7dc      	b.n	2100 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    2146:	2a01      	cmp	r2, #1
    2148:	d11a      	bne.n	2180 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    214a:	2b00      	cmp	r3, #0
    214c:	d105      	bne.n	215a <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    214e:	6802      	ldr	r2, [r0, #0]
    2150:	210c      	movs	r1, #12
    2152:	3309      	adds	r3, #9
    2154:	33ff      	adds	r3, #255	; 0xff
    2156:	54d1      	strb	r1, [r2, r3]
    2158:	e7de      	b.n	2118 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    215a:	b249      	sxtb	r1, r1
    215c:	2900      	cmp	r1, #0
    215e:	db07      	blt.n	2170 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    2160:	6802      	ldr	r2, [r0, #0]
    2162:	015b      	lsls	r3, r3, #5
    2164:	18d3      	adds	r3, r2, r3
    2166:	3309      	adds	r3, #9
    2168:	33ff      	adds	r3, #255	; 0xff
    216a:	2204      	movs	r2, #4
    216c:	701a      	strb	r2, [r3, #0]
    216e:	e7d3      	b.n	2118 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    2170:	6802      	ldr	r2, [r0, #0]
    2172:	015b      	lsls	r3, r3, #5
    2174:	18d3      	adds	r3, r2, r3
    2176:	3309      	adds	r3, #9
    2178:	33ff      	adds	r3, #255	; 0xff
    217a:	2208      	movs	r2, #8
    217c:	701a      	strb	r2, [r3, #0]
    217e:	e7cb      	b.n	2118 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    2180:	2a02      	cmp	r2, #2
    2182:	d1bd      	bne.n	2100 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    2184:	6802      	ldr	r2, [r0, #0]
    2186:	015b      	lsls	r3, r3, #5
    2188:	18d3      	adds	r3, r2, r3
    218a:	3309      	adds	r3, #9
    218c:	33ff      	adds	r3, #255	; 0xff
    218e:	2210      	movs	r2, #16
    2190:	701a      	strb	r2, [r3, #0]
    2192:	e7c1      	b.n	2118 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    2194:	6802      	ldr	r2, [r0, #0]
    2196:	015b      	lsls	r3, r3, #5
    2198:	18d3      	adds	r3, r2, r3
    219a:	3309      	adds	r3, #9
    219c:	33ff      	adds	r3, #255	; 0xff
    219e:	2240      	movs	r2, #64	; 0x40
    21a0:	701a      	strb	r2, [r3, #0]
    21a2:	e7b9      	b.n	2118 <usb_device_endpoint_disable_callback+0x40>
    21a4:	00003270 	.word	0x00003270

000021a8 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    21a8:	2300      	movs	r3, #0
    21aa:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    21ac:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    21ae:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    21b0:	3301      	adds	r3, #1
    21b2:	70c3      	strb	r3, [r0, #3]
}
    21b4:	4770      	bx	lr
	...

000021b8 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    21b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    21ba:	780c      	ldrb	r4, [r1, #0]
    21bc:	230f      	movs	r3, #15
    21be:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    21c0:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    21c2:	78ca      	ldrb	r2, [r1, #3]
    21c4:	2a04      	cmp	r2, #4
    21c6:	d870      	bhi.n	22aa <usb_device_endpoint_set_config+0xf2>
    21c8:	0092      	lsls	r2, r2, #2
    21ca:	4d89      	ldr	r5, [pc, #548]	; (23f0 <usb_device_endpoint_set_config+0x238>)
    21cc:	58aa      	ldr	r2, [r5, r2]
    21ce:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    21d0:	6802      	ldr	r2, [r0, #0]
    21d2:	3308      	adds	r3, #8
    21d4:	015b      	lsls	r3, r3, #5
    21d6:	2100      	movs	r1, #0
    21d8:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    21da:	2200      	movs	r2, #0
    21dc:	e082      	b.n	22e4 <usb_device_endpoint_set_config+0x12c>
    21de:	015c      	lsls	r4, r3, #5
    21e0:	6802      	ldr	r2, [r0, #0]
    21e2:	4694      	mov	ip, r2
    21e4:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    21e6:	2280      	movs	r2, #128	; 0x80
    21e8:	0052      	lsls	r2, r2, #1
    21ea:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    21ec:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    21ee:	076d      	lsls	r5, r5, #29
    21f0:	d178      	bne.n	22e4 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    21f2:	32e4      	adds	r2, #228	; 0xe4
    21f4:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    21f6:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    21f8:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    21fa:	422e      	tst	r6, r5
    21fc:	d172      	bne.n	22e4 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    21fe:	3d5f      	subs	r5, #95	; 0x5f
    2200:	32e4      	adds	r2, #228	; 0xe4
    2202:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2204:	001a      	movs	r2, r3
    2206:	3208      	adds	r2, #8
    2208:	0152      	lsls	r2, r2, #5
    220a:	6804      	ldr	r4, [r0, #0]
    220c:	18a4      	adds	r4, r4, r2
    220e:	352f      	adds	r5, #47	; 0x2f
    2210:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2212:	6800      	ldr	r0, [r0, #0]
    2214:	1882      	adds	r2, r0, r2
    2216:	2080      	movs	r0, #128	; 0x80
    2218:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    221a:	788a      	ldrb	r2, [r1, #2]
    221c:	2a00      	cmp	r2, #0
    221e:	d01f      	beq.n	2260 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2220:	0158      	lsls	r0, r3, #5
    2222:	4a74      	ldr	r2, [pc, #464]	; (23f4 <usb_device_endpoint_set_config+0x23c>)
    2224:	1812      	adds	r2, r2, r0
    2226:	6854      	ldr	r4, [r2, #4]
    2228:	2080      	movs	r0, #128	; 0x80
    222a:	0600      	lsls	r0, r0, #24
    222c:	4304      	orrs	r4, r0
    222e:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2230:	6954      	ldr	r4, [r2, #20]
    2232:	4320      	orrs	r0, r4
    2234:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2236:	2507      	movs	r5, #7
    2238:	784c      	ldrb	r4, [r1, #1]
    223a:	015a      	lsls	r2, r3, #5
    223c:	4b6d      	ldr	r3, [pc, #436]	; (23f4 <usb_device_endpoint_set_config+0x23c>)
    223e:	189b      	adds	r3, r3, r2
    2240:	6858      	ldr	r0, [r3, #4]
    2242:	402c      	ands	r4, r5
    2244:	0724      	lsls	r4, r4, #28
    2246:	4e6c      	ldr	r6, [pc, #432]	; (23f8 <usb_device_endpoint_set_config+0x240>)
    2248:	4030      	ands	r0, r6
    224a:	4320      	orrs	r0, r4
    224c:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    224e:	7849      	ldrb	r1, [r1, #1]
    2250:	695a      	ldr	r2, [r3, #20]
    2252:	4029      	ands	r1, r5
    2254:	0709      	lsls	r1, r1, #28
    2256:	4032      	ands	r2, r6
    2258:	430a      	orrs	r2, r1
    225a:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    225c:	2200      	movs	r2, #0
    225e:	e041      	b.n	22e4 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2260:	0158      	lsls	r0, r3, #5
    2262:	4a64      	ldr	r2, [pc, #400]	; (23f4 <usb_device_endpoint_set_config+0x23c>)
    2264:	1812      	adds	r2, r2, r0
    2266:	6850      	ldr	r0, [r2, #4]
    2268:	0040      	lsls	r0, r0, #1
    226a:	0840      	lsrs	r0, r0, #1
    226c:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    226e:	6950      	ldr	r0, [r2, #20]
    2270:	0040      	lsls	r0, r0, #1
    2272:	0840      	lsrs	r0, r0, #1
    2274:	6150      	str	r0, [r2, #20]
    2276:	e7de      	b.n	2236 <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    2278:	2c00      	cmp	r4, #0
    227a:	db35      	blt.n	22e8 <usb_device_endpoint_set_config+0x130>
    227c:	015d      	lsls	r5, r3, #5
    227e:	6802      	ldr	r2, [r0, #0]
    2280:	4694      	mov	ip, r2
    2282:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2284:	2280      	movs	r2, #128	; 0x80
    2286:	0052      	lsls	r2, r2, #1
    2288:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    228a:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    228c:	0776      	lsls	r6, r6, #29
    228e:	d129      	bne.n	22e4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    2290:	2680      	movs	r6, #128	; 0x80
    2292:	0076      	lsls	r6, r6, #1
    2294:	5daa      	ldrb	r2, [r5, r6]
    2296:	2702      	movs	r7, #2
    2298:	433a      	orrs	r2, r7
    229a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    229c:	6802      	ldr	r2, [r0, #0]
    229e:	0018      	movs	r0, r3
    22a0:	3008      	adds	r0, #8
    22a2:	0140      	lsls	r0, r0, #5
    22a4:	1812      	adds	r2, r2, r0
    22a6:	2040      	movs	r0, #64	; 0x40
    22a8:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    22aa:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    22ac:	784f      	ldrb	r7, [r1, #1]
    22ae:	005d      	lsls	r5, r3, #1
    22b0:	18ad      	adds	r5, r5, r2
    22b2:	012d      	lsls	r5, r5, #4
    22b4:	4e4f      	ldr	r6, [pc, #316]	; (23f4 <usb_device_endpoint_set_config+0x23c>)
    22b6:	1975      	adds	r5, r6, r5
    22b8:	6868      	ldr	r0, [r5, #4]
    22ba:	2407      	movs	r4, #7
    22bc:	403c      	ands	r4, r7
    22be:	0724      	lsls	r4, r4, #28
    22c0:	4e4d      	ldr	r6, [pc, #308]	; (23f8 <usb_device_endpoint_set_config+0x240>)
    22c2:	4030      	ands	r0, r6
    22c4:	4320      	orrs	r0, r4
    22c6:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    22c8:	7889      	ldrb	r1, [r1, #2]
    22ca:	2900      	cmp	r1, #0
    22cc:	d000      	beq.n	22d0 <usb_device_endpoint_set_config+0x118>
    22ce:	e088      	b.n	23e2 <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    22d0:	005b      	lsls	r3, r3, #1
    22d2:	189b      	adds	r3, r3, r2
    22d4:	011b      	lsls	r3, r3, #4
    22d6:	4a47      	ldr	r2, [pc, #284]	; (23f4 <usb_device_endpoint_set_config+0x23c>)
    22d8:	18d3      	adds	r3, r2, r3
    22da:	685a      	ldr	r2, [r3, #4]
    22dc:	0052      	lsls	r2, r2, #1
    22de:	0852      	lsrs	r2, r2, #1
    22e0:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    22e2:	2200      	movs	r2, #0
}
    22e4:	0010      	movs	r0, r2
    22e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22e8:	015d      	lsls	r5, r3, #5
    22ea:	6802      	ldr	r2, [r0, #0]
    22ec:	4694      	mov	ip, r2
    22ee:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    22f0:	2280      	movs	r2, #128	; 0x80
    22f2:	0052      	lsls	r2, r2, #1
    22f4:	5caf      	ldrb	r7, [r5, r2]
    22f6:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    22f8:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    22fa:	4237      	tst	r7, r6
    22fc:	d1f2      	bne.n	22e4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    22fe:	3690      	adds	r6, #144	; 0x90
    2300:	5daa      	ldrb	r2, [r5, r6]
    2302:	2720      	movs	r7, #32
    2304:	433a      	orrs	r2, r7
    2306:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2308:	6802      	ldr	r2, [r0, #0]
    230a:	0018      	movs	r0, r3
    230c:	3008      	adds	r0, #8
    230e:	0140      	lsls	r0, r0, #5
    2310:	1812      	adds	r2, r2, r0
    2312:	2080      	movs	r0, #128	; 0x80
    2314:	7110      	strb	r0, [r2, #4]
    2316:	e7c8      	b.n	22aa <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    2318:	2c00      	cmp	r4, #0
    231a:	db17      	blt.n	234c <usb_device_endpoint_set_config+0x194>
    231c:	015d      	lsls	r5, r3, #5
    231e:	6802      	ldr	r2, [r0, #0]
    2320:	4694      	mov	ip, r2
    2322:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2324:	2280      	movs	r2, #128	; 0x80
    2326:	0052      	lsls	r2, r2, #1
    2328:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    232a:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    232c:	0776      	lsls	r6, r6, #29
    232e:	d1d9      	bne.n	22e4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    2330:	2680      	movs	r6, #128	; 0x80
    2332:	0076      	lsls	r6, r6, #1
    2334:	5daa      	ldrb	r2, [r5, r6]
    2336:	2703      	movs	r7, #3
    2338:	433a      	orrs	r2, r7
    233a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    233c:	6802      	ldr	r2, [r0, #0]
    233e:	0018      	movs	r0, r3
    2340:	3008      	adds	r0, #8
    2342:	0140      	lsls	r0, r0, #5
    2344:	1812      	adds	r2, r2, r0
    2346:	2040      	movs	r0, #64	; 0x40
    2348:	7150      	strb	r0, [r2, #5]
    234a:	e7ae      	b.n	22aa <usb_device_endpoint_set_config+0xf2>
    234c:	015d      	lsls	r5, r3, #5
    234e:	6802      	ldr	r2, [r0, #0]
    2350:	4694      	mov	ip, r2
    2352:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2354:	2280      	movs	r2, #128	; 0x80
    2356:	0052      	lsls	r2, r2, #1
    2358:	5caf      	ldrb	r7, [r5, r2]
    235a:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    235c:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    235e:	4237      	tst	r7, r6
    2360:	d1c0      	bne.n	22e4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    2362:	3690      	adds	r6, #144	; 0x90
    2364:	5daa      	ldrb	r2, [r5, r6]
    2366:	2730      	movs	r7, #48	; 0x30
    2368:	433a      	orrs	r2, r7
    236a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    236c:	6802      	ldr	r2, [r0, #0]
    236e:	0018      	movs	r0, r3
    2370:	3008      	adds	r0, #8
    2372:	0140      	lsls	r0, r0, #5
    2374:	1812      	adds	r2, r2, r0
    2376:	2080      	movs	r0, #128	; 0x80
    2378:	7110      	strb	r0, [r2, #4]
    237a:	e796      	b.n	22aa <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    237c:	2c00      	cmp	r4, #0
    237e:	db17      	blt.n	23b0 <usb_device_endpoint_set_config+0x1f8>
    2380:	015d      	lsls	r5, r3, #5
    2382:	6802      	ldr	r2, [r0, #0]
    2384:	4694      	mov	ip, r2
    2386:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2388:	2280      	movs	r2, #128	; 0x80
    238a:	0052      	lsls	r2, r2, #1
    238c:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    238e:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2390:	0776      	lsls	r6, r6, #29
    2392:	d1a7      	bne.n	22e4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    2394:	2680      	movs	r6, #128	; 0x80
    2396:	0076      	lsls	r6, r6, #1
    2398:	5daa      	ldrb	r2, [r5, r6]
    239a:	2704      	movs	r7, #4
    239c:	433a      	orrs	r2, r7
    239e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    23a0:	6802      	ldr	r2, [r0, #0]
    23a2:	0018      	movs	r0, r3
    23a4:	3008      	adds	r0, #8
    23a6:	0140      	lsls	r0, r0, #5
    23a8:	1812      	adds	r2, r2, r0
    23aa:	2040      	movs	r0, #64	; 0x40
    23ac:	7150      	strb	r0, [r2, #5]
    23ae:	e77c      	b.n	22aa <usb_device_endpoint_set_config+0xf2>
    23b0:	015d      	lsls	r5, r3, #5
    23b2:	6802      	ldr	r2, [r0, #0]
    23b4:	4694      	mov	ip, r2
    23b6:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    23b8:	2280      	movs	r2, #128	; 0x80
    23ba:	0052      	lsls	r2, r2, #1
    23bc:	5caf      	ldrb	r7, [r5, r2]
    23be:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    23c0:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    23c2:	4237      	tst	r7, r6
    23c4:	d000      	beq.n	23c8 <usb_device_endpoint_set_config+0x210>
    23c6:	e78d      	b.n	22e4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    23c8:	3690      	adds	r6, #144	; 0x90
    23ca:	5daa      	ldrb	r2, [r5, r6]
    23cc:	2740      	movs	r7, #64	; 0x40
    23ce:	433a      	orrs	r2, r7
    23d0:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    23d2:	6802      	ldr	r2, [r0, #0]
    23d4:	0018      	movs	r0, r3
    23d6:	3008      	adds	r0, #8
    23d8:	0140      	lsls	r0, r0, #5
    23da:	1812      	adds	r2, r2, r0
    23dc:	2080      	movs	r0, #128	; 0x80
    23de:	7110      	strb	r0, [r2, #4]
    23e0:	e763      	b.n	22aa <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    23e2:	6869      	ldr	r1, [r5, #4]
    23e4:	2380      	movs	r3, #128	; 0x80
    23e6:	061b      	lsls	r3, r3, #24
    23e8:	430b      	orrs	r3, r1
    23ea:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    23ec:	2200      	movs	r2, #0
    23ee:	e779      	b.n	22e4 <usb_device_endpoint_set_config+0x12c>
    23f0:	0000324c 	.word	0x0000324c
    23f4:	200009d8 	.word	0x200009d8
    23f8:	8fffffff 	.word	0x8fffffff

000023fc <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    23fc:	230f      	movs	r3, #15
    23fe:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    2400:	b249      	sxtb	r1, r1
    2402:	2900      	cmp	r1, #0
    2404:	db0a      	blt.n	241c <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2406:	3308      	adds	r3, #8
    2408:	015b      	lsls	r3, r3, #5
    240a:	6802      	ldr	r2, [r0, #0]
    240c:	18d2      	adds	r2, r2, r3
    240e:	2140      	movs	r1, #64	; 0x40
    2410:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    2412:	6802      	ldr	r2, [r0, #0]
    2414:	18d3      	adds	r3, r2, r3
    2416:	2201      	movs	r2, #1
    2418:	71da      	strb	r2, [r3, #7]
	}
}
    241a:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    241c:	3308      	adds	r3, #8
    241e:	015b      	lsls	r3, r3, #5
    2420:	6802      	ldr	r2, [r0, #0]
    2422:	18d2      	adds	r2, r2, r3
    2424:	2180      	movs	r1, #128	; 0x80
    2426:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    2428:	6802      	ldr	r2, [r0, #0]
    242a:	18d3      	adds	r3, r2, r3
    242c:	2202      	movs	r2, #2
    242e:	71da      	strb	r2, [r3, #7]
    2430:	e7f3      	b.n	241a <usb_device_endpoint_abort_job+0x1e>

00002432 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2432:	230f      	movs	r3, #15
    2434:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    2436:	b249      	sxtb	r1, r1
    2438:	2900      	cmp	r1, #0
    243a:	db07      	blt.n	244c <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    243c:	6802      	ldr	r2, [r0, #0]
    243e:	3308      	adds	r3, #8
    2440:	015b      	lsls	r3, r3, #5
    2442:	18d3      	adds	r3, r2, r3
    2444:	7998      	ldrb	r0, [r3, #6]
    2446:	06c0      	lsls	r0, r0, #27
    2448:	0fc0      	lsrs	r0, r0, #31
	}
}
    244a:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    244c:	6802      	ldr	r2, [r0, #0]
    244e:	3308      	adds	r3, #8
    2450:	015b      	lsls	r3, r3, #5
    2452:	18d3      	adds	r3, r2, r3
    2454:	7998      	ldrb	r0, [r3, #6]
    2456:	0680      	lsls	r0, r0, #26
    2458:	0fc0      	lsrs	r0, r0, #31
    245a:	e7f6      	b.n	244a <usb_device_endpoint_is_halted+0x18>

0000245c <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    245c:	230f      	movs	r3, #15
    245e:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    2460:	b249      	sxtb	r1, r1
    2462:	2900      	cmp	r1, #0
    2464:	db06      	blt.n	2474 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    2466:	6802      	ldr	r2, [r0, #0]
    2468:	3308      	adds	r3, #8
    246a:	015b      	lsls	r3, r3, #5
    246c:	18d3      	adds	r3, r2, r3
    246e:	2210      	movs	r2, #16
    2470:	715a      	strb	r2, [r3, #5]
	}
}
    2472:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    2474:	6802      	ldr	r2, [r0, #0]
    2476:	3308      	adds	r3, #8
    2478:	015b      	lsls	r3, r3, #5
    247a:	18d3      	adds	r3, r2, r3
    247c:	2220      	movs	r2, #32
    247e:	715a      	strb	r2, [r3, #5]
    2480:	e7f7      	b.n	2472 <usb_device_endpoint_set_halt+0x16>

00002482 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    2482:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2484:	230f      	movs	r3, #15
    2486:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    2488:	b249      	sxtb	r1, r1
    248a:	2900      	cmp	r1, #0
    248c:	db1d      	blt.n	24ca <usb_device_endpoint_clear_halt+0x48>
    248e:	0159      	lsls	r1, r3, #5
    2490:	6802      	ldr	r2, [r0, #0]
    2492:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    2494:	2483      	movs	r4, #131	; 0x83
    2496:	0064      	lsls	r4, r4, #1
    2498:	5d14      	ldrb	r4, [r2, r4]
    249a:	06e4      	lsls	r4, r4, #27
    249c:	d514      	bpl.n	24c8 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    249e:	2510      	movs	r5, #16
    24a0:	2482      	movs	r4, #130	; 0x82
    24a2:	0064      	lsls	r4, r4, #1
    24a4:	5515      	strb	r5, [r2, r4]
    24a6:	6802      	ldr	r2, [r0, #0]
    24a8:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    24aa:	2108      	movs	r1, #8
    24ac:	31ff      	adds	r1, #255	; 0xff
    24ae:	5c51      	ldrb	r1, [r2, r1]
    24b0:	0689      	lsls	r1, r1, #26
    24b2:	d509      	bpl.n	24c8 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    24b4:	3ce4      	subs	r4, #228	; 0xe4
    24b6:	2108      	movs	r1, #8
    24b8:	31ff      	adds	r1, #255	; 0xff
    24ba:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    24bc:	6802      	ldr	r2, [r0, #0]
    24be:	3308      	adds	r3, #8
    24c0:	015b      	lsls	r3, r3, #5
    24c2:	18d3      	adds	r3, r2, r3
    24c4:	2201      	movs	r2, #1
    24c6:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    24c8:	bd30      	pop	{r4, r5, pc}
    24ca:	0159      	lsls	r1, r3, #5
    24cc:	6802      	ldr	r2, [r0, #0]
    24ce:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    24d0:	2483      	movs	r4, #131	; 0x83
    24d2:	0064      	lsls	r4, r4, #1
    24d4:	5d14      	ldrb	r4, [r2, r4]
    24d6:	06a4      	lsls	r4, r4, #26
    24d8:	d5f6      	bpl.n	24c8 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    24da:	2520      	movs	r5, #32
    24dc:	2482      	movs	r4, #130	; 0x82
    24de:	0064      	lsls	r4, r4, #1
    24e0:	5515      	strb	r5, [r2, r4]
    24e2:	6802      	ldr	r2, [r0, #0]
    24e4:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    24e6:	2108      	movs	r1, #8
    24e8:	31ff      	adds	r1, #255	; 0xff
    24ea:	5c51      	ldrb	r1, [r2, r1]
    24ec:	0649      	lsls	r1, r1, #25
    24ee:	d5eb      	bpl.n	24c8 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    24f0:	3cc4      	subs	r4, #196	; 0xc4
    24f2:	2108      	movs	r1, #8
    24f4:	31ff      	adds	r1, #255	; 0xff
    24f6:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    24f8:	6802      	ldr	r2, [r0, #0]
    24fa:	3308      	adds	r3, #8
    24fc:	015b      	lsls	r3, r3, #5
    24fe:	18d3      	adds	r3, r2, r3
    2500:	2202      	movs	r2, #2
    2502:	711a      	strb	r2, [r3, #4]
    2504:	e7e0      	b.n	24c8 <usb_device_endpoint_clear_halt+0x46>
	...

00002508 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    2508:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    250a:	000c      	movs	r4, r1
    250c:	3408      	adds	r4, #8
    250e:	0164      	lsls	r4, r4, #5
    2510:	6805      	ldr	r5, [r0, #0]
    2512:	5d64      	ldrb	r4, [r4, r5]
    2514:	0664      	lsls	r4, r4, #25
    2516:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    2518:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    251a:	2c00      	cmp	r4, #0
    251c:	d101      	bne.n	2522 <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    251e:	0028      	movs	r0, r5
    2520:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    2522:	014c      	lsls	r4, r1, #5
    2524:	4d0b      	ldr	r5, [pc, #44]	; (2554 <usb_device_endpoint_write_buffer_job+0x4c>)
    2526:	192d      	adds	r5, r5, r4
    2528:	002c      	movs	r4, r5
    252a:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    252c:	696a      	ldr	r2, [r5, #20]
    252e:	4d0a      	ldr	r5, [pc, #40]	; (2558 <usb_device_endpoint_write_buffer_job+0x50>)
    2530:	402a      	ands	r2, r5
    2532:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    2534:	6962      	ldr	r2, [r4, #20]
    2536:	049b      	lsls	r3, r3, #18
    2538:	0c9b      	lsrs	r3, r3, #18
    253a:	0b92      	lsrs	r2, r2, #14
    253c:	0392      	lsls	r2, r2, #14
    253e:	4313      	orrs	r3, r2
    2540:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    2542:	6803      	ldr	r3, [r0, #0]
    2544:	3108      	adds	r1, #8
    2546:	0149      	lsls	r1, r1, #5
    2548:	1859      	adds	r1, r3, r1
    254a:	2380      	movs	r3, #128	; 0x80
    254c:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    254e:	2500      	movs	r5, #0
    2550:	e7e5      	b.n	251e <usb_device_endpoint_write_buffer_job+0x16>
    2552:	46c0      	nop			; (mov r8, r8)
    2554:	200009d8 	.word	0x200009d8
    2558:	f0003fff 	.word	0xf0003fff

0000255c <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    255c:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    255e:	000c      	movs	r4, r1
    2560:	3408      	adds	r4, #8
    2562:	0164      	lsls	r4, r4, #5
    2564:	6805      	ldr	r5, [r0, #0]
    2566:	5d64      	ldrb	r4, [r4, r5]
    2568:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    256a:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    256c:	2c00      	cmp	r4, #0
    256e:	d101      	bne.n	2574 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    2570:	0028      	movs	r0, r5
    2572:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    2574:	4c0b      	ldr	r4, [pc, #44]	; (25a4 <usb_device_endpoint_read_buffer_job+0x48>)
    2576:	014d      	lsls	r5, r1, #5
    2578:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    257a:	1962      	adds	r2, r4, r5
    257c:	6854      	ldr	r4, [r2, #4]
    257e:	049b      	lsls	r3, r3, #18
    2580:	091b      	lsrs	r3, r3, #4
    2582:	4d09      	ldr	r5, [pc, #36]	; (25a8 <usb_device_endpoint_read_buffer_job+0x4c>)
    2584:	402c      	ands	r4, r5
    2586:	4323      	orrs	r3, r4
    2588:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    258a:	6853      	ldr	r3, [r2, #4]
    258c:	0b9b      	lsrs	r3, r3, #14
    258e:	039b      	lsls	r3, r3, #14
    2590:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    2592:	6803      	ldr	r3, [r0, #0]
    2594:	3108      	adds	r1, #8
    2596:	0149      	lsls	r1, r1, #5
    2598:	1859      	adds	r1, r3, r1
    259a:	2340      	movs	r3, #64	; 0x40
    259c:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    259e:	2500      	movs	r5, #0
    25a0:	e7e6      	b.n	2570 <usb_device_endpoint_read_buffer_job+0x14>
    25a2:	46c0      	nop			; (mov r8, r8)
    25a4:	200009d8 	.word	0x200009d8
    25a8:	f0003fff 	.word	0xf0003fff

000025ac <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    25ac:	4b09      	ldr	r3, [pc, #36]	; (25d4 <usb_device_endpoint_setup_buffer_job+0x28>)
    25ae:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    25b0:	685a      	ldr	r2, [r3, #4]
    25b2:	4909      	ldr	r1, [pc, #36]	; (25d8 <usb_device_endpoint_setup_buffer_job+0x2c>)
    25b4:	4011      	ands	r1, r2
    25b6:	2280      	movs	r2, #128	; 0x80
    25b8:	0292      	lsls	r2, r2, #10
    25ba:	430a      	orrs	r2, r1
    25bc:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    25be:	685a      	ldr	r2, [r3, #4]
    25c0:	0b92      	lsrs	r2, r2, #14
    25c2:	0392      	lsls	r2, r2, #14
    25c4:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    25c6:	6802      	ldr	r2, [r0, #0]
    25c8:	2140      	movs	r1, #64	; 0x40
    25ca:	2382      	movs	r3, #130	; 0x82
    25cc:	005b      	lsls	r3, r3, #1
    25ce:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    25d0:	2000      	movs	r0, #0
    25d2:	4770      	bx	lr
    25d4:	200009d8 	.word	0x200009d8
    25d8:	f0003fff 	.word	0xf0003fff

000025dc <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    25dc:	6802      	ldr	r2, [r0, #0]
    25de:	7813      	ldrb	r3, [r2, #0]
    25e0:	2102      	movs	r1, #2
    25e2:	430b      	orrs	r3, r1
    25e4:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    25e6:	6802      	ldr	r2, [r0, #0]
    25e8:	7893      	ldrb	r3, [r2, #2]
    25ea:	2b02      	cmp	r3, #2
    25ec:	d0fc      	beq.n	25e8 <usb_enable+0xc>
}
    25ee:	4770      	bx	lr

000025f0 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    25f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    25f2:	46de      	mov	lr, fp
    25f4:	4657      	mov	r7, sl
    25f6:	464e      	mov	r6, r9
    25f8:	4645      	mov	r5, r8
    25fa:	b5e0      	push	{r5, r6, r7, lr}
    25fc:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    25fe:	4bc2      	ldr	r3, [pc, #776]	; (2908 <USB_Handler+0x318>)
    2600:	681f      	ldr	r7, [r3, #0]
    2602:	683d      	ldr	r5, [r7, #0]
    2604:	782b      	ldrb	r3, [r5, #0]
    2606:	09db      	lsrs	r3, r3, #7
    2608:	d114      	bne.n	2634 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    260a:	8c2e      	ldrh	r6, [r5, #32]
    260c:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    260e:	2e00      	cmp	r6, #0
    2610:	d000      	beq.n	2614 <USB_Handler+0x24>
    2612:	e1a7      	b.n	2964 <USB_Handler+0x374>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    2614:	8bae      	ldrh	r6, [r5, #28]
    2616:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    2618:	23ab      	movs	r3, #171	; 0xab
    261a:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    261c:	5afb      	ldrh	r3, [r7, r3]
    261e:	22aa      	movs	r2, #170	; 0xaa
    2620:	0052      	lsls	r2, r2, #1
    2622:	5abd      	ldrh	r5, [r7, r2]
    2624:	401d      	ands	r5, r3
    2626:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    2628:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    262a:	4fb8      	ldr	r7, [pc, #736]	; (290c <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    262c:	4bb6      	ldr	r3, [pc, #728]	; (2908 <USB_Handler+0x318>)
    262e:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    2630:	4698      	mov	r8, r3
    2632:	e182      	b.n	293a <USB_Handler+0x34a>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    2634:	8c2b      	ldrh	r3, [r5, #32]
    2636:	b29b      	uxth	r3, r3
    2638:	2b00      	cmp	r3, #0
    263a:	d100      	bne.n	263e <USB_Handler+0x4e>
    263c:	e0de      	b.n	27fc <USB_Handler+0x20c>
    263e:	8c28      	ldrh	r0, [r5, #32]
    2640:	b280      	uxth	r0, r0
    2642:	f000 fd9b 	bl	317c <__ctzsi2>
    2646:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    2648:	281f      	cmp	r0, #31
    264a:	d900      	bls.n	264e <USB_Handler+0x5e>
    264c:	e0d6      	b.n	27fc <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    264e:	0003      	movs	r3, r0
    2650:	3308      	adds	r3, #8
    2652:	015b      	lsls	r3, r3, #5
    2654:	18ed      	adds	r5, r5, r3
    2656:	79ed      	ldrb	r5, [r5, #7]
    2658:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    265a:	07ab      	lsls	r3, r5, #30
    265c:	d041      	beq.n	26e2 <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    265e:	4aac      	ldr	r2, [pc, #688]	; (2910 <USB_Handler+0x320>)
    2660:	2301      	movs	r3, #1
    2662:	4083      	lsls	r3, r0
    2664:	6811      	ldr	r1, [r2, #0]
    2666:	4399      	bics	r1, r3
    2668:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    266a:	0003      	movs	r3, r0
    266c:	3308      	adds	r3, #8
    266e:	015b      	lsls	r3, r3, #5
    2670:	683a      	ldr	r2, [r7, #0]
    2672:	4694      	mov	ip, r2
    2674:	4463      	add	r3, ip
    2676:	2203      	movs	r2, #3
    2678:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    267a:	183b      	adds	r3, r7, r0
    267c:	33ae      	adds	r3, #174	; 0xae
    267e:	781b      	ldrb	r3, [r3, #0]
    2680:	07db      	lsls	r3, r3, #31
    2682:	d52e      	bpl.n	26e2 <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    2684:	4ba3      	ldr	r3, [pc, #652]	; (2914 <USB_Handler+0x324>)
    2686:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    2688:	683a      	ldr	r2, [r7, #0]
    268a:	0003      	movs	r3, r0
    268c:	3308      	adds	r3, #8
    268e:	015b      	lsls	r3, r3, #5
    2690:	5c9b      	ldrb	r3, [r3, r2]
    2692:	079b      	lsls	r3, r3, #30
    2694:	0f9b      	lsrs	r3, r3, #30
    2696:	2b01      	cmp	r3, #1
    2698:	d100      	bne.n	269c <USB_Handler+0xac>
    269a:	e081      	b.n	27a0 <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    269c:	0142      	lsls	r2, r0, #5
    269e:	4b9e      	ldr	r3, [pc, #632]	; (2918 <USB_Handler+0x328>)
    26a0:	189b      	adds	r3, r3, r2
    26a2:	685a      	ldr	r2, [r3, #4]
    26a4:	0112      	lsls	r2, r2, #4
    26a6:	0c92      	lsrs	r2, r2, #18
    26a8:	b290      	uxth	r0, r2
    26aa:	499a      	ldr	r1, [pc, #616]	; (2914 <USB_Handler+0x324>)
    26ac:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    26ae:	685a      	ldr	r2, [r3, #4]
    26b0:	0492      	lsls	r2, r2, #18
    26b2:	0c92      	lsrs	r2, r2, #18
    26b4:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    26b6:	685a      	ldr	r2, [r3, #4]
    26b8:	4998      	ldr	r1, [pc, #608]	; (291c <USB_Handler+0x32c>)
    26ba:	400a      	ands	r2, r1
    26bc:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    26be:	2800      	cmp	r0, #0
    26c0:	d107      	bne.n	26d2 <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    26c2:	0162      	lsls	r2, r4, #5
    26c4:	4b94      	ldr	r3, [pc, #592]	; (2918 <USB_Handler+0x328>)
    26c6:	189b      	adds	r3, r3, r2
    26c8:	685b      	ldr	r3, [r3, #4]
    26ca:	049b      	lsls	r3, r3, #18
    26cc:	0c9b      	lsrs	r3, r3, #18
    26ce:	4a91      	ldr	r2, [pc, #580]	; (2914 <USB_Handler+0x324>)
    26d0:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    26d2:	4b8d      	ldr	r3, [pc, #564]	; (2908 <USB_Handler+0x318>)
    26d4:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    26d6:	1ca3      	adds	r3, r4, #2
    26d8:	011b      	lsls	r3, r3, #4
    26da:	18c3      	adds	r3, r0, r3
    26dc:	685b      	ldr	r3, [r3, #4]
    26de:	498d      	ldr	r1, [pc, #564]	; (2914 <USB_Handler+0x324>)
    26e0:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    26e2:	076b      	lsls	r3, r5, #29
    26e4:	d50e      	bpl.n	2704 <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    26e6:	4a8a      	ldr	r2, [pc, #552]	; (2910 <USB_Handler+0x320>)
    26e8:	2301      	movs	r3, #1
    26ea:	40a3      	lsls	r3, r4
    26ec:	6811      	ldr	r1, [r2, #0]
    26ee:	4399      	bics	r1, r3
    26f0:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    26f2:	4b85      	ldr	r3, [pc, #532]	; (2908 <USB_Handler+0x318>)
    26f4:	681b      	ldr	r3, [r3, #0]
    26f6:	681b      	ldr	r3, [r3, #0]
    26f8:	0022      	movs	r2, r4
    26fa:	3208      	adds	r2, #8
    26fc:	0152      	lsls	r2, r2, #5
    26fe:	189b      	adds	r3, r3, r2
    2700:	2204      	movs	r2, #4
    2702:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    2704:	072b      	lsls	r3, r5, #28
    2706:	d514      	bpl.n	2732 <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2708:	4a81      	ldr	r2, [pc, #516]	; (2910 <USB_Handler+0x320>)
    270a:	2301      	movs	r3, #1
    270c:	40a3      	lsls	r3, r4
    270e:	6811      	ldr	r1, [r2, #0]
    2710:	4399      	bics	r1, r3
    2712:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2714:	4b7c      	ldr	r3, [pc, #496]	; (2908 <USB_Handler+0x318>)
    2716:	6818      	ldr	r0, [r3, #0]
    2718:	0023      	movs	r3, r4
    271a:	3308      	adds	r3, #8
    271c:	015b      	lsls	r3, r3, #5
    271e:	6802      	ldr	r2, [r0, #0]
    2720:	4694      	mov	ip, r2
    2722:	4463      	add	r3, ip
    2724:	2208      	movs	r2, #8
    2726:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2728:	1903      	adds	r3, r0, r4
    272a:	33ae      	adds	r3, #174	; 0xae
    272c:	781b      	ldrb	r3, [r3, #0]
    272e:	079b      	lsls	r3, r3, #30
    2730:	d447      	bmi.n	27c2 <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    2732:	06eb      	lsls	r3, r5, #27
    2734:	d514      	bpl.n	2760 <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2736:	4a76      	ldr	r2, [pc, #472]	; (2910 <USB_Handler+0x320>)
    2738:	2301      	movs	r3, #1
    273a:	40a3      	lsls	r3, r4
    273c:	6811      	ldr	r1, [r2, #0]
    273e:	4399      	bics	r1, r3
    2740:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2742:	4b71      	ldr	r3, [pc, #452]	; (2908 <USB_Handler+0x318>)
    2744:	6818      	ldr	r0, [r3, #0]
    2746:	0023      	movs	r3, r4
    2748:	3308      	adds	r3, #8
    274a:	015b      	lsls	r3, r3, #5
    274c:	6802      	ldr	r2, [r0, #0]
    274e:	4694      	mov	ip, r2
    2750:	4463      	add	r3, ip
    2752:	2210      	movs	r2, #16
    2754:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2756:	1903      	adds	r3, r0, r4
    2758:	33ae      	adds	r3, #174	; 0xae
    275a:	781b      	ldrb	r3, [r3, #0]
    275c:	075b      	lsls	r3, r3, #29
    275e:	d43e      	bmi.n	27de <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    2760:	06ab      	lsls	r3, r5, #26
    2762:	d400      	bmi.n	2766 <USB_Handler+0x176>
    2764:	e0b0      	b.n	28c8 <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2766:	4a6a      	ldr	r2, [pc, #424]	; (2910 <USB_Handler+0x320>)
    2768:	2301      	movs	r3, #1
    276a:	40a3      	lsls	r3, r4
    276c:	6811      	ldr	r1, [r2, #0]
    276e:	4399      	bics	r1, r3
    2770:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2772:	4b65      	ldr	r3, [pc, #404]	; (2908 <USB_Handler+0x318>)
    2774:	6818      	ldr	r0, [r3, #0]
    2776:	0023      	movs	r3, r4
    2778:	3308      	adds	r3, #8
    277a:	015b      	lsls	r3, r3, #5
    277c:	6802      	ldr	r2, [r0, #0]
    277e:	4694      	mov	ip, r2
    2780:	4463      	add	r3, ip
    2782:	2220      	movs	r2, #32
    2784:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2786:	1903      	adds	r3, r0, r4
    2788:	33ae      	adds	r3, #174	; 0xae
    278a:	781b      	ldrb	r3, [r3, #0]
    278c:	071b      	lsls	r3, r3, #28
    278e:	d400      	bmi.n	2792 <USB_Handler+0x1a2>
    2790:	e09a      	b.n	28c8 <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
    2792:	4960      	ldr	r1, [pc, #384]	; (2914 <USB_Handler+0x324>)
    2794:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    2796:	0124      	lsls	r4, r4, #4
    2798:	1904      	adds	r4, r0, r4
    279a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    279c:	4798      	blx	r3
    279e:	e093      	b.n	28c8 <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    27a0:	0142      	lsls	r2, r0, #5
    27a2:	4b5d      	ldr	r3, [pc, #372]	; (2918 <USB_Handler+0x328>)
    27a4:	189b      	adds	r3, r3, r2
    27a6:	685a      	ldr	r2, [r3, #4]
    27a8:	0492      	lsls	r2, r2, #18
    27aa:	0c92      	lsrs	r2, r2, #18
    27ac:	4959      	ldr	r1, [pc, #356]	; (2914 <USB_Handler+0x324>)
    27ae:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    27b0:	685a      	ldr	r2, [r3, #4]
    27b2:	0112      	lsls	r2, r2, #4
    27b4:	0c92      	lsrs	r2, r2, #18
    27b6:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    27b8:	685a      	ldr	r2, [r3, #4]
    27ba:	0b92      	lsrs	r2, r2, #14
    27bc:	0392      	lsls	r2, r2, #14
    27be:	605a      	str	r2, [r3, #4]
    27c0:	e787      	b.n	26d2 <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
    27c2:	4954      	ldr	r1, [pc, #336]	; (2914 <USB_Handler+0x324>)
    27c4:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    27c6:	0162      	lsls	r2, r4, #5
    27c8:	4b53      	ldr	r3, [pc, #332]	; (2918 <USB_Handler+0x328>)
    27ca:	189b      	adds	r3, r3, r2
    27cc:	89db      	ldrh	r3, [r3, #14]
    27ce:	221f      	movs	r2, #31
    27d0:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    27d2:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    27d4:	0123      	lsls	r3, r4, #4
    27d6:	18c3      	adds	r3, r0, r3
    27d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    27da:	4798      	blx	r3
    27dc:	e7a9      	b.n	2732 <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
    27de:	494d      	ldr	r1, [pc, #308]	; (2914 <USB_Handler+0x324>)
    27e0:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    27e2:	0162      	lsls	r2, r4, #5
    27e4:	4b4c      	ldr	r3, [pc, #304]	; (2918 <USB_Handler+0x328>)
    27e6:	189b      	adds	r3, r3, r2
    27e8:	685b      	ldr	r3, [r3, #4]
    27ea:	011b      	lsls	r3, r3, #4
    27ec:	0c9b      	lsrs	r3, r3, #18
    27ee:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    27f0:	0123      	lsls	r3, r4, #4
    27f2:	18c3      	adds	r3, r0, r3
    27f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    27f6:	2100      	movs	r1, #0
    27f8:	4798      	blx	r3
    27fa:	e7b1      	b.n	2760 <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    27fc:	8bac      	ldrh	r4, [r5, #28]
    27fe:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    2800:	0763      	lsls	r3, r4, #29
    2802:	d505      	bpl.n	2810 <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    2804:	2304      	movs	r3, #4
    2806:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    2808:	33a1      	adds	r3, #161	; 0xa1
    280a:	5cfb      	ldrb	r3, [r7, r3]
    280c:	07db      	lsls	r3, r3, #31
    280e:	d462      	bmi.n	28d6 <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
    2810:	0723      	lsls	r3, r4, #28
    2812:	d50b      	bpl.n	282c <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
    2814:	2200      	movs	r2, #0
    2816:	4b3e      	ldr	r3, [pc, #248]	; (2910 <USB_Handler+0x320>)
    2818:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    281a:	4b3b      	ldr	r3, [pc, #236]	; (2908 <USB_Handler+0x318>)
    281c:	6818      	ldr	r0, [r3, #0]
    281e:	2308      	movs	r3, #8
    2820:	6802      	ldr	r2, [r0, #0]
    2822:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    2824:	339d      	adds	r3, #157	; 0x9d
    2826:	5cc3      	ldrb	r3, [r0, r3]
    2828:	079b      	lsls	r3, r3, #30
    282a:	d458      	bmi.n	28de <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    282c:	0663      	lsls	r3, r4, #25
    282e:	d508      	bpl.n	2842 <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    2830:	4b35      	ldr	r3, [pc, #212]	; (2908 <USB_Handler+0x318>)
    2832:	6818      	ldr	r0, [r3, #0]
    2834:	2340      	movs	r3, #64	; 0x40
    2836:	6802      	ldr	r2, [r0, #0]
    2838:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    283a:	3365      	adds	r3, #101	; 0x65
    283c:	5cc3      	ldrb	r3, [r0, r3]
    283e:	06db      	lsls	r3, r3, #27
    2840:	d450      	bmi.n	28e4 <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    2842:	06a3      	lsls	r3, r4, #26
    2844:	d508      	bpl.n	2858 <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    2846:	4b30      	ldr	r3, [pc, #192]	; (2908 <USB_Handler+0x318>)
    2848:	6818      	ldr	r0, [r3, #0]
    284a:	2320      	movs	r3, #32
    284c:	6802      	ldr	r2, [r0, #0]
    284e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    2850:	3385      	adds	r3, #133	; 0x85
    2852:	5cc3      	ldrb	r3, [r0, r3]
    2854:	071b      	lsls	r3, r3, #28
    2856:	d448      	bmi.n	28ea <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    2858:	06e3      	lsls	r3, r4, #27
    285a:	d508      	bpl.n	286e <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    285c:	4b2a      	ldr	r3, [pc, #168]	; (2908 <USB_Handler+0x318>)
    285e:	6818      	ldr	r0, [r3, #0]
    2860:	2310      	movs	r3, #16
    2862:	6802      	ldr	r2, [r0, #0]
    2864:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    2866:	3395      	adds	r3, #149	; 0x95
    2868:	5cc3      	ldrb	r3, [r0, r3]
    286a:	075b      	lsls	r3, r3, #29
    286c:	d440      	bmi.n	28f0 <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    286e:	0623      	lsls	r3, r4, #24
    2870:	d50b      	bpl.n	288a <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
    2872:	2200      	movs	r2, #0
    2874:	4b26      	ldr	r3, [pc, #152]	; (2910 <USB_Handler+0x320>)
    2876:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    2878:	4b23      	ldr	r3, [pc, #140]	; (2908 <USB_Handler+0x318>)
    287a:	6818      	ldr	r0, [r3, #0]
    287c:	2380      	movs	r3, #128	; 0x80
    287e:	6802      	ldr	r2, [r0, #0]
    2880:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    2882:	3325      	adds	r3, #37	; 0x25
    2884:	5cc3      	ldrb	r3, [r0, r3]
    2886:	069b      	lsls	r3, r3, #26
    2888:	d435      	bmi.n	28f6 <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    288a:	05e3      	lsls	r3, r4, #23
    288c:	d50c      	bpl.n	28a8 <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
    288e:	2200      	movs	r2, #0
    2890:	4b1f      	ldr	r3, [pc, #124]	; (2910 <USB_Handler+0x320>)
    2892:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    2894:	4b1c      	ldr	r3, [pc, #112]	; (2908 <USB_Handler+0x318>)
    2896:	6818      	ldr	r0, [r3, #0]
    2898:	2380      	movs	r3, #128	; 0x80
    289a:	005b      	lsls	r3, r3, #1
    289c:	6802      	ldr	r2, [r0, #0]
    289e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    28a0:	3b5b      	subs	r3, #91	; 0x5b
    28a2:	5cc3      	ldrb	r3, [r0, r3]
    28a4:	065b      	lsls	r3, r3, #25
    28a6:	d429      	bmi.n	28fc <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    28a8:	05a3      	lsls	r3, r4, #22
    28aa:	d50d      	bpl.n	28c8 <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
    28ac:	2200      	movs	r2, #0
    28ae:	4b18      	ldr	r3, [pc, #96]	; (2910 <USB_Handler+0x320>)
    28b0:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    28b2:	4b15      	ldr	r3, [pc, #84]	; (2908 <USB_Handler+0x318>)
    28b4:	6818      	ldr	r0, [r3, #0]
    28b6:	2380      	movs	r3, #128	; 0x80
    28b8:	009b      	lsls	r3, r3, #2
    28ba:	6802      	ldr	r2, [r0, #0]
    28bc:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    28be:	3b5c      	subs	r3, #92	; 0x5c
    28c0:	3bff      	subs	r3, #255	; 0xff
    28c2:	5cc3      	ldrb	r3, [r0, r3]
    28c4:	2b7f      	cmp	r3, #127	; 0x7f
    28c6:	d81c      	bhi.n	2902 <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    28c8:	b003      	add	sp, #12
    28ca:	bc3c      	pop	{r2, r3, r4, r5}
    28cc:	4690      	mov	r8, r2
    28ce:	4699      	mov	r9, r3
    28d0:	46a2      	mov	sl, r4
    28d2:	46ab      	mov	fp, r5
    28d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    28d6:	687b      	ldr	r3, [r7, #4]
    28d8:	0038      	movs	r0, r7
    28da:	4798      	blx	r3
    28dc:	e798      	b.n	2810 <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    28de:	6883      	ldr	r3, [r0, #8]
    28e0:	4798      	blx	r3
    28e2:	e7a3      	b.n	282c <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    28e4:	6943      	ldr	r3, [r0, #20]
    28e6:	4798      	blx	r3
    28e8:	e7ab      	b.n	2842 <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    28ea:	6903      	ldr	r3, [r0, #16]
    28ec:	4798      	blx	r3
    28ee:	e7b3      	b.n	2858 <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    28f0:	68c3      	ldr	r3, [r0, #12]
    28f2:	4798      	blx	r3
    28f4:	e7bb      	b.n	286e <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    28f6:	6983      	ldr	r3, [r0, #24]
    28f8:	4798      	blx	r3
    28fa:	e7c6      	b.n	288a <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    28fc:	69c3      	ldr	r3, [r0, #28]
    28fe:	4798      	blx	r3
    2900:	e7d2      	b.n	28a8 <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    2902:	6a03      	ldr	r3, [r0, #32]
    2904:	4798      	blx	r3
    2906:	e7df      	b.n	28c8 <USB_Handler+0x2d8>
    2908:	20000634 	.word	0x20000634
    290c:	00003260 	.word	0x00003260
    2910:	20000644 	.word	0x20000644
    2914:	20000648 	.word	0x20000648
    2918:	200009d8 	.word	0x200009d8
    291c:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    2920:	0023      	movs	r3, r4
    2922:	332e      	adds	r3, #46	; 0x2e
    2924:	009b      	lsls	r3, r3, #2
    2926:	4642      	mov	r2, r8
    2928:	6812      	ldr	r2, [r2, #0]
    292a:	589b      	ldr	r3, [r3, r2]
    292c:	499e      	ldr	r1, [pc, #632]	; (2ba8 <USB_Handler+0x5b8>)
    292e:	4642      	mov	r2, r8
    2930:	6810      	ldr	r0, [r2, #0]
    2932:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    2934:	3401      	adds	r4, #1
    2936:	2c07      	cmp	r4, #7
    2938:	d0c6      	beq.n	28c8 <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
    293a:	0063      	lsls	r3, r4, #1
    293c:	5bdb      	ldrh	r3, [r3, r7]
    293e:	4233      	tst	r3, r6
    2940:	d003      	beq.n	294a <USB_Handler+0x35a>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    2942:	464a      	mov	r2, r9
    2944:	6812      	ldr	r2, [r2, #0]
    2946:	6812      	ldr	r2, [r2, #0]
    2948:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    294a:	422b      	tst	r3, r5
    294c:	d0f2      	beq.n	2934 <USB_Handler+0x344>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    294e:	2c06      	cmp	r4, #6
    2950:	d1e6      	bne.n	2920 <USB_Handler+0x330>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    2952:	4b96      	ldr	r3, [pc, #600]	; (2bac <USB_Handler+0x5bc>)
    2954:	891b      	ldrh	r3, [r3, #8]
    2956:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    2958:	2280      	movs	r2, #128	; 0x80
    295a:	0052      	lsls	r2, r2, #1
    295c:	4013      	ands	r3, r2
    295e:	4a92      	ldr	r2, [pc, #584]	; (2ba8 <USB_Handler+0x5b8>)
    2960:	6013      	str	r3, [r2, #0]
    2962:	e7dd      	b.n	2920 <USB_Handler+0x330>
    2964:	003c      	movs	r4, r7
    2966:	3459      	adds	r4, #89	; 0x59
    2968:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    296a:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    296c:	2201      	movs	r2, #1
    296e:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    2970:	325f      	adds	r2, #95	; 0x5f
    2972:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2974:	3a50      	subs	r2, #80	; 0x50
    2976:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    2978:	3a0d      	subs	r2, #13
    297a:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    297c:	46b8      	mov	r8, r7
    297e:	002f      	movs	r7, r5
    2980:	e0b9      	b.n	2af6 <USB_Handler+0x506>
    2982:	002a      	movs	r2, r5
    2984:	003d      	movs	r5, r7
    2986:	4647      	mov	r7, r8
    2988:	4690      	mov	r8, r2
    298a:	015b      	lsls	r3, r3, #5
    298c:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    298e:	2308      	movs	r3, #8
    2990:	33ff      	adds	r3, #255	; 0xff
    2992:	5ceb      	ldrb	r3, [r5, r3]
    2994:	065b      	lsls	r3, r3, #25
    2996:	d516      	bpl.n	29c6 <USB_Handler+0x3d6>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    2998:	2240      	movs	r2, #64	; 0x40
    299a:	2308      	movs	r3, #8
    299c:	33ff      	adds	r3, #255	; 0xff
    299e:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    29a0:	3b88      	subs	r3, #136	; 0x88
    29a2:	3bff      	subs	r3, #255	; 0xff
    29a4:	4642      	mov	r2, r8
    29a6:	4313      	orrs	r3, r2
    29a8:	4a81      	ldr	r2, [pc, #516]	; (2bb0 <USB_Handler+0x5c0>)
    29aa:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    29ac:	2360      	movs	r3, #96	; 0x60
    29ae:	420b      	tst	r3, r1
    29b0:	d100      	bne.n	29b4 <USB_Handler+0x3c4>
    29b2:	e789      	b.n	28c8 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    29b4:	9b01      	ldr	r3, [sp, #4]
    29b6:	011b      	lsls	r3, r3, #4
    29b8:	18fb      	adds	r3, r7, r3
    29ba:	33e0      	adds	r3, #224	; 0xe0
    29bc:	681b      	ldr	r3, [r3, #0]
    29be:	497c      	ldr	r1, [pc, #496]	; (2bb0 <USB_Handler+0x5c0>)
    29c0:	0038      	movs	r0, r7
    29c2:	4798      	blx	r3
    29c4:	e780      	b.n	28c8 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    29c6:	2308      	movs	r3, #8
    29c8:	33ff      	adds	r3, #255	; 0xff
    29ca:	5ceb      	ldrb	r3, [r5, r3]
    29cc:	069b      	lsls	r3, r3, #26
    29ce:	d5ed      	bpl.n	29ac <USB_Handler+0x3bc>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    29d0:	2220      	movs	r2, #32
    29d2:	2308      	movs	r3, #8
    29d4:	33ff      	adds	r3, #255	; 0xff
    29d6:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    29d8:	4b75      	ldr	r3, [pc, #468]	; (2bb0 <USB_Handler+0x5c0>)
    29da:	4642      	mov	r2, r8
    29dc:	719a      	strb	r2, [r3, #6]
    29de:	e7e5      	b.n	29ac <USB_Handler+0x3bc>
    29e0:	003d      	movs	r5, r7
    29e2:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    29e4:	9a01      	ldr	r2, [sp, #4]
    29e6:	0013      	movs	r3, r2
    29e8:	3308      	adds	r3, #8
    29ea:	015b      	lsls	r3, r3, #5
    29ec:	18ed      	adds	r5, r5, r3
    29ee:	2310      	movs	r3, #16
    29f0:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    29f2:	18bb      	adds	r3, r7, r2
    29f4:	3361      	adds	r3, #97	; 0x61
    29f6:	33ff      	adds	r3, #255	; 0xff
    29f8:	781b      	ldrb	r3, [r3, #0]
    29fa:	06db      	lsls	r3, r3, #27
    29fc:	d400      	bmi.n	2a00 <USB_Handler+0x410>
    29fe:	e763      	b.n	28c8 <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    2a00:	0010      	movs	r0, r2
    2a02:	0152      	lsls	r2, r2, #5
    2a04:	4b69      	ldr	r3, [pc, #420]	; (2bac <USB_Handler+0x5bc>)
    2a06:	189b      	adds	r3, r3, r2
    2a08:	685b      	ldr	r3, [r3, #4]
    2a0a:	049b      	lsls	r3, r3, #18
    2a0c:	0c9b      	lsrs	r3, r3, #18
    2a0e:	4968      	ldr	r1, [pc, #416]	; (2bb0 <USB_Handler+0x5c0>)
    2a10:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    2a12:	0103      	lsls	r3, r0, #4
    2a14:	18fb      	adds	r3, r7, r3
    2a16:	33dc      	adds	r3, #220	; 0xdc
    2a18:	681b      	ldr	r3, [r3, #0]
    2a1a:	4640      	mov	r0, r8
    2a1c:	4798      	blx	r3
    2a1e:	e753      	b.n	28c8 <USB_Handler+0x2d8>
    2a20:	002a      	movs	r2, r5
    2a22:	003d      	movs	r5, r7
    2a24:	4647      	mov	r7, r8
    2a26:	4690      	mov	r8, r2
    2a28:	015b      	lsls	r3, r3, #5
    2a2a:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2a2c:	2308      	movs	r3, #8
    2a2e:	33ff      	adds	r3, #255	; 0xff
    2a30:	5ceb      	ldrb	r3, [r5, r3]
    2a32:	079b      	lsls	r3, r3, #30
    2a34:	d51e      	bpl.n	2a74 <USB_Handler+0x484>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    2a36:	2202      	movs	r2, #2
    2a38:	2308      	movs	r3, #8
    2a3a:	33ff      	adds	r3, #255	; 0xff
    2a3c:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    2a3e:	485c      	ldr	r0, [pc, #368]	; (2bb0 <USB_Handler+0x5c0>)
    2a40:	3b88      	subs	r3, #136	; 0x88
    2a42:	3bff      	subs	r3, #255	; 0xff
    2a44:	4642      	mov	r2, r8
    2a46:	4313      	orrs	r3, r2
    2a48:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    2a4a:	9b01      	ldr	r3, [sp, #4]
    2a4c:	015a      	lsls	r2, r3, #5
    2a4e:	4b57      	ldr	r3, [pc, #348]	; (2bac <USB_Handler+0x5bc>)
    2a50:	189b      	adds	r3, r3, r2
    2a52:	3310      	adds	r3, #16
    2a54:	685b      	ldr	r3, [r3, #4]
    2a56:	049b      	lsls	r3, r3, #18
    2a58:	0c9b      	lsrs	r3, r3, #18
    2a5a:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    2a5c:	078b      	lsls	r3, r1, #30
    2a5e:	d100      	bne.n	2a62 <USB_Handler+0x472>
    2a60:	e732      	b.n	28c8 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    2a62:	9b01      	ldr	r3, [sp, #4]
    2a64:	330d      	adds	r3, #13
    2a66:	011b      	lsls	r3, r3, #4
    2a68:	18fb      	adds	r3, r7, r3
    2a6a:	685b      	ldr	r3, [r3, #4]
    2a6c:	4950      	ldr	r1, [pc, #320]	; (2bb0 <USB_Handler+0x5c0>)
    2a6e:	0038      	movs	r0, r7
    2a70:	4798      	blx	r3
    2a72:	e729      	b.n	28c8 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2a74:	2308      	movs	r3, #8
    2a76:	33ff      	adds	r3, #255	; 0xff
    2a78:	5ceb      	ldrb	r3, [r5, r3]
    2a7a:	07db      	lsls	r3, r3, #31
    2a7c:	d5ee      	bpl.n	2a5c <USB_Handler+0x46c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    2a7e:	2201      	movs	r2, #1
    2a80:	2308      	movs	r3, #8
    2a82:	33ff      	adds	r3, #255	; 0xff
    2a84:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    2a86:	484a      	ldr	r0, [pc, #296]	; (2bb0 <USB_Handler+0x5c0>)
    2a88:	4643      	mov	r3, r8
    2a8a:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    2a8c:	9b01      	ldr	r3, [sp, #4]
    2a8e:	015b      	lsls	r3, r3, #5
    2a90:	4a46      	ldr	r2, [pc, #280]	; (2bac <USB_Handler+0x5bc>)
    2a92:	18d2      	adds	r2, r2, r3
    2a94:	6853      	ldr	r3, [r2, #4]
    2a96:	049b      	lsls	r3, r3, #18
    2a98:	0c9b      	lsrs	r3, r3, #18
    2a9a:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    2a9c:	6853      	ldr	r3, [r2, #4]
    2a9e:	011b      	lsls	r3, r3, #4
    2aa0:	0c9b      	lsrs	r3, r3, #18
    2aa2:	8083      	strh	r3, [r0, #4]
    2aa4:	e7da      	b.n	2a5c <USB_Handler+0x46c>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2aa6:	2208      	movs	r2, #8
    2aa8:	32ff      	adds	r2, #255	; 0xff
    2aaa:	5c9a      	ldrb	r2, [r3, r2]
    2aac:	0752      	lsls	r2, r2, #29
    2aae:	d56e      	bpl.n	2b8e <USB_Handler+0x59e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    2ab0:	2004      	movs	r0, #4
    2ab2:	2208      	movs	r2, #8
    2ab4:	32ff      	adds	r2, #255	; 0xff
    2ab6:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    2ab8:	9801      	ldr	r0, [sp, #4]
    2aba:	0142      	lsls	r2, r0, #5
    2abc:	4b3b      	ldr	r3, [pc, #236]	; (2bac <USB_Handler+0x5bc>)
    2abe:	189b      	adds	r3, r3, r2
    2ac0:	7a9b      	ldrb	r3, [r3, #10]
    2ac2:	079b      	lsls	r3, r3, #30
    2ac4:	d505      	bpl.n	2ad2 <USB_Handler+0x4e2>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    2ac6:	4b39      	ldr	r3, [pc, #228]	; (2bac <USB_Handler+0x5bc>)
    2ac8:	189b      	adds	r3, r3, r2
    2aca:	7a9a      	ldrb	r2, [r3, #10]
    2acc:	2002      	movs	r0, #2
    2ace:	4382      	bics	r2, r0
    2ad0:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    2ad2:	4b37      	ldr	r3, [pc, #220]	; (2bb0 <USB_Handler+0x5c0>)
    2ad4:	4642      	mov	r2, r8
    2ad6:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2ad8:	9b01      	ldr	r3, [sp, #4]
    2ada:	3308      	adds	r3, #8
    2adc:	015b      	lsls	r3, r3, #5
    2ade:	683a      	ldr	r2, [r7, #0]
    2ae0:	4694      	mov	ip, r2
    2ae2:	4463      	add	r3, ip
    2ae4:	79db      	ldrb	r3, [r3, #7]
    2ae6:	07db      	lsls	r3, r3, #31
    2ae8:	d551      	bpl.n	2b8e <USB_Handler+0x59e>
    2aea:	e6ed      	b.n	28c8 <USB_Handler+0x2d8>
    2aec:	3301      	adds	r3, #1
    2aee:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    2af0:	2b08      	cmp	r3, #8
    2af2:	d100      	bne.n	2af6 <USB_Handler+0x506>
    2af4:	e6e8      	b.n	28c8 <USB_Handler+0x2d8>
    2af6:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    2af8:	9301      	str	r3, [sp, #4]
    2afa:	0032      	movs	r2, r6
    2afc:	411a      	asrs	r2, r3
    2afe:	4661      	mov	r1, ip
    2b00:	4211      	tst	r1, r2
    2b02:	d0f3      	beq.n	2aec <USB_Handler+0x4fc>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    2b04:	001a      	movs	r2, r3
    2b06:	3208      	adds	r2, #8
    2b08:	0152      	lsls	r2, r2, #5
    2b0a:	18ba      	adds	r2, r7, r2
    2b0c:	79d2      	ldrb	r2, [r2, #7]
    2b0e:	b2d2      	uxtb	r2, r2
    2b10:	7a21      	ldrb	r1, [r4, #8]
    2b12:	4011      	ands	r1, r2
    2b14:	7820      	ldrb	r0, [r4, #0]
    2b16:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    2b18:	4648      	mov	r0, r9
    2b1a:	4210      	tst	r0, r2
    2b1c:	d000      	beq.n	2b20 <USB_Handler+0x530>
    2b1e:	e730      	b.n	2982 <USB_Handler+0x392>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2b20:	4650      	mov	r0, sl
    2b22:	4210      	tst	r0, r2
    2b24:	d000      	beq.n	2b28 <USB_Handler+0x538>
    2b26:	e75b      	b.n	29e0 <USB_Handler+0x3f0>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    2b28:	4658      	mov	r0, fp
    2b2a:	4210      	tst	r0, r2
    2b2c:	d000      	beq.n	2b30 <USB_Handler+0x540>
    2b2e:	e777      	b.n	2a20 <USB_Handler+0x430>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    2b30:	200c      	movs	r0, #12
    2b32:	4210      	tst	r0, r2
    2b34:	d0da      	beq.n	2aec <USB_Handler+0x4fc>
    2b36:	002a      	movs	r2, r5
    2b38:	003d      	movs	r5, r7
    2b3a:	4647      	mov	r7, r8
    2b3c:	4690      	mov	r8, r2
    2b3e:	015b      	lsls	r3, r3, #5
    2b40:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2b42:	2208      	movs	r2, #8
    2b44:	32ff      	adds	r2, #255	; 0xff
    2b46:	5c9a      	ldrb	r2, [r3, r2]
    2b48:	0712      	lsls	r2, r2, #28
    2b4a:	d5ac      	bpl.n	2aa6 <USB_Handler+0x4b6>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    2b4c:	3804      	subs	r0, #4
    2b4e:	2208      	movs	r2, #8
    2b50:	32ff      	adds	r2, #255	; 0xff
    2b52:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    2b54:	9801      	ldr	r0, [sp, #4]
    2b56:	0142      	lsls	r2, r0, #5
    2b58:	4b14      	ldr	r3, [pc, #80]	; (2bac <USB_Handler+0x5bc>)
    2b5a:	189b      	adds	r3, r3, r2
    2b5c:	7e9b      	ldrb	r3, [r3, #26]
    2b5e:	079b      	lsls	r3, r3, #30
    2b60:	d505      	bpl.n	2b6e <USB_Handler+0x57e>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    2b62:	4b12      	ldr	r3, [pc, #72]	; (2bac <USB_Handler+0x5bc>)
    2b64:	189b      	adds	r3, r3, r2
    2b66:	7e9a      	ldrb	r2, [r3, #26]
    2b68:	2002      	movs	r0, #2
    2b6a:	4382      	bics	r2, r0
    2b6c:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    2b6e:	2380      	movs	r3, #128	; 0x80
    2b70:	425b      	negs	r3, r3
    2b72:	4642      	mov	r2, r8
    2b74:	4313      	orrs	r3, r2
    2b76:	4a0e      	ldr	r2, [pc, #56]	; (2bb0 <USB_Handler+0x5c0>)
    2b78:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2b7a:	9b01      	ldr	r3, [sp, #4]
    2b7c:	3308      	adds	r3, #8
    2b7e:	015b      	lsls	r3, r3, #5
    2b80:	683a      	ldr	r2, [r7, #0]
    2b82:	4694      	mov	ip, r2
    2b84:	4463      	add	r3, ip
    2b86:	79db      	ldrb	r3, [r3, #7]
    2b88:	079b      	lsls	r3, r3, #30
    2b8a:	d500      	bpl.n	2b8e <USB_Handler+0x59e>
    2b8c:	e69c      	b.n	28c8 <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    2b8e:	230c      	movs	r3, #12
    2b90:	420b      	tst	r3, r1
    2b92:	d100      	bne.n	2b96 <USB_Handler+0x5a6>
    2b94:	e698      	b.n	28c8 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    2b96:	9b01      	ldr	r3, [sp, #4]
    2b98:	011b      	lsls	r3, r3, #4
    2b9a:	18fb      	adds	r3, r7, r3
    2b9c:	33d8      	adds	r3, #216	; 0xd8
    2b9e:	681b      	ldr	r3, [r3, #0]
    2ba0:	4903      	ldr	r1, [pc, #12]	; (2bb0 <USB_Handler+0x5c0>)
    2ba2:	0038      	movs	r0, r7
    2ba4:	4798      	blx	r3
    2ba6:	e68f      	b.n	28c8 <USB_Handler+0x2d8>
    2ba8:	20000638 	.word	0x20000638
    2bac:	200009d8 	.word	0x200009d8
    2bb0:	2000063c 	.word	0x2000063c

00002bb4 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    2bb4:	2200      	movs	r2, #0
    2bb6:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    2bb8:	2301      	movs	r3, #1
    2bba:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    2bbc:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    2bbe:	70c3      	strb	r3, [r0, #3]
}
    2bc0:	4770      	bx	lr
	...

00002bc4 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    2bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bc6:	46c6      	mov	lr, r8
    2bc8:	b500      	push	{lr}
    2bca:	b082      	sub	sp, #8
    2bcc:	0004      	movs	r4, r0
    2bce:	000d      	movs	r5, r1
    2bd0:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    2bd2:	2300      	movs	r3, #0
    2bd4:	4a6d      	ldr	r2, [pc, #436]	; (2d8c <usb_init+0x1c8>)
    2bd6:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    2bd8:	4a6d      	ldr	r2, [pc, #436]	; (2d90 <usb_init+0x1cc>)
    2bda:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    2bdc:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    2bde:	496d      	ldr	r1, [pc, #436]	; (2d94 <usb_init+0x1d0>)
    2be0:	69ca      	ldr	r2, [r1, #28]
    2be2:	2020      	movs	r0, #32
    2be4:	4302      	orrs	r2, r0
    2be6:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2be8:	af01      	add	r7, sp, #4
    2bea:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2bec:	2201      	movs	r2, #1
    2bee:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    2bf0:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    2bf2:	3306      	adds	r3, #6
    2bf4:	4698      	mov	r8, r3
    2bf6:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    2bf8:	0039      	movs	r1, r7
    2bfa:	3808      	subs	r0, #8
    2bfc:	f7fe fb58 	bl	12b0 <system_pinmux_pin_set_config>
	pin_config.mux_position = MUX_PA25G_USB_DP;
    2c00:	4643      	mov	r3, r8
    2c02:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    2c04:	0039      	movs	r1, r7
    2c06:	2019      	movs	r0, #25
    2c08:	f7fe fb52 	bl	12b0 <system_pinmux_pin_set_config>

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    2c0c:	78b3      	ldrb	r3, [r6, #2]
    2c0e:	466a      	mov	r2, sp
    2c10:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    2c12:	4669      	mov	r1, sp
    2c14:	2006      	movs	r0, #6
    2c16:	f7fe faeb 	bl	11f0 <system_gclk_chan_set_config>
	system_gclk_chan_enable(USB_GCLK_ID);
    2c1a:	2006      	movs	r0, #6
    2c1c:	f7fe faaa 	bl	1174 <system_gclk_chan_enable>

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    2c20:	782b      	ldrb	r3, [r5, #0]
    2c22:	2201      	movs	r2, #1
    2c24:	4313      	orrs	r3, r2
    2c26:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    2c28:	78ab      	ldrb	r3, [r5, #2]
    2c2a:	07db      	lsls	r3, r3, #31
    2c2c:	d4fc      	bmi.n	2c28 <usb_init+0x64>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2c2e:	4a5a      	ldr	r2, [pc, #360]	; (2d98 <usb_init+0x1d4>)
    2c30:	78d3      	ldrb	r3, [r2, #3]
    2c32:	2103      	movs	r1, #3
    2c34:	438b      	bics	r3, r1
    2c36:	2102      	movs	r1, #2
    2c38:	430b      	orrs	r3, r1
    2c3a:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2c3c:	78d3      	ldrb	r3, [r2, #3]
    2c3e:	210c      	movs	r1, #12
    2c40:	438b      	bics	r3, r1
    2c42:	2108      	movs	r1, #8
    2c44:	430b      	orrs	r3, r1
    2c46:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    2c48:	4b54      	ldr	r3, [pc, #336]	; (2d9c <usb_init+0x1d8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    2c4a:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    2c4c:	039b      	lsls	r3, r3, #14
    2c4e:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    2c50:	2b1f      	cmp	r3, #31
    2c52:	d100      	bne.n	2c56 <usb_init+0x92>
    2c54:	e08e      	b.n	2d74 <usb_init+0x1b0>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    2c56:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    2c58:	019b      	lsls	r3, r3, #6
    2c5a:	4951      	ldr	r1, [pc, #324]	; (2da0 <usb_init+0x1dc>)
    2c5c:	400a      	ands	r2, r1
    2c5e:	4313      	orrs	r3, r2
    2c60:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    2c62:	4b4e      	ldr	r3, [pc, #312]	; (2d9c <usb_init+0x1d8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    2c64:	681b      	ldr	r3, [r3, #0]
    2c66:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    2c68:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    2c6a:	2b1f      	cmp	r3, #31
    2c6c:	d100      	bne.n	2c70 <usb_init+0xac>
    2c6e:	e083      	b.n	2d78 <usb_init+0x1b4>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    2c70:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    2c72:	211f      	movs	r1, #31
    2c74:	438a      	bics	r2, r1
    2c76:	4313      	orrs	r3, r2
    2c78:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    2c7a:	4b48      	ldr	r3, [pc, #288]	; (2d9c <usb_init+0x1d8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    2c7c:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    2c7e:	019b      	lsls	r3, r3, #6
    2c80:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    2c82:	2b07      	cmp	r3, #7
    2c84:	d100      	bne.n	2c88 <usb_init+0xc4>
    2c86:	e079      	b.n	2d7c <usb_init+0x1b8>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    2c88:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    2c8a:	031b      	lsls	r3, r3, #12
    2c8c:	4945      	ldr	r1, [pc, #276]	; (2da4 <usb_init+0x1e0>)
    2c8e:	400a      	ands	r2, r1
    2c90:	4313      	orrs	r3, r2
    2c92:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    2c94:	7832      	ldrb	r2, [r6, #0]
    2c96:	7829      	ldrb	r1, [r5, #0]
    2c98:	01d2      	lsls	r2, r2, #7
    2c9a:	237f      	movs	r3, #127	; 0x7f
    2c9c:	400b      	ands	r3, r1
    2c9e:	4313      	orrs	r3, r2
    2ca0:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    2ca2:	7871      	ldrb	r1, [r6, #1]
    2ca4:	782b      	ldrb	r3, [r5, #0]
    2ca6:	2201      	movs	r2, #1
    2ca8:	400a      	ands	r2, r1
    2caa:	0092      	lsls	r2, r2, #2
    2cac:	2104      	movs	r1, #4
    2cae:	438b      	bics	r3, r1
    2cb0:	4313      	orrs	r3, r2
    2cb2:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    2cb4:	4b3c      	ldr	r3, [pc, #240]	; (2da8 <usb_init+0x1e4>)
    2cb6:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    2cb8:	78f3      	ldrb	r3, [r6, #3]
    2cba:	2b01      	cmp	r3, #1
    2cbc:	d060      	beq.n	2d80 <usb_init+0x1bc>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    2cbe:	2b00      	cmp	r3, #0
    2cc0:	d106      	bne.n	2cd0 <usb_init+0x10c>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    2cc2:	6822      	ldr	r2, [r4, #0]
    2cc4:	8913      	ldrh	r3, [r2, #8]
    2cc6:	210c      	movs	r1, #12
    2cc8:	438b      	bics	r3, r1
    2cca:	2104      	movs	r1, #4
    2ccc:	430b      	orrs	r3, r1
    2cce:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    2cd0:	2280      	movs	r2, #128	; 0x80
    2cd2:	0052      	lsls	r2, r2, #1
    2cd4:	2100      	movs	r1, #0
    2cd6:	4834      	ldr	r0, [pc, #208]	; (2da8 <usb_init+0x1e4>)
    2cd8:	f000 fa9d 	bl	3216 <memset>
    2cdc:	1d23      	adds	r3, r4, #4
    2cde:	0021      	movs	r1, r4
    2ce0:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    2ce2:	2200      	movs	r2, #0
    2ce4:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    2ce6:	428b      	cmp	r3, r1
    2ce8:	d1fc      	bne.n	2ce4 <usb_init+0x120>
    2cea:	0021      	movs	r1, r4
    2cec:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    2cee:	2200      	movs	r2, #0
    2cf0:	601a      	str	r2, [r3, #0]
    2cf2:	605a      	str	r2, [r3, #4]
    2cf4:	609a      	str	r2, [r3, #8]
    2cf6:	60da      	str	r2, [r3, #12]
    2cf8:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    2cfa:	428b      	cmp	r3, r1
    2cfc:	d1f8      	bne.n	2cf0 <usb_init+0x12c>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    2cfe:	2300      	movs	r3, #0
    2d00:	22a4      	movs	r2, #164	; 0xa4
    2d02:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    2d04:	3201      	adds	r2, #1
    2d06:	54a3      	strb	r3, [r4, r2]
    2d08:	0023      	movs	r3, r4
    2d0a:	33a6      	adds	r3, #166	; 0xa6
    2d0c:	0021      	movs	r1, r4
    2d0e:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    2d10:	2200      	movs	r2, #0
    2d12:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    2d14:	721a      	strb	r2, [r3, #8]
    2d16:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    2d18:	4299      	cmp	r1, r3
    2d1a:	d1fa      	bne.n	2d12 <usb_init+0x14e>
    2d1c:	0023      	movs	r3, r4
    2d1e:	33b8      	adds	r3, #184	; 0xb8
    2d20:	0021      	movs	r1, r4
    2d22:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    2d24:	2200      	movs	r2, #0
    2d26:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    2d28:	428b      	cmp	r3, r1
    2d2a:	d1fc      	bne.n	2d26 <usb_init+0x162>
    2d2c:	0021      	movs	r1, r4
    2d2e:	3155      	adds	r1, #85	; 0x55
    2d30:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    2d32:	2200      	movs	r2, #0
    2d34:	601a      	str	r2, [r3, #0]
    2d36:	605a      	str	r2, [r3, #4]
    2d38:	609a      	str	r2, [r3, #8]
    2d3a:	60da      	str	r2, [r3, #12]
    2d3c:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    2d3e:	428b      	cmp	r3, r1
    2d40:	d1f8      	bne.n	2d34 <usb_init+0x170>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    2d42:	2300      	movs	r3, #0
    2d44:	22aa      	movs	r2, #170	; 0xaa
    2d46:	0052      	lsls	r2, r2, #1
    2d48:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    2d4a:	3202      	adds	r2, #2
    2d4c:	52a3      	strh	r3, [r4, r2]
    2d4e:	0023      	movs	r3, r4
    2d50:	3359      	adds	r3, #89	; 0x59
    2d52:	33ff      	adds	r3, #255	; 0xff
    2d54:	3461      	adds	r4, #97	; 0x61
    2d56:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    2d58:	2200      	movs	r2, #0
    2d5a:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    2d5c:	721a      	strb	r2, [r3, #8]
    2d5e:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    2d60:	42a3      	cmp	r3, r4
    2d62:	d1fa      	bne.n	2d5a <usb_init+0x196>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2d64:	2280      	movs	r2, #128	; 0x80
    2d66:	4b11      	ldr	r3, [pc, #68]	; (2dac <usb_init+0x1e8>)
    2d68:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    2d6a:	2000      	movs	r0, #0
    2d6c:	b002      	add	sp, #8
    2d6e:	bc04      	pop	{r2}
    2d70:	4690      	mov	r8, r2
    2d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    2d74:	3b1a      	subs	r3, #26
    2d76:	e76e      	b.n	2c56 <usb_init+0x92>
		pad_transp = 29;
    2d78:	3b02      	subs	r3, #2
    2d7a:	e779      	b.n	2c70 <usb_init+0xac>
		pad_trim = 3;
    2d7c:	3b04      	subs	r3, #4
    2d7e:	e783      	b.n	2c88 <usb_init+0xc4>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    2d80:	6822      	ldr	r2, [r4, #0]
    2d82:	8913      	ldrh	r3, [r2, #8]
    2d84:	3108      	adds	r1, #8
    2d86:	438b      	bics	r3, r1
    2d88:	8113      	strh	r3, [r2, #8]
    2d8a:	e7a1      	b.n	2cd0 <usb_init+0x10c>
    2d8c:	20000644 	.word	0x20000644
    2d90:	20000634 	.word	0x20000634
    2d94:	40000400 	.word	0x40000400
    2d98:	41005000 	.word	0x41005000
    2d9c:	00806024 	.word	0x00806024
    2da0:	fffff83f 	.word	0xfffff83f
    2da4:	ffff8fff 	.word	0xffff8fff
    2da8:	200009d8 	.word	0x200009d8
    2dac:	e000e100 	.word	0xe000e100

00002db0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2db0:	e7fe      	b.n	2db0 <Dummy_Handler>
	...

00002db4 <Reset_Handler>:
{
    2db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2db6:	4a2a      	ldr	r2, [pc, #168]	; (2e60 <Reset_Handler+0xac>)
    2db8:	4b2a      	ldr	r3, [pc, #168]	; (2e64 <Reset_Handler+0xb0>)
    2dba:	429a      	cmp	r2, r3
    2dbc:	d011      	beq.n	2de2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2dbe:	001a      	movs	r2, r3
    2dc0:	4b29      	ldr	r3, [pc, #164]	; (2e68 <Reset_Handler+0xb4>)
    2dc2:	429a      	cmp	r2, r3
    2dc4:	d20d      	bcs.n	2de2 <Reset_Handler+0x2e>
    2dc6:	4a29      	ldr	r2, [pc, #164]	; (2e6c <Reset_Handler+0xb8>)
    2dc8:	3303      	adds	r3, #3
    2dca:	1a9b      	subs	r3, r3, r2
    2dcc:	089b      	lsrs	r3, r3, #2
    2dce:	3301      	adds	r3, #1
    2dd0:	009b      	lsls	r3, r3, #2
    2dd2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2dd4:	4823      	ldr	r0, [pc, #140]	; (2e64 <Reset_Handler+0xb0>)
    2dd6:	4922      	ldr	r1, [pc, #136]	; (2e60 <Reset_Handler+0xac>)
    2dd8:	588c      	ldr	r4, [r1, r2]
    2dda:	5084      	str	r4, [r0, r2]
    2ddc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2dde:	429a      	cmp	r2, r3
    2de0:	d1fa      	bne.n	2dd8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2de2:	4a23      	ldr	r2, [pc, #140]	; (2e70 <Reset_Handler+0xbc>)
    2de4:	4b23      	ldr	r3, [pc, #140]	; (2e74 <Reset_Handler+0xc0>)
    2de6:	429a      	cmp	r2, r3
    2de8:	d20a      	bcs.n	2e00 <Reset_Handler+0x4c>
    2dea:	43d3      	mvns	r3, r2
    2dec:	4921      	ldr	r1, [pc, #132]	; (2e74 <Reset_Handler+0xc0>)
    2dee:	185b      	adds	r3, r3, r1
    2df0:	2103      	movs	r1, #3
    2df2:	438b      	bics	r3, r1
    2df4:	3304      	adds	r3, #4
    2df6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2df8:	2100      	movs	r1, #0
    2dfa:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2dfc:	4293      	cmp	r3, r2
    2dfe:	d1fc      	bne.n	2dfa <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2e00:	4a1d      	ldr	r2, [pc, #116]	; (2e78 <Reset_Handler+0xc4>)
    2e02:	21ff      	movs	r1, #255	; 0xff
    2e04:	4b1d      	ldr	r3, [pc, #116]	; (2e7c <Reset_Handler+0xc8>)
    2e06:	438b      	bics	r3, r1
    2e08:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2e0a:	39fd      	subs	r1, #253	; 0xfd
    2e0c:	2390      	movs	r3, #144	; 0x90
    2e0e:	005b      	lsls	r3, r3, #1
    2e10:	4a1b      	ldr	r2, [pc, #108]	; (2e80 <Reset_Handler+0xcc>)
    2e12:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2e14:	4a1b      	ldr	r2, [pc, #108]	; (2e84 <Reset_Handler+0xd0>)
    2e16:	78d3      	ldrb	r3, [r2, #3]
    2e18:	2503      	movs	r5, #3
    2e1a:	43ab      	bics	r3, r5
    2e1c:	2402      	movs	r4, #2
    2e1e:	4323      	orrs	r3, r4
    2e20:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2e22:	78d3      	ldrb	r3, [r2, #3]
    2e24:	270c      	movs	r7, #12
    2e26:	43bb      	bics	r3, r7
    2e28:	2608      	movs	r6, #8
    2e2a:	4333      	orrs	r3, r6
    2e2c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2e2e:	4b16      	ldr	r3, [pc, #88]	; (2e88 <Reset_Handler+0xd4>)
    2e30:	7b98      	ldrb	r0, [r3, #14]
    2e32:	2230      	movs	r2, #48	; 0x30
    2e34:	4390      	bics	r0, r2
    2e36:	2220      	movs	r2, #32
    2e38:	4310      	orrs	r0, r2
    2e3a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2e3c:	7b99      	ldrb	r1, [r3, #14]
    2e3e:	43b9      	bics	r1, r7
    2e40:	4331      	orrs	r1, r6
    2e42:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2e44:	7b9a      	ldrb	r2, [r3, #14]
    2e46:	43aa      	bics	r2, r5
    2e48:	4322      	orrs	r2, r4
    2e4a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2e4c:	4a0f      	ldr	r2, [pc, #60]	; (2e8c <Reset_Handler+0xd8>)
    2e4e:	6853      	ldr	r3, [r2, #4]
    2e50:	2180      	movs	r1, #128	; 0x80
    2e52:	430b      	orrs	r3, r1
    2e54:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2e56:	f000 f9b1 	bl	31bc <__libc_init_array>
        main();
    2e5a:	f7fd f9d9 	bl	210 <main>
    2e5e:	e7fe      	b.n	2e5e <Reset_Handler+0xaa>
    2e60:	00003294 	.word	0x00003294
    2e64:	20000000 	.word	0x20000000
    2e68:	200000e0 	.word	0x200000e0
    2e6c:	20000004 	.word	0x20000004
    2e70:	200000e0 	.word	0x200000e0
    2e74:	20000ad8 	.word	0x20000ad8
    2e78:	e000ed00 	.word	0xe000ed00
    2e7c:	00000000 	.word	0x00000000
    2e80:	41007000 	.word	0x41007000
    2e84:	41005000 	.word	0x41005000
    2e88:	41004800 	.word	0x41004800
    2e8c:	41004000 	.word	0x41004000

00002e90 <__udivsi3>:
    2e90:	2200      	movs	r2, #0
    2e92:	0843      	lsrs	r3, r0, #1
    2e94:	428b      	cmp	r3, r1
    2e96:	d374      	bcc.n	2f82 <__udivsi3+0xf2>
    2e98:	0903      	lsrs	r3, r0, #4
    2e9a:	428b      	cmp	r3, r1
    2e9c:	d35f      	bcc.n	2f5e <__udivsi3+0xce>
    2e9e:	0a03      	lsrs	r3, r0, #8
    2ea0:	428b      	cmp	r3, r1
    2ea2:	d344      	bcc.n	2f2e <__udivsi3+0x9e>
    2ea4:	0b03      	lsrs	r3, r0, #12
    2ea6:	428b      	cmp	r3, r1
    2ea8:	d328      	bcc.n	2efc <__udivsi3+0x6c>
    2eaa:	0c03      	lsrs	r3, r0, #16
    2eac:	428b      	cmp	r3, r1
    2eae:	d30d      	bcc.n	2ecc <__udivsi3+0x3c>
    2eb0:	22ff      	movs	r2, #255	; 0xff
    2eb2:	0209      	lsls	r1, r1, #8
    2eb4:	ba12      	rev	r2, r2
    2eb6:	0c03      	lsrs	r3, r0, #16
    2eb8:	428b      	cmp	r3, r1
    2eba:	d302      	bcc.n	2ec2 <__udivsi3+0x32>
    2ebc:	1212      	asrs	r2, r2, #8
    2ebe:	0209      	lsls	r1, r1, #8
    2ec0:	d065      	beq.n	2f8e <__udivsi3+0xfe>
    2ec2:	0b03      	lsrs	r3, r0, #12
    2ec4:	428b      	cmp	r3, r1
    2ec6:	d319      	bcc.n	2efc <__udivsi3+0x6c>
    2ec8:	e000      	b.n	2ecc <__udivsi3+0x3c>
    2eca:	0a09      	lsrs	r1, r1, #8
    2ecc:	0bc3      	lsrs	r3, r0, #15
    2ece:	428b      	cmp	r3, r1
    2ed0:	d301      	bcc.n	2ed6 <__udivsi3+0x46>
    2ed2:	03cb      	lsls	r3, r1, #15
    2ed4:	1ac0      	subs	r0, r0, r3
    2ed6:	4152      	adcs	r2, r2
    2ed8:	0b83      	lsrs	r3, r0, #14
    2eda:	428b      	cmp	r3, r1
    2edc:	d301      	bcc.n	2ee2 <__udivsi3+0x52>
    2ede:	038b      	lsls	r3, r1, #14
    2ee0:	1ac0      	subs	r0, r0, r3
    2ee2:	4152      	adcs	r2, r2
    2ee4:	0b43      	lsrs	r3, r0, #13
    2ee6:	428b      	cmp	r3, r1
    2ee8:	d301      	bcc.n	2eee <__udivsi3+0x5e>
    2eea:	034b      	lsls	r3, r1, #13
    2eec:	1ac0      	subs	r0, r0, r3
    2eee:	4152      	adcs	r2, r2
    2ef0:	0b03      	lsrs	r3, r0, #12
    2ef2:	428b      	cmp	r3, r1
    2ef4:	d301      	bcc.n	2efa <__udivsi3+0x6a>
    2ef6:	030b      	lsls	r3, r1, #12
    2ef8:	1ac0      	subs	r0, r0, r3
    2efa:	4152      	adcs	r2, r2
    2efc:	0ac3      	lsrs	r3, r0, #11
    2efe:	428b      	cmp	r3, r1
    2f00:	d301      	bcc.n	2f06 <__udivsi3+0x76>
    2f02:	02cb      	lsls	r3, r1, #11
    2f04:	1ac0      	subs	r0, r0, r3
    2f06:	4152      	adcs	r2, r2
    2f08:	0a83      	lsrs	r3, r0, #10
    2f0a:	428b      	cmp	r3, r1
    2f0c:	d301      	bcc.n	2f12 <__udivsi3+0x82>
    2f0e:	028b      	lsls	r3, r1, #10
    2f10:	1ac0      	subs	r0, r0, r3
    2f12:	4152      	adcs	r2, r2
    2f14:	0a43      	lsrs	r3, r0, #9
    2f16:	428b      	cmp	r3, r1
    2f18:	d301      	bcc.n	2f1e <__udivsi3+0x8e>
    2f1a:	024b      	lsls	r3, r1, #9
    2f1c:	1ac0      	subs	r0, r0, r3
    2f1e:	4152      	adcs	r2, r2
    2f20:	0a03      	lsrs	r3, r0, #8
    2f22:	428b      	cmp	r3, r1
    2f24:	d301      	bcc.n	2f2a <__udivsi3+0x9a>
    2f26:	020b      	lsls	r3, r1, #8
    2f28:	1ac0      	subs	r0, r0, r3
    2f2a:	4152      	adcs	r2, r2
    2f2c:	d2cd      	bcs.n	2eca <__udivsi3+0x3a>
    2f2e:	09c3      	lsrs	r3, r0, #7
    2f30:	428b      	cmp	r3, r1
    2f32:	d301      	bcc.n	2f38 <__udivsi3+0xa8>
    2f34:	01cb      	lsls	r3, r1, #7
    2f36:	1ac0      	subs	r0, r0, r3
    2f38:	4152      	adcs	r2, r2
    2f3a:	0983      	lsrs	r3, r0, #6
    2f3c:	428b      	cmp	r3, r1
    2f3e:	d301      	bcc.n	2f44 <__udivsi3+0xb4>
    2f40:	018b      	lsls	r3, r1, #6
    2f42:	1ac0      	subs	r0, r0, r3
    2f44:	4152      	adcs	r2, r2
    2f46:	0943      	lsrs	r3, r0, #5
    2f48:	428b      	cmp	r3, r1
    2f4a:	d301      	bcc.n	2f50 <__udivsi3+0xc0>
    2f4c:	014b      	lsls	r3, r1, #5
    2f4e:	1ac0      	subs	r0, r0, r3
    2f50:	4152      	adcs	r2, r2
    2f52:	0903      	lsrs	r3, r0, #4
    2f54:	428b      	cmp	r3, r1
    2f56:	d301      	bcc.n	2f5c <__udivsi3+0xcc>
    2f58:	010b      	lsls	r3, r1, #4
    2f5a:	1ac0      	subs	r0, r0, r3
    2f5c:	4152      	adcs	r2, r2
    2f5e:	08c3      	lsrs	r3, r0, #3
    2f60:	428b      	cmp	r3, r1
    2f62:	d301      	bcc.n	2f68 <__udivsi3+0xd8>
    2f64:	00cb      	lsls	r3, r1, #3
    2f66:	1ac0      	subs	r0, r0, r3
    2f68:	4152      	adcs	r2, r2
    2f6a:	0883      	lsrs	r3, r0, #2
    2f6c:	428b      	cmp	r3, r1
    2f6e:	d301      	bcc.n	2f74 <__udivsi3+0xe4>
    2f70:	008b      	lsls	r3, r1, #2
    2f72:	1ac0      	subs	r0, r0, r3
    2f74:	4152      	adcs	r2, r2
    2f76:	0843      	lsrs	r3, r0, #1
    2f78:	428b      	cmp	r3, r1
    2f7a:	d301      	bcc.n	2f80 <__udivsi3+0xf0>
    2f7c:	004b      	lsls	r3, r1, #1
    2f7e:	1ac0      	subs	r0, r0, r3
    2f80:	4152      	adcs	r2, r2
    2f82:	1a41      	subs	r1, r0, r1
    2f84:	d200      	bcs.n	2f88 <__udivsi3+0xf8>
    2f86:	4601      	mov	r1, r0
    2f88:	4152      	adcs	r2, r2
    2f8a:	4610      	mov	r0, r2
    2f8c:	4770      	bx	lr
    2f8e:	e7ff      	b.n	2f90 <__udivsi3+0x100>
    2f90:	b501      	push	{r0, lr}
    2f92:	2000      	movs	r0, #0
    2f94:	f000 f8f0 	bl	3178 <__aeabi_idiv0>
    2f98:	bd02      	pop	{r1, pc}
    2f9a:	46c0      	nop			; (mov r8, r8)

00002f9c <__aeabi_uidivmod>:
    2f9c:	2900      	cmp	r1, #0
    2f9e:	d0f7      	beq.n	2f90 <__udivsi3+0x100>
    2fa0:	e776      	b.n	2e90 <__udivsi3>
    2fa2:	4770      	bx	lr

00002fa4 <__divsi3>:
    2fa4:	4603      	mov	r3, r0
    2fa6:	430b      	orrs	r3, r1
    2fa8:	d47f      	bmi.n	30aa <__divsi3+0x106>
    2faa:	2200      	movs	r2, #0
    2fac:	0843      	lsrs	r3, r0, #1
    2fae:	428b      	cmp	r3, r1
    2fb0:	d374      	bcc.n	309c <__divsi3+0xf8>
    2fb2:	0903      	lsrs	r3, r0, #4
    2fb4:	428b      	cmp	r3, r1
    2fb6:	d35f      	bcc.n	3078 <__divsi3+0xd4>
    2fb8:	0a03      	lsrs	r3, r0, #8
    2fba:	428b      	cmp	r3, r1
    2fbc:	d344      	bcc.n	3048 <__divsi3+0xa4>
    2fbe:	0b03      	lsrs	r3, r0, #12
    2fc0:	428b      	cmp	r3, r1
    2fc2:	d328      	bcc.n	3016 <__divsi3+0x72>
    2fc4:	0c03      	lsrs	r3, r0, #16
    2fc6:	428b      	cmp	r3, r1
    2fc8:	d30d      	bcc.n	2fe6 <__divsi3+0x42>
    2fca:	22ff      	movs	r2, #255	; 0xff
    2fcc:	0209      	lsls	r1, r1, #8
    2fce:	ba12      	rev	r2, r2
    2fd0:	0c03      	lsrs	r3, r0, #16
    2fd2:	428b      	cmp	r3, r1
    2fd4:	d302      	bcc.n	2fdc <__divsi3+0x38>
    2fd6:	1212      	asrs	r2, r2, #8
    2fd8:	0209      	lsls	r1, r1, #8
    2fda:	d065      	beq.n	30a8 <__divsi3+0x104>
    2fdc:	0b03      	lsrs	r3, r0, #12
    2fde:	428b      	cmp	r3, r1
    2fe0:	d319      	bcc.n	3016 <__divsi3+0x72>
    2fe2:	e000      	b.n	2fe6 <__divsi3+0x42>
    2fe4:	0a09      	lsrs	r1, r1, #8
    2fe6:	0bc3      	lsrs	r3, r0, #15
    2fe8:	428b      	cmp	r3, r1
    2fea:	d301      	bcc.n	2ff0 <__divsi3+0x4c>
    2fec:	03cb      	lsls	r3, r1, #15
    2fee:	1ac0      	subs	r0, r0, r3
    2ff0:	4152      	adcs	r2, r2
    2ff2:	0b83      	lsrs	r3, r0, #14
    2ff4:	428b      	cmp	r3, r1
    2ff6:	d301      	bcc.n	2ffc <__divsi3+0x58>
    2ff8:	038b      	lsls	r3, r1, #14
    2ffa:	1ac0      	subs	r0, r0, r3
    2ffc:	4152      	adcs	r2, r2
    2ffe:	0b43      	lsrs	r3, r0, #13
    3000:	428b      	cmp	r3, r1
    3002:	d301      	bcc.n	3008 <__divsi3+0x64>
    3004:	034b      	lsls	r3, r1, #13
    3006:	1ac0      	subs	r0, r0, r3
    3008:	4152      	adcs	r2, r2
    300a:	0b03      	lsrs	r3, r0, #12
    300c:	428b      	cmp	r3, r1
    300e:	d301      	bcc.n	3014 <__divsi3+0x70>
    3010:	030b      	lsls	r3, r1, #12
    3012:	1ac0      	subs	r0, r0, r3
    3014:	4152      	adcs	r2, r2
    3016:	0ac3      	lsrs	r3, r0, #11
    3018:	428b      	cmp	r3, r1
    301a:	d301      	bcc.n	3020 <__divsi3+0x7c>
    301c:	02cb      	lsls	r3, r1, #11
    301e:	1ac0      	subs	r0, r0, r3
    3020:	4152      	adcs	r2, r2
    3022:	0a83      	lsrs	r3, r0, #10
    3024:	428b      	cmp	r3, r1
    3026:	d301      	bcc.n	302c <__divsi3+0x88>
    3028:	028b      	lsls	r3, r1, #10
    302a:	1ac0      	subs	r0, r0, r3
    302c:	4152      	adcs	r2, r2
    302e:	0a43      	lsrs	r3, r0, #9
    3030:	428b      	cmp	r3, r1
    3032:	d301      	bcc.n	3038 <__divsi3+0x94>
    3034:	024b      	lsls	r3, r1, #9
    3036:	1ac0      	subs	r0, r0, r3
    3038:	4152      	adcs	r2, r2
    303a:	0a03      	lsrs	r3, r0, #8
    303c:	428b      	cmp	r3, r1
    303e:	d301      	bcc.n	3044 <__divsi3+0xa0>
    3040:	020b      	lsls	r3, r1, #8
    3042:	1ac0      	subs	r0, r0, r3
    3044:	4152      	adcs	r2, r2
    3046:	d2cd      	bcs.n	2fe4 <__divsi3+0x40>
    3048:	09c3      	lsrs	r3, r0, #7
    304a:	428b      	cmp	r3, r1
    304c:	d301      	bcc.n	3052 <__divsi3+0xae>
    304e:	01cb      	lsls	r3, r1, #7
    3050:	1ac0      	subs	r0, r0, r3
    3052:	4152      	adcs	r2, r2
    3054:	0983      	lsrs	r3, r0, #6
    3056:	428b      	cmp	r3, r1
    3058:	d301      	bcc.n	305e <__divsi3+0xba>
    305a:	018b      	lsls	r3, r1, #6
    305c:	1ac0      	subs	r0, r0, r3
    305e:	4152      	adcs	r2, r2
    3060:	0943      	lsrs	r3, r0, #5
    3062:	428b      	cmp	r3, r1
    3064:	d301      	bcc.n	306a <__divsi3+0xc6>
    3066:	014b      	lsls	r3, r1, #5
    3068:	1ac0      	subs	r0, r0, r3
    306a:	4152      	adcs	r2, r2
    306c:	0903      	lsrs	r3, r0, #4
    306e:	428b      	cmp	r3, r1
    3070:	d301      	bcc.n	3076 <__divsi3+0xd2>
    3072:	010b      	lsls	r3, r1, #4
    3074:	1ac0      	subs	r0, r0, r3
    3076:	4152      	adcs	r2, r2
    3078:	08c3      	lsrs	r3, r0, #3
    307a:	428b      	cmp	r3, r1
    307c:	d301      	bcc.n	3082 <__divsi3+0xde>
    307e:	00cb      	lsls	r3, r1, #3
    3080:	1ac0      	subs	r0, r0, r3
    3082:	4152      	adcs	r2, r2
    3084:	0883      	lsrs	r3, r0, #2
    3086:	428b      	cmp	r3, r1
    3088:	d301      	bcc.n	308e <__divsi3+0xea>
    308a:	008b      	lsls	r3, r1, #2
    308c:	1ac0      	subs	r0, r0, r3
    308e:	4152      	adcs	r2, r2
    3090:	0843      	lsrs	r3, r0, #1
    3092:	428b      	cmp	r3, r1
    3094:	d301      	bcc.n	309a <__divsi3+0xf6>
    3096:	004b      	lsls	r3, r1, #1
    3098:	1ac0      	subs	r0, r0, r3
    309a:	4152      	adcs	r2, r2
    309c:	1a41      	subs	r1, r0, r1
    309e:	d200      	bcs.n	30a2 <__divsi3+0xfe>
    30a0:	4601      	mov	r1, r0
    30a2:	4152      	adcs	r2, r2
    30a4:	4610      	mov	r0, r2
    30a6:	4770      	bx	lr
    30a8:	e05d      	b.n	3166 <__divsi3+0x1c2>
    30aa:	0fca      	lsrs	r2, r1, #31
    30ac:	d000      	beq.n	30b0 <__divsi3+0x10c>
    30ae:	4249      	negs	r1, r1
    30b0:	1003      	asrs	r3, r0, #32
    30b2:	d300      	bcc.n	30b6 <__divsi3+0x112>
    30b4:	4240      	negs	r0, r0
    30b6:	4053      	eors	r3, r2
    30b8:	2200      	movs	r2, #0
    30ba:	469c      	mov	ip, r3
    30bc:	0903      	lsrs	r3, r0, #4
    30be:	428b      	cmp	r3, r1
    30c0:	d32d      	bcc.n	311e <__divsi3+0x17a>
    30c2:	0a03      	lsrs	r3, r0, #8
    30c4:	428b      	cmp	r3, r1
    30c6:	d312      	bcc.n	30ee <__divsi3+0x14a>
    30c8:	22fc      	movs	r2, #252	; 0xfc
    30ca:	0189      	lsls	r1, r1, #6
    30cc:	ba12      	rev	r2, r2
    30ce:	0a03      	lsrs	r3, r0, #8
    30d0:	428b      	cmp	r3, r1
    30d2:	d30c      	bcc.n	30ee <__divsi3+0x14a>
    30d4:	0189      	lsls	r1, r1, #6
    30d6:	1192      	asrs	r2, r2, #6
    30d8:	428b      	cmp	r3, r1
    30da:	d308      	bcc.n	30ee <__divsi3+0x14a>
    30dc:	0189      	lsls	r1, r1, #6
    30de:	1192      	asrs	r2, r2, #6
    30e0:	428b      	cmp	r3, r1
    30e2:	d304      	bcc.n	30ee <__divsi3+0x14a>
    30e4:	0189      	lsls	r1, r1, #6
    30e6:	d03a      	beq.n	315e <__divsi3+0x1ba>
    30e8:	1192      	asrs	r2, r2, #6
    30ea:	e000      	b.n	30ee <__divsi3+0x14a>
    30ec:	0989      	lsrs	r1, r1, #6
    30ee:	09c3      	lsrs	r3, r0, #7
    30f0:	428b      	cmp	r3, r1
    30f2:	d301      	bcc.n	30f8 <__divsi3+0x154>
    30f4:	01cb      	lsls	r3, r1, #7
    30f6:	1ac0      	subs	r0, r0, r3
    30f8:	4152      	adcs	r2, r2
    30fa:	0983      	lsrs	r3, r0, #6
    30fc:	428b      	cmp	r3, r1
    30fe:	d301      	bcc.n	3104 <__divsi3+0x160>
    3100:	018b      	lsls	r3, r1, #6
    3102:	1ac0      	subs	r0, r0, r3
    3104:	4152      	adcs	r2, r2
    3106:	0943      	lsrs	r3, r0, #5
    3108:	428b      	cmp	r3, r1
    310a:	d301      	bcc.n	3110 <__divsi3+0x16c>
    310c:	014b      	lsls	r3, r1, #5
    310e:	1ac0      	subs	r0, r0, r3
    3110:	4152      	adcs	r2, r2
    3112:	0903      	lsrs	r3, r0, #4
    3114:	428b      	cmp	r3, r1
    3116:	d301      	bcc.n	311c <__divsi3+0x178>
    3118:	010b      	lsls	r3, r1, #4
    311a:	1ac0      	subs	r0, r0, r3
    311c:	4152      	adcs	r2, r2
    311e:	08c3      	lsrs	r3, r0, #3
    3120:	428b      	cmp	r3, r1
    3122:	d301      	bcc.n	3128 <__divsi3+0x184>
    3124:	00cb      	lsls	r3, r1, #3
    3126:	1ac0      	subs	r0, r0, r3
    3128:	4152      	adcs	r2, r2
    312a:	0883      	lsrs	r3, r0, #2
    312c:	428b      	cmp	r3, r1
    312e:	d301      	bcc.n	3134 <__divsi3+0x190>
    3130:	008b      	lsls	r3, r1, #2
    3132:	1ac0      	subs	r0, r0, r3
    3134:	4152      	adcs	r2, r2
    3136:	d2d9      	bcs.n	30ec <__divsi3+0x148>
    3138:	0843      	lsrs	r3, r0, #1
    313a:	428b      	cmp	r3, r1
    313c:	d301      	bcc.n	3142 <__divsi3+0x19e>
    313e:	004b      	lsls	r3, r1, #1
    3140:	1ac0      	subs	r0, r0, r3
    3142:	4152      	adcs	r2, r2
    3144:	1a41      	subs	r1, r0, r1
    3146:	d200      	bcs.n	314a <__divsi3+0x1a6>
    3148:	4601      	mov	r1, r0
    314a:	4663      	mov	r3, ip
    314c:	4152      	adcs	r2, r2
    314e:	105b      	asrs	r3, r3, #1
    3150:	4610      	mov	r0, r2
    3152:	d301      	bcc.n	3158 <__divsi3+0x1b4>
    3154:	4240      	negs	r0, r0
    3156:	2b00      	cmp	r3, #0
    3158:	d500      	bpl.n	315c <__divsi3+0x1b8>
    315a:	4249      	negs	r1, r1
    315c:	4770      	bx	lr
    315e:	4663      	mov	r3, ip
    3160:	105b      	asrs	r3, r3, #1
    3162:	d300      	bcc.n	3166 <__divsi3+0x1c2>
    3164:	4240      	negs	r0, r0
    3166:	b501      	push	{r0, lr}
    3168:	2000      	movs	r0, #0
    316a:	f000 f805 	bl	3178 <__aeabi_idiv0>
    316e:	bd02      	pop	{r1, pc}

00003170 <__aeabi_idivmod>:
    3170:	2900      	cmp	r1, #0
    3172:	d0f8      	beq.n	3166 <__divsi3+0x1c2>
    3174:	e716      	b.n	2fa4 <__divsi3>
    3176:	4770      	bx	lr

00003178 <__aeabi_idiv0>:
    3178:	4770      	bx	lr
    317a:	46c0      	nop			; (mov r8, r8)

0000317c <__ctzsi2>:
    317c:	4241      	negs	r1, r0
    317e:	4008      	ands	r0, r1
    3180:	211c      	movs	r1, #28
    3182:	2301      	movs	r3, #1
    3184:	041b      	lsls	r3, r3, #16
    3186:	4298      	cmp	r0, r3
    3188:	d301      	bcc.n	318e <__ctzsi2+0x12>
    318a:	0c00      	lsrs	r0, r0, #16
    318c:	3910      	subs	r1, #16
    318e:	0a1b      	lsrs	r3, r3, #8
    3190:	4298      	cmp	r0, r3
    3192:	d301      	bcc.n	3198 <__ctzsi2+0x1c>
    3194:	0a00      	lsrs	r0, r0, #8
    3196:	3908      	subs	r1, #8
    3198:	091b      	lsrs	r3, r3, #4
    319a:	4298      	cmp	r0, r3
    319c:	d301      	bcc.n	31a2 <__ctzsi2+0x26>
    319e:	0900      	lsrs	r0, r0, #4
    31a0:	3904      	subs	r1, #4
    31a2:	a202      	add	r2, pc, #8	; (adr r2, 31ac <__ctzsi2+0x30>)
    31a4:	5c10      	ldrb	r0, [r2, r0]
    31a6:	1a40      	subs	r0, r0, r1
    31a8:	4770      	bx	lr
    31aa:	46c0      	nop			; (mov r8, r8)
    31ac:	1d1d1c1b 	.word	0x1d1d1c1b
    31b0:	1e1e1e1e 	.word	0x1e1e1e1e
    31b4:	1f1f1f1f 	.word	0x1f1f1f1f
    31b8:	1f1f1f1f 	.word	0x1f1f1f1f

000031bc <__libc_init_array>:
    31bc:	b570      	push	{r4, r5, r6, lr}
    31be:	2600      	movs	r6, #0
    31c0:	4d0c      	ldr	r5, [pc, #48]	; (31f4 <__libc_init_array+0x38>)
    31c2:	4c0d      	ldr	r4, [pc, #52]	; (31f8 <__libc_init_array+0x3c>)
    31c4:	1b64      	subs	r4, r4, r5
    31c6:	10a4      	asrs	r4, r4, #2
    31c8:	42a6      	cmp	r6, r4
    31ca:	d109      	bne.n	31e0 <__libc_init_array+0x24>
    31cc:	2600      	movs	r6, #0
    31ce:	f000 f851 	bl	3274 <_init>
    31d2:	4d0a      	ldr	r5, [pc, #40]	; (31fc <__libc_init_array+0x40>)
    31d4:	4c0a      	ldr	r4, [pc, #40]	; (3200 <__libc_init_array+0x44>)
    31d6:	1b64      	subs	r4, r4, r5
    31d8:	10a4      	asrs	r4, r4, #2
    31da:	42a6      	cmp	r6, r4
    31dc:	d105      	bne.n	31ea <__libc_init_array+0x2e>
    31de:	bd70      	pop	{r4, r5, r6, pc}
    31e0:	00b3      	lsls	r3, r6, #2
    31e2:	58eb      	ldr	r3, [r5, r3]
    31e4:	4798      	blx	r3
    31e6:	3601      	adds	r6, #1
    31e8:	e7ee      	b.n	31c8 <__libc_init_array+0xc>
    31ea:	00b3      	lsls	r3, r6, #2
    31ec:	58eb      	ldr	r3, [r5, r3]
    31ee:	4798      	blx	r3
    31f0:	3601      	adds	r6, #1
    31f2:	e7f2      	b.n	31da <__libc_init_array+0x1e>
    31f4:	00003280 	.word	0x00003280
    31f8:	00003280 	.word	0x00003280
    31fc:	00003280 	.word	0x00003280
    3200:	00003284 	.word	0x00003284

00003204 <memcpy>:
    3204:	2300      	movs	r3, #0
    3206:	b510      	push	{r4, lr}
    3208:	429a      	cmp	r2, r3
    320a:	d100      	bne.n	320e <memcpy+0xa>
    320c:	bd10      	pop	{r4, pc}
    320e:	5ccc      	ldrb	r4, [r1, r3]
    3210:	54c4      	strb	r4, [r0, r3]
    3212:	3301      	adds	r3, #1
    3214:	e7f8      	b.n	3208 <memcpy+0x4>

00003216 <memset>:
    3216:	0003      	movs	r3, r0
    3218:	1882      	adds	r2, r0, r2
    321a:	4293      	cmp	r3, r2
    321c:	d100      	bne.n	3220 <memset+0xa>
    321e:	4770      	bx	lr
    3220:	7019      	strb	r1, [r3, #0]
    3222:	3301      	adds	r3, #1
    3224:	e7f9      	b.n	321a <memset+0x4>
    3226:	0400      	.short	0x0400
    3228:	00000f04 	.word	0x00000f04
    322c:	00000ee4 	.word	0x00000ee4
    3230:	00000ee4 	.word	0x00000ee4
    3234:	00000f70 	.word	0x00000f70
    3238:	00000ef6 	.word	0x00000ef6
    323c:	00000f12 	.word	0x00000f12
    3240:	00000ee8 	.word	0x00000ee8
    3244:	00000f20 	.word	0x00000f20
    3248:	00000f60 	.word	0x00000f60
    324c:	000021d0 	.word	0x000021d0
    3250:	000021de 	.word	0x000021de
    3254:	00002278 	.word	0x00002278
    3258:	00002318 	.word	0x00002318
    325c:	0000237c 	.word	0x0000237c

00003260 <_usb_device_irq_bits>:
    3260:	00080004 00800070 01000001 00000200     ....p...........

00003270 <_usb_endpoint_irq_bits>:
    3270:	60100c03                                ...`

00003274 <_init>:
    3274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3276:	46c0      	nop			; (mov r8, r8)
    3278:	bcf8      	pop	{r3, r4, r5, r6, r7}
    327a:	bc08      	pop	{r3}
    327c:	469e      	mov	lr, r3
    327e:	4770      	bx	lr

00003280 <__init_array_start>:
    3280:	000000dd 	.word	0x000000dd

00003284 <_fini>:
    3284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3286:	46c0      	nop			; (mov r8, r8)
    3288:	bcf8      	pop	{r3, r4, r5, r6, r7}
    328a:	bc08      	pop	{r3}
    328c:	469e      	mov	lr, r3
    328e:	4770      	bx	lr

00003290 <__fini_array_start>:
    3290:	000000b5 	.word	0x000000b5
